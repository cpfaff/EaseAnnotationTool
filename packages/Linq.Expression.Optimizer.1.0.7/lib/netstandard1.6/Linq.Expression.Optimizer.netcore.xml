<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Linq.Expression.Optimizer.netcore</name></assembly>
<members>
<member name="M:ExpressionOptimizer.tryVisit(System.Linq.Expressions.Expression)">
<summary>
 Expression tree visitor: go through the whole expression tree.
 Catches the exceptions.
</summary>
</member>
<member name="M:ExpressionOptimizer.visit(System.Linq.Expressions.Expression)">
<summary>
 Expression tree visitor: go through the whole expression tree.
</summary>
</member>
<member name="M:ExpressionOptimizer.doReduction(System.Linq.Expressions.Expression)">
<summary>
 Does reductions just for a current node.
</summary>
</member>
<member name="P:ExpressionOptimizer.reductionMethods">
<summary>
 Used optimization methods
</summary>
</member>
<member name="M:ExpressionOptimizer.Methods.evaluate constants(System.Linq.Expressions.Expression)">
<summary>
 Evaluating constants to not mess with our expressions:
</summary>
</member>
<member name="M:ExpressionOptimizer.Methods.balancetree(System.Linq.Expressions.Expression)">
<summary>
 Balance tree that is too much weighted to other side.
 The real advantage is not-so-nested-stack
</summary>
</member>
<member name="M:ExpressionOptimizer.Methods.distribute(System.Linq.Expressions.Expression)">
<summary>
 Not in use, would cause looping...
</summary>
</member>
<member name="M:ExpressionOptimizer.Methods.associate(System.Linq.Expressions.Expression)">
<summary>
 Not in use, would cause looping...
</summary>
</member>
<member name="M:ExpressionOptimizer.Methods.not false is true(System.Linq.Expressions.Expression)">
<summary>
 not(false) -&gt; true 
</summary>
</member>
<member name="M:ExpressionOptimizer.Methods.cut not used condition(System.Linq.Expressions.Expression)">
<summary>
 if false then x else y -&gt; y 
</summary>
</member>
<member name="M:ExpressionOptimizer.Methods.remove AnonymousType(System.Linq.Expressions.Expression)">
<summary>
 Purpose of this is to replace non-used anonymous types:
 new AnonymousObject(Item1 = x, Item2 = &quot;&quot;).Item1    --&gt;   x
</summary>
</member>
<member name="M:ExpressionOptimizer.Methods.replace constant comparison(System.Linq.Expressions.Expression)">
<summary>
 Purpose of this is optimize away already known constant=constant style expressions.
   7 &gt; 8      --&gt;   False
 &quot;G&quot; = &quot;G&quot;    --&gt;   True
</summary>
</member>
<member name="M:ExpressionOptimizer.Methods.constant basic type(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
<summary>
 We want to eliminate enum-types and constants like 1 or &quot;a&quot;.
 But Constant value can be also another complex object like IQueryable.
 We don&apos;t want to evaluate those!
</summary>
</member>
<member name="T:ExpressionOptimizer">
<summary>
 This is just a light-weight expression optimizer.
 It won&apos;t do any heavy stuff...
</summary>
</member>
<member name="M:System.Linq.OptimizeExtension.Optimize(System.Linq.Expressions.Expression)">
<summary>
 Expression tree visit&apos;or: go through the whole expression tree.
</summary>
</member>
</members>
</doc>
