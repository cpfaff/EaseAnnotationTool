//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace CAFE.Web.Models
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    
    
    /// <summary>
    /// <para xml:lang="en">
    ///	This is the root element of the Essential Annotation Schema for Ecology.
    ///      </para>
    /// </summary>
    public partial class AnnotationItemModel : CAFE.Core.Resources.AccessibleResourceDescriptorBase
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///	      The Object wraps all information stored in an annotation.
        ///	      It links context information for the data but also the
        ///	      references and the resources which allow to acccess the
        ///	      data described.
        ///	    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public AnnotationObjectModel Object { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class AnnotationObjectModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///		    The Contexts element is a wrapper around the different
        ///		    contexts which have been selecte representing distinct
        ///		    dimensions of information in the search space of ecology.
        ///		  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<ContextModel> Contexts { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="AnnotationObject" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AnnotationObject" /> class.</para>
        /// </summary>
        public AnnotationObjectModel()
        {
            this.Contexts = new System.Collections.Generic.List<ContextModel>();
            this.Resources = new System.Collections.Generic.List<ResourceModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///		    The references capture important information that is
        ///		    neccesary to exchange the data.
        ///		  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ReferencesModel References { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///		    The resources module serves as a wrapper around embedded and online resources
        ///		    described by the EASE annotation file (e.g. EASE+EML+CSV). The module allows to
        ///		    reference exchange and access data.
        ///		  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<ResourceModel> Resources { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ContextModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The time context allows to capture the
        ///				quantitative and qualitative temporal aspects
        ///				that describe a search object.
        ///			      </para>
        /// </summary>
        public TimeContextModel TimeContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The space context allows to capture the quantitative and qualitative spatial
        ///				aspects that describe the the object.
        ///			      </para>
        /// </summary>
        public SpaceContextModel SpaceContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The sphere context allows to capture the quantitative and qualitative sphere
        ///				related aspects that describe the the object.
        ///			      </para>
        /// </summary>
        public SphereContextModel SphereContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The biome context allows to capture the quantitative and qualitative biome
        ///				related aspects that describe the the object.
        ///			      </para>
        /// </summary>
        public BiomeContextModel BiomeContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The organism context captures the quantitative and qualitative organism related
        ///				aspects that describe the the object.
        ///			      </para>
        /// </summary>
        public OrganismContextModel OrganismContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The process context captures the quantitative and qualitative process related
        ///				aspects that describe the the object.
        ///			      </para>
        /// </summary>
        public ProcessContextModel ProcessContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The chemical context allows to capture the quantitative and qualitative
        ///				chemical related aspects that describe the the object.
        ///			      </para>
        /// </summary>
        public ChemicalContextModel ChemicalContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The method context allows to capture the quantitative and qualitative method
        ///				related aspects that describe the the object.
        ///			      </para>
        /// </summary>
        public MethodContextModel MethodContext { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class TimeContextModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The time range allows to capture the
        ///				      quantitative and qualitative temporal
        ///				      aspects of the temporal extetent which
        ///				      characterize the object.
        ///				    </para>
        /// </summary>
        public TimeRangesModel TimeRanges { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The time periods is a wrapper around all
        ///				      sorts of time periods that provide a
        ///				      reference for the temporal context of the
        ///				      the object.
        ///				    </para>
        /// </summary>
        public TimePeriodsModel TimePeriods { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around temporal aspects describing the temporal resolution of the
        ///				      object.
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<TemporalResolutionModel> TemporalResolutions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TemporalResolutions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TemporalResolutions collection is empty.</para>
        /// </summary>
        public bool TemporalResolutionsSpecified
        {
            get
            {
                return (this.TemporalResolutions.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TimeContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimeContext" /> class.</para>
        /// </summary>
        public TimeContextModel()
        {
            this.TemporalResolutions = new System.Collections.Generic.List<TemporalResolutionModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class TimeRangesModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The time range allows to capture the
        ///					    quantitative and qualitative temporal
        ///					    aspects of the temporal extetent which
        ///					    characterize the object.
        ///					  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public TimeRangeModel TimeRange { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class TimeRangeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The start of the time range in
        ///						  form of a local date and
        ///						  local time associated with a
        ///						  tz-database timezone. This
        ///						  can be used e.g. to designate
        ///						  the start of a study or the
        ///						  data aquisition or a field
        ///						  campaign.
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public RangeStartModel RangeStart { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The end of the time range in
        ///						  form of a local date and
        ///						  local time associated with a
        ///						  tz-database timezone. This
        ///						  can be used e.g. to designate
        ///						  the end of a study or the
        ///						  data aquisition or a field
        ///						  campaign.
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public RangeEndModel RangeEnd { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class RangeStartModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							This element captures a local time with date and olson timezone
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public DateAndTimeModel DateTime { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class DateAndTimeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A single date in form YYYY-MM-DD conform to iso 8601.
        ///							    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.DateTime Date { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A single time in form HH:MM:SS conform to iso 8601.
        ///							    </para>
        /// </summary>
        public string Time { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      The olson timezone of the given date and time in the
        ///							      (e.g. Europe/Berlin)
        ///							    </para>
        /// </summary>
        public TimezoneModel Timezone { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class TimezoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class RangeEndModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							This element captures a local time with date and olson timezone
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public DateAndTime DateTime { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class TimePeriodsModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The time periods is a wrapper around all
        ///					    sorts of time periods that provide a
        ///					    reference for the temporal context of the
        ///					    the object.
        ///					  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<GeologicalTimePeriodModel> TimePeriod { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TimePeriods" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimePeriods" /> class.</para>
        /// </summary>
        public TimePeriodsModel()
        {
            this.TimePeriod = new System.Collections.Generic.List<GeologicalTimePeriodModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class GeologicalTimePeriodModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological eon contextualizing the object. For example: Phanerozoic,
        ///							Precambrian.
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public GeologicalEonModel GeologicalEon { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological era contextualizing the object. For example: Cenozoic,
        ///							Mesozoic, Paleozoic.
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public GeologicalEraModel GeologicalEra { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological period contextualizing the object. For example:
        ///							Quaternary, Neogene, Paleogene.
        ///						      </para>
        /// </summary>
        public GeologicalPeriodModel GeologicalPeriod { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological epoch contextualizing the object. For example: Holocene,
        ///							Pleistocene, Pilocene.
        ///						      </para>
        /// </summary>
        public GeologicalEpochModel GeologicalEpoch { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological age contextualizing the object. For example: Calabrian,
        ///							Gelasian, Piacenzian.
        ///						      </para>
        /// </summary>
        public GeologicalAgeModel GeologicalAge { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class GeologicalEonModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class GeologicalEraModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class GeologicalPeriodModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class GeologicalEpochModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class GeologicalAgeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class TemporalResolutionModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The temporal extent type is a categorical value that describes the extent of
        ///						  the setup the object comes from (e.g. Second, Minute, Hour, Day, Week,
        ///						  ...).
        ///						</para>
        /// </summary>
        public TemporalExtentTypeModel TemporalExtentType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The temporal resolution is a categorical value that describes the resolution of
        ///						  the setup the object comes from (e.g. Second, Minute, Hour, Day, Week,
        ///						  ...).
        ///						</para>
        /// </summary>
        public TemporalResolutionTypeModel TemporalResolutionType { get; set; }
        
        /// <summary>
        /// </summary>
        public int FactorPeriodId { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FactorPeriodId-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FactorPeriodId property is specified.</para>
        /// </summary>
        public bool FactorPeriodIdSpecified { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class TemporalExtentTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
        
        /// <summary>
        /// </summary>
        public int Modifyer
        {
            get
            {
                return this._modifyer;
            }
            set
            {
                this._modifyer = value;
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class TemporalResolutionTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
        
        /// <summary>
        /// </summary>
        public int Modifyer
        {
            get
            {
                return this._modifyer;
            }
            set
            {
                this._modifyer = value;
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class SpaceContextModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper that can hold several bounding boxes.
        ///				    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<BoundingBoxModel> BoundingBoxes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="SpaceContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SpaceContext" /> class.</para>
        /// </summary>
        public SpaceContextModel()
        {
            this.BoundingBoxes = new System.Collections.Generic.List<BoundingBoxModel>();
            this.Elevations = new System.Collections.Generic.List<ElevationModel>();
            this.Coordinates = new System.Collections.Generic.List<CoordinateModel>();
            this.Locations = new System.Collections.Generic.List<LocationModel>();
            this.SpatialResolutions = new System.Collections.Generic.List<SpatialResolutionModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wraper that can hold several elevation descriptions.
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<ElevationModel> Elevations { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Elevations-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Elevations collection is empty.</para>
        /// </summary>
        public bool ElevationsSpecified
        {
            get
            {
                return (this.Elevations.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The coordinates element is a wrapper that
        ///				      can capture all sorts of coordinate types
        ///				      which specify locations for the object
        ///				      (curr supporting UTM coordinates)
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<CoordinateModel> Coordinates { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Coordinates-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Coordinates collection is empty.</para>
        /// </summary>
        public bool CoordinatesSpecified
        {
            get
            {
                return (this.Coordinates.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      Locations wraps up locations information contextualizing the object.
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<LocationModel> Locations { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Locations-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Locations collection is empty.</para>
        /// </summary>
        public bool LocationsSpecified
        {
            get
            {
                return (this.Locations.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around spatial aspects describing the spatial resolution
        ///				      contextualizing the object.
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<SpatialResolutionModel> SpatialResolutions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SpatialResolutions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SpatialResolutions collection is empty.</para>
        /// </summary>
        public bool SpatialResolutionsSpecified
        {
            get
            {
                return (this.SpatialResolutions.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class BoundingBoxModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The north most geographic coordinate that signifies the boundary of the data.
        ///						  It has to be given in decimal degree between -90 and +90 degree.
        ///						</para>
        /// <para xml:lang="en">
        ///	North most coordinate in a bounding box in decimal degree
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: -90.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-90", "90")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal NorthBoundingCoordinate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The soutch most geographic coordinate that signifies the boundary of the data.
        ///						  It has to be given in decimal degree between -90 and +90 degree.
        ///						</para>
        /// <para xml:lang="en">
        ///	South most coordinate in a bounding box in decimal degree
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: -90.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-90", "90")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal SouthBoundingCoordinate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The east most geographic coordinate that signifies the boundary of the data. It
        ///						  has to be given in decimal degree between -180 and +180 degree.
        ///						</para>
        /// <para xml:lang="en">
        ///	East most coordinate in a bounding box in decimal degree
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal EastBoundingCoordinate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The west most geographic coordinate that signifies the boundary of the data. It
        ///						  has to be given in decimal degree between -180 and +180 degree.
        ///						</para>
        /// <para xml:lang="en">
        ///	West most coordinate in a bounding box in decimal degree
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal WestBoundingCoordinate { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ElevationModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The maximum elevation contextualizing the object
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal MaximumElevation { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The unit the maximum elevation is given in (e.g. Meters)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ElevationUnitModel MaximumElevationUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The minimum elevation contextualizing the object
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal MinimumElevation { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The unit the minimum elevation is given in (e.g. Meters)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ElevationUnitModel MinimumElevationUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The reference point for the given elevation
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ElevationDatumModel ElevationDatum { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ElevationUnitModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ElevationDatumModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class CoordinateModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The utm coordinate is a container that holds one utm coordinate relevant for
        ///						  the object.
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public UtmCoordinateModel UtmCoordinate { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class UtmCoordinateModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The numerical zone corresponding to the central meridian
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public int UtmCoordinateZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The subzone letter corresponding to one of the 20 north-south divisions of the
        ///							UTM grid system
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string UtmCoordinateSubZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The hemisphere. This can be N (North) or S (South)
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public UtmCoordinateHemisphereModel UtmCoordinateHemisphere { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The distance east of the origin of the UTM zone
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal UtmCoordinateEasting { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The unit of the distance of the easting (Meter, Kilometer)
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public UtmCoordinateUnitModel UtmCoordinateEastingUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The distance north of the origin of the UTM zone
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal UtmCoordinateNorthing { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The unit of the distance of the northing (Meter, Kilometer)
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public UtmCoordinateUnitModel UtmCoordinateNorthingUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The datum (e.g. wgs84)
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public UtmCoordinateGeodeticDatumModel UtmCoordinateGeodeticDatum { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class UtmCoordinateHemisphereModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class UtmCoordinateUnitModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class UtmCoordinateGeodeticDatumModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class LocationModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The name of the location (e.g. Leipzig, Cospudener See, Mount Everest)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string LocationName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The type of the location. This could be e.g. City, Lake, Study Site etc.
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public LocationTypeModel LocationType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  Name of the country of the given location name.
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public CountryNameModel CountryName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  Name of the continent of the given location.
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ContinentNameModel ContinentName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class LocationTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class CountryNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ContinentNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SpatialResolutionModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The spatial resolution type is a categorical value that describes the spatial
        ///						  resolution of the setup the object comes from (e.g. Point, Plot, Region,
        ///						  Continent, Global).
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public SpatialResolutionTypeModel SpatialExtentType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The spatial extent type is a categorical value that describes the spatial
        ///						  extent of the setup the object comes from (e.g. Point, Plot, Region,
        ///						  Continent, Global).
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public SpatialResolutionTypeModel SpatialResolutionType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SpatialResolutionTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SphereContextModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      Spheres is a wrapper that holds all sorts of information about spheres that
        ///				      describe the object. Basically it describes where the measurements have
        ///				      been taken thus this is somewhat complementing the location part.
        ///				    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<SphereModel> Spheres { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="SphereContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SphereContext" /> class.</para>
        /// </summary>
        public SphereContextModel()
        {
            this.Spheres = new System.Collections.Generic.List<SphereModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class SphereModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The atmosphere element is a wrapper around all qualitative and  quantitative
        ///						  values of the atmosphere.
        ///						</para>
        /// </summary>
        public AtmosphereModel Atmosphere { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The hydrosphere element is a wrapper around all qualitative and quantitative
        ///						  values revolving around the hydrosphere the contextualize the object.
        ///						</para>
        /// </summary>
        public HydrosphereModel Hydrosphere { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The pedosphere element is a wrapper around all
        ///						  qualitative and quantitative values of the pedosphere.
        ///						</para>
        /// </summary>
        public PedosphereModel Pedosphere { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The ecosphere element is a
        ///						  wrapper around all qualitative and quantitative
        ///						  values of the ecosphere.
        ///						</para>
        /// </summary>
        public EcosphereModel Ecosphere { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class AtmosphereModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							Named atmosphre layers is a wrapper around all sorts of named atmosphere
        ///							layers.
        ///						      </para>
        /// </summary>
        public System.Collections.Generic.List<NamedAtmosphereLayerModel> NamedAtmosphereLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NamedAtmosphereLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NamedAtmosphereLayers collection is empty.</para>
        /// </summary>
        public bool NamedAtmosphereLayersSpecified
        {
            get
            {
                return (this.NamedAtmosphereLayers.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Atmosphere" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Atmosphere" /> class.</para>
        /// </summary>
        public AtmosphereModel()
        {
            this.NamedAtmosphereLayers = new System.Collections.Generic.List<NamedAtmosphereLayerModel>();
            this.NumericAtmosphereLayers = new System.Collections.Generic.List<NumericAtmosphereLayerModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							Numeric atmosphere layers is a wrapper around all sorts of numeric aspects of
        ///							atmospheric layers.
        ///						      </para>
        /// </summary>
        public System.Collections.Generic.List<NumericAtmosphereLayerModel> NumericAtmosphereLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumericAtmosphereLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NumericAtmosphereLayers collection is empty.</para>
        /// </summary>
        public bool NumericAtmosphereLayersSpecified
        {
            get
            {
                return (this.NumericAtmosphereLayers.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class NamedAtmosphereLayerModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The name of an atmopshere layer. This can be for example strato, tropo, meso,
        ///								    ionosphere
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public AtmosphereLayerNameModel AtmosphereLayerName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class AtmosphereLayerNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class NumericAtmosphereLayerModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The minimum height in the atmosphere relevant for the object.
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal MinimumAtmosphereHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The unit the minimum height in atmosphere is given in (Meters, Kilometers).
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public AtmosphereHeightUnitModel MinimumAtmosphereHeightUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The maximum height in the atmosphere relevant for the object.
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal MaximumAtmosphereHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The unit the maximum height in atmosphere is given in (Meters, Kilometers).
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public AtmosphereHeightUnitModel MaximumAtmosphereHeightUnit { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class AtmosphereHeightUnitModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class HydrosphereModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The hydrosphere compartments captures all compartments that are described
        ///							regarding the hydrosphere (River, Lake, Sea)
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<HydrosphereCompartmentModel> HydrosphereCompartments { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Hydrosphere" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Hydrosphere" /> class.</para>
        /// </summary>
        public HydrosphereModel()
        {
            this.HydrosphereCompartments = new System.Collections.Generic.List<HydrosphereCompartmentModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class HydrosphereCompartmentModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The river element is a wrapper
        ///								    around all qualitative and quantitative
        ///								    values of a river.
        ///								  </para>
        /// </summary>
        public RiverModel River { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The lake element is a wrapper around
        ///								    all qualitative and quantitative values of a lake.
        ///								  </para>
        /// </summary>
        public LakeModel Lake { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The sea element is a wrapper around all
        ///								    qualitative and quantitative values of the sea.
        ///								  </para>
        /// </summary>
        public SeaModel Sea { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class RiverModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The river zones is a wrapper around all
        ///									  qualitative and quantitative values of the zones of a
        ///									  river.
        ///									</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<NamedRiverZoneModel> NamedRiverZones { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="River" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="River" /> class.</para>
        /// </summary>
        public RiverModel()
        {
            this.NamedRiverZones = new System.Collections.Generic.List<NamedRiverZoneModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class NamedRiverZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The longitudinal river zone contains one
        ///										      vertical river zone describing the search
        ///										      object (Rhitron, Crenon or Potamon)
        ///										    </para>
        /// </summary>
        public LongitudinalRiverZoneModel LongitudinalRiverZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The vertical river zone
        ///										      contains one vertical river zone
        ///										      describing the object (Floodplain,
        ///										      River bank, River Water, River Bed)
        ///										    </para>
        /// </summary>
        public VerticalRiverZoneModel VerticalRiverZone { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class LongitudinalRiverZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class VerticalRiverZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class LakeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The lake zones is a wrapper around
        ///									  all qualitative and quantitative values of the zones
        ///									  of a lake.
        ///									</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<NamedLakeZoneModel> NamedLakeZones { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Lake" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Lake" /> class.</para>
        /// </summary>
        public LakeModel()
        {
            this.NamedLakeZones = new System.Collections.Generic.List<NamedLakeZoneModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class NamedLakeZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      Benthic lake zones contains one
        ///										      benthic zone describing the search
        ///										      object (lithoral, benthic,
        ///										      profundal).
        ///										    </para>
        /// </summary>
        public BenthicLakeZoneModel BenthicLakeZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      Pelagig lake zone contains one pelagig zone
        ///										      describing the object (epilimnion, metalimnion,
        ///										      hypolimnion).
        ///										    </para>
        /// </summary>
        public PelagicLakeZoneModel PelagicLakeZone { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class BenthicLakeZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class PelagicLakeZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SeaModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The sea zones is a wrapper around all
        ///									  qualitative and quantitative values of
        ///									  the zones of a sea.
        ///									</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<NamedSeaZoneModel> NamedSeaZones { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Sea" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Sea" /> class.</para>
        /// </summary>
        public SeaModel()
        {
            this.NamedSeaZones = new System.Collections.Generic.List<NamedSeaZoneModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class NamedSeaZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A benthic sea zone (litoral, neritic,
        ///										      bathyal, abyssal, hadal)
        ///										    </para>
        /// </summary>
        public BenthicSeaZoneModel BenthicSeaZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A pelagic sea zone (epipelagic,
        ///										      mesopelagic, bathypelagic).
        ///										    </para>
        /// </summary>
        public PelagicSeaZoneModel PelagicSeaZone { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class BenthicSeaZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class PelagicSeaZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class PedosphereModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The pedosphere compartements captures
        ///							all compartements that are described regarding the
        ///							pedosphere (Soil)
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<PedosphereCompartmentModel> PedosphereCompartments { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Pedosphere" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Pedosphere" /> class.</para>
        /// </summary>
        public PedosphereModel()
        {
            this.PedosphereCompartments = new System.Collections.Generic.List<PedosphereCompartmentModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class PedosphereCompartmentModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The soil element captures all qualitative and
        ///								    quantitative characteristics regarding the pedosphere
        ///								    compartement soil
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public SoilModel Soil { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SoilModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The soil layers element is a
        ///									  wrapper around all qualitative
        ///									  and quantitative values of the
        ///									  named pedosphere layers.
        ///									</para>
        /// </summary>
        public System.Collections.Generic.List<NamedSoilLayerModel> NamedSoilLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NamedSoilLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NamedSoilLayers collection is empty.</para>
        /// </summary>
        public bool NamedSoilLayersSpecified
        {
            get
            {
                return (this.NamedSoilLayers.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Soil" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Soil" /> class.</para>
        /// </summary>
        public SoilModel()
        {
            this.NamedSoilLayers = new System.Collections.Generic.List<NamedSoilLayerModel>();
            this.NumericSoilLayers = new System.Collections.Generic.List<NumericSoilLayerModel>();
            this.SoilTextures = new System.Collections.Generic.List<SoilTextureModel>();
            this.SoilMorphologies = new System.Collections.Generic.List<SoilMorphologyModel>();
            this.SoilAcidities = new System.Collections.Generic.List<SoilAcidityModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The numeric soil layers
        ///									  is an element to capture layers of the
        ///									  soil numerically
        ///									</para>
        /// </summary>
        public System.Collections.Generic.List<NumericSoilLayerModel> NumericSoilLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumericSoilLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NumericSoilLayers collection is empty.</para>
        /// </summary>
        public bool NumericSoilLayersSpecified
        {
            get
            {
                return (this.NumericSoilLayers.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  Caputures all qualitative and quantitative characteristics regarding soil texture.
        ///									</para>
        /// </summary>
        public System.Collections.Generic.List<SoilTextureModel> SoilTextures { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoilTextures-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoilTextures collection is empty.</para>
        /// </summary>
        public bool SoilTexturesSpecified
        {
            get
            {
                return (this.SoilTextures.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The soil morphologies according to
        ///									  the World Reference Base for Soil Resources
        ///									</para>
        /// </summary>
        public System.Collections.Generic.List<SoilMorphologyModel> SoilMorphologies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoilMorphologies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoilMorphologies collection is empty.</para>
        /// </summary>
        public bool SoilMorphologiesSpecified
        {
            get
            {
                return (this.SoilMorphologies.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  Caputres all qualitative and quantitative
        ///									  characteristics regarding soil acidity
        ///									</para>
        /// </summary>
        public System.Collections.Generic.List<SoilAcidityModel> SoilAcidities { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoilAcidities-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoilAcidities collection is empty.</para>
        /// </summary>
        public bool SoilAciditiesSpecified
        {
            get
            {
                return (this.SoilAcidities.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class NamedSoilLayerModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The name of a soil horizon.
        ///										      O, A, B, C, R horizon
        ///										    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public SoilHorizonModel SoilHorizon { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SoilHorizonModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class NumericSoilLayerModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A decimal number of the
        ///										      minimum depth of the layer.
        ///										    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal MinimumSoilDepth { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The unit the minimum depth
        ///										      of the layer is given in
        ///										      (Meters, Centimeters).
        ///										    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public SoilDepthUnitModel MinimumSoilDepthUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A decimal number of the
        ///										      maximum depth of the layer.
        ///										    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal MaximumSoilDepth { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The unit the maximum depth
        ///										      of the layer is given in
        ///										      (Meters, Centimeters).
        ///										    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public SoilDepthUnitModel MaximumSoilDepthUnit { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SoilDepthUnitModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SoilTextureModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The percentage of sand present in the soil
        ///										    </para>
        /// <para xml:lang="en">
        ///	A percentage
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public int SandPercent { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The percentage of silt present in the soil
        ///										    </para>
        /// <para xml:lang="en">
        ///	A percentage
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public int SiltPercent { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The percentage of loam present in the soil
        ///										    </para>
        /// <para xml:lang="en">
        ///	A percentage
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public int LoamPercent { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SoilMorphologyModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A soil type as defined in the World Reference Base
        ///										      for Soil Resources.
        ///										    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public SoilMorphologyTypeModel SoilMorphologyType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SoilMorphologyTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SoilAcidityModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The soil acidity is a categorical element that captures the acidity of the
        ///										      soil. It can be Acidic, Neutral or Alkaline.
        ///										    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public SoilAcidityTypeModel SoilAcidityType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SoilAcidityTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class EcosphereModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							A wrapper around named ecosphere layers
        ///						      </para>
        /// </summary>
        public System.Collections.Generic.List<NamedEcosphereLayerModel> NamedEcosphereLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NamedEcosphereLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NamedEcosphereLayers collection is empty.</para>
        /// </summary>
        public bool NamedEcosphereLayersSpecified
        {
            get
            {
                return (this.NamedEcosphereLayers.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Ecosphere" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Ecosphere" /> class.</para>
        /// </summary>
        public EcosphereModel()
        {
            this.NamedEcosphereLayers = new System.Collections.Generic.List<NamedEcosphereLayerModel>();
            this.NumericEcosphereLayers = new System.Collections.Generic.List<NumericEcosphereLayerModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							A wrapper around numeric ecosphere layers
        ///						      </para>
        /// </summary>
        public System.Collections.Generic.List<NumericEcosphereLayerModel> NumericEcosphereLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumericEcosphereLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NumericEcosphereLayers collection is empty.</para>
        /// </summary>
        public bool NumericEcosphereLayersSpecified
        {
            get
            {
                return (this.NumericEcosphereLayers.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class NamedEcosphereLayerModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    A named layer in the ecosphere (Tree- , Shrub-, Herb-, Moss-, Ground Layer)
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public EcosphereLayerNameModel EcosphereLayerName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class EcosphereLayerNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class NumericEcosphereLayerModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    A decimal number of the minimum depth
        ///								    of the vegetation height.
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal MinimumVegetationHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The unit the minimum height of the layer
        ///								    is given in (e.g. Meters, Centimeters).
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public VegetationHeightUnitModel MinimumVegetationHeightUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    A decimal number of the maximum depth
        ///								    of the vegetation height.
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public decimal MaximumVegetationHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The unit the maximum height of the layer
        ///								    is given in (e.g. Meters, Centimeters).
        ///								  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public VegetationHeightUnitModel MaximumVegetationHeightUnit { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class VegetationHeightUnitModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class BiomeContextModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around zono biomes
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<ZonoBiomeModel> ZonoBiomes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ZonoBiomes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ZonoBiomes collection is empty.</para>
        /// </summary>
        public bool ZonoBiomesSpecified
        {
            get
            {
                return (this.ZonoBiomes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="BiomeContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BiomeContext" /> class.</para>
        /// </summary>
        public BiomeContextModel()
        {
            this.ZonoBiomes = new System.Collections.Generic.List<ZonoBiomeModel>();
            this.OroBiomes = new System.Collections.Generic.List<OroBiomeModel>();
            this.PedoBiomes = new System.Collections.Generic.List<PedoBiomeModel>();
            this.Physiognomies = new System.Collections.Generic.List<PhysiognomyModel>();
            this.LandUses = new System.Collections.Generic.List<LandUseModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around oro biomes
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<OroBiomeModel> OroBiomes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OroBiomes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OroBiomes collection is empty.</para>
        /// </summary>
        public bool OroBiomesSpecified
        {
            get
            {
                return (this.OroBiomes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around pedo biomes
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<PedoBiomeModel> PedoBiomes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PedoBiomes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PedoBiomes collection is empty.</para>
        /// </summary>
        public bool PedoBiomesSpecified
        {
            get
            {
                return (this.PedoBiomes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around physiognomies
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<PhysiognomyModel> Physiognomies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Physiognomies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Physiognomies collection is empty.</para>
        /// </summary>
        public bool PhysiognomiesSpecified
        {
            get
            {
                return (this.Physiognomies.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around land uses
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<LandUseModel> LandUses { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LandUses-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LandUses collection is empty.</para>
        /// </summary>
        public bool LandUsesSpecified
        {
            get
            {
                return (this.LandUses.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class ZonoBiomeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The biome type (Terrestrial, Freshwater, Marine)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public BiomeTypeModel BiomeType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The name of a biome zone (Polar, Boreal, Temperate, Subtropic, Tropic)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public BiomeLatitudinalZoneModel BiomeLatitudinalZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The water availability within the biome (Semi Humid, Humid, Arid, Semi Arid)
        ///						</para>
        /// </summary>
        public BiomeHumidityTypeModel BiomeHumidityType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The influence to the biome (Continental, Maritime)
        ///						</para>
        /// </summary>
        public BiomeContinentalityTypeModel BiomeContinentalityType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The hemisphere the biome is located in (North, South)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public BiomeHemisphereModel BiomeHemisphere { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class BiomeTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class BiomeLatitudinalZoneModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class BiomeHumidityTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class BiomeContinentalityTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class BiomeHemisphereModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class OroBiomeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The type of oro biome (Nivale, Subalpine, Alpine, Montane, Submontane, Planar)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public OroBiomeTypeModel OroBiomeType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class OroBiomeTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class PedoBiomeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of pedo biome (Amphibiome, Halobiome, Helobiome, Hydrobiome, Lithobiome,
        ///						  Peinobiome, Psammobiome)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public PedoBiomeTypeModel PedoBiomeType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class PedoBiomeTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class PhysiognomyModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A wrapper around physiognomy types
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<PhysiognomyTypeModel> PhysiognomyTypes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Physiognomy" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Physiognomy" /> class.</para>
        /// </summary>
        public PhysiognomyModel()
        {
            this.PhysiognomyTypes = new System.Collections.Generic.List<PhysiognomyTypeModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class PhysiognomyTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A wrapper around terrestrial physiognomies
        ///							    </para>
        /// </summary>
        public System.Collections.Generic.List<TerrestrialPhysiognomyModel> TerrestrialPhysiognomies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TerrestrialPhysiognomies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TerrestrialPhysiognomies collection is empty.</para>
        /// </summary>
        public bool TerrestrialPhysiognomiesSpecified
        {
            get
            {
                return (this.TerrestrialPhysiognomies.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="PhysiognomyType" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PhysiognomyType" /> class.</para>
        /// </summary>
        public PhysiognomyTypeModel()
        {
            this.TerrestrialPhysiognomies = new System.Collections.Generic.List<TerrestrialPhysiognomyModel>();
            this.SemiAquaticPhysiognomies = new System.Collections.Generic.List<SemiAquaticPhysiognomyModel>();
            this.AquaticPhysiognomies = new System.Collections.Generic.List<AquaticPhysiognomyModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A wrapper around semi aquatic physiognomies
        ///							    </para>
        /// </summary>
        public System.Collections.Generic.List<SemiAquaticPhysiognomyModel> SemiAquaticPhysiognomies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemiAquaticPhysiognomies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemiAquaticPhysiognomies collection is empty.</para>
        /// </summary>
        public bool SemiAquaticPhysiognomiesSpecified
        {
            get
            {
                return (this.SemiAquaticPhysiognomies.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A wrapper around aquatic physiognomies
        ///							    </para>
        /// </summary>
        public System.Collections.Generic.List<AquaticPhysiognomyModel> AquaticPhysiognomies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AquaticPhysiognomies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AquaticPhysiognomies collection is empty.</para>
        /// </summary>
        public bool AquaticPhysiognomiesSpecified
        {
            get
            {
                return (this.AquaticPhysiognomies.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class TerrestrialPhysiognomyModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  A type of terrestrial physiognomy (Evergreen Needleleaf Forest, Evergreen
        ///									  Broadleaf Forest, Deciduous Needleleaf Forest, Deciduous Broadleaf Forest)
        ///									</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public TerrestrialPhysiognomyTypeModel TerrestrialPhysiognomyType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class TerrestrialPhysiognomyTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SemiAquaticPhysiognomyModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  A type of semi aquatic physiognomy (Mire, Bog, Fan, Saltmarsh)
        ///									</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public SemiAquaticPhysiognomyTypeModel SemiAquaticPhysiognomyType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class SemiAquaticPhysiognomyTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class AquaticPhysiognomyModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  A plant characterized aquatic physiognomy type (Emergent Aquatic, Floating
        ///									  Leave Aquatic ...)
        ///									</para>
        /// </summary>
        public PlantCharacterizedAquaticPhysiognomyTypeModel PlantCharacterizedAquaticPhysiognomyType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  A habitat characterized aquatic physiognomy type (Estuary, Kelp Forest, Coral
        ///									  Reef, Cold Seep, ...)
        ///									</para>
        /// </summary>
        public HabitatCharacterizedAquaticPhysiognomyModel HabitatCharacterizedAquaticPhysiognomy { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class PlantCharacterizedAquaticPhysiognomyTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class HabitatCharacterizedAquaticPhysiognomyModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class LandUseModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of land use (Natural, Semi Natural, Urban)
        ///						</para>
        /// </summary>
        public LandUseTypeModel LandUseType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of land use form (Agriculture, Agroforestry, Forestry, Aquaculture)
        ///						</para>
        /// </summary>
        public LandUseFormModel LandUseForm { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class LandUseTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class LandUseFormModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class OrganismContextModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around organisms
        ///				    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<OrganismModel> Organisms { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="OrganismContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OrganismContext" /> class.</para>
        /// </summary>
        public OrganismContextModel()
        {
            this.Organisms = new System.Collections.Generic.List<OrganismModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class OrganismModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The taxonomy of the organism
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public TaxonomyModel Taxonomy { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class TaxonomyModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The kingdom of the organism
        ///						      </para>
        /// </summary>
        public DomainModel Domain { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The kingdom of the organism
        ///						      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public KingdomModel Kingdom { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							  The division of the organism
        ///							</para>
        /// </summary>
        public DivisionModel Division { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							  The class of the organism
        ///							</para>
        /// </summary>
        public ClassModel Class { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The order of the organism
        ///						      </para>
        /// </summary>
        public OrderModel Order { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The family of the organism
        ///						      </para>
        /// </summary>
        public FamilyModel Family { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The genus of the organism
        ///						      </para>
        /// </summary>
        public GenusModel Genus { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The full name of the organism (also including author and year)
        ///						      </para>
        /// </summary>
        public string Species { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class DomainModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class KingdomModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class DivisionModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ClassModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class OrderModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class FamilyModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class GenusModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ProcessContextModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around processes
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<ProcessModel> Processes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Processes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Processes collection is empty.</para>
        /// </summary>
        public bool ProcessesSpecified
        {
            get
            {
                return (this.Processes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ProcessContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ProcessContext" /> class.</para>
        /// </summary>
        public ProcessContextModel()
        {
            this.Processes = new System.Collections.Generic.List<ProcessModel>();
            this.Interactions = new System.Collections.Generic.List<InteractionModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around interactions
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<InteractionModel> Interactions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Interactions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Interactions collection is empty.</para>
        /// </summary>
        public bool InteractionsSpecified
        {
            get
            {
                return (this.Interactions.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class ProcessModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A named process  (Adaption, Speciation, Migration, Birth, ...)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ProcessNameModel ProcessName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The subject of the process given under process name (e.g. Organism, Chemical, Matter, Energy)
        ///						</para>
        /// </summary>
        public System.Collections.Generic.List<ProcessSubjectModel> ProcessSubject { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProcessSubject-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ProcessSubject collection is empty.</para>
        /// </summary>
        public bool ProcessSubjectSpecified
        {
            get
            {
                return (this.ProcessSubject.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Process" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Process" /> class.</para>
        /// </summary>
        public ProcessModel()
        {
            this.ProcessSubject = new System.Collections.Generic.List<ProcessSubjectModel>();
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class ProcessNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ProcessSubjectModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class InteractionModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A named interaction (Predation, Parasisitm, ...)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string InteractionName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of interaction partner covers kingdoms and the envoriment
        ///						  (Plant, Animal, Fungi, Bacteria, Archaea, Virus, Environment)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public InteractionPartnerModel InteractionPartnerOne { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A direction of the interaction (Acts On, Is Affected By, Mutually Interacts
        ///						  With)
        ///						</para>
        /// </summary>
        public InteractionDirectionModel InteractionDirection { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  An interaction quality (Neutralism, Amensalism, Commensalism, ...)
        ///						</para>
        /// </summary>
        public InteractionQualityModel InteractionQuality { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of interaction partner covers kingdoms and the envoriment
        ///						  (Plant, Animal, Fungi, Bacteria, Archaea, Virus, Environment)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public InteractionPartnerModel InteractionPartnerTwo { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class InteractionPartnerModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class InteractionDirectionModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class InteractionQualityModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ChemicalContextModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around chemical elements
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<ElementModel> Elements { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Elements-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Elements collection is empty.</para>
        /// </summary>
        public bool ElementsSpecified
        {
            get
            {
                return (this.Elements.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ChemicalContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ChemicalContext" /> class.</para>
        /// </summary>
        public ChemicalContextModel()
        {
            this.Elements = new System.Collections.Generic.List<ElementModel>();
            this.Isotopes = new System.Collections.Generic.List<IsotopeModel>();
            this.Compounds = new System.Collections.Generic.List<CompoundModel>();
            this.Functions = new System.Collections.Generic.List<FunctionModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around chemical isotopes
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<IsotopeModel> Isotopes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Isotopes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Isotopes collection is empty.</para>
        /// </summary>
        public bool IsotopesSpecified
        {
            get
            {
                return (this.Isotopes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around chemical compunds
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<CompoundModel> Compounds { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Compounds-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Compounds collection is empty.</para>
        /// </summary>
        public bool CompoundsSpecified
        {
            get
            {
                return (this.Compounds.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around chemical functions
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<FunctionModel> Functions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Functions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Functions collection is empty.</para>
        /// </summary>
        public bool FunctionsSpecified
        {
            get
            {
                return (this.Functions.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class ElementModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A named chemical element
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ElementNameModel ElementName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ElementNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class IsotopeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A named chemical isotope
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public IsotopeNameModel IsotopeName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class IsotopeNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class CompoundModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A name of a chemical compound
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string CompoundName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A compound class for the chemical compound given under compund name as coarse
        ///						  classification (Biomolecule, Aromatic, Aliphatic, ...)
        ///						</para>
        /// </summary>
        public System.Collections.Generic.List<CompoundClassModel> CompoundClass { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CompoundClass-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CompoundClass collection is empty.</para>
        /// </summary>
        public bool CompoundClassSpecified
        {
            get
            {
                return (this.CompoundClass.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Compound" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Compound" /> class.</para>
        /// </summary>
        public CompoundModel()
        {
            this.CompoundClass = new System.Collections.Generic.List<CompoundClassModel>();
            this.CompoundType = new System.Collections.Generic.List<CompoundTypeModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A compound type for the chemical compound given under the compund name. It
        ///						  serves as detailed classification (e.g. Nucleosides, Nucleotides, Amino Acid,
        ///						  Protein, ...)
        ///						</para>
        /// </summary>
        public System.Collections.Generic.List<CompoundTypeModel> CompoundType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CompoundType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CompoundType collection is empty.</para>
        /// </summary>
        public bool CompoundTypeSpecified
        {
            get
            {
                return (this.CompoundType.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class CompoundClassModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class CompoundTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class FunctionModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A chemical function type (Repellent, Reservoir, Stimulator, Structure,
        ///						  Antibody, ...)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ChemicalFunctionTypeModel ChemicalFunctionType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ChemicalFunctionTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class MethodContextModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around approaches
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<ApproachModel> Approaches { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Approaches-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Approaches collection is empty.</para>
        /// </summary>
        public bool ApproachesSpecified
        {
            get
            {
                return (this.Approaches.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MethodContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MethodContext" /> class.</para>
        /// </summary>
        public MethodContextModel()
        {
            this.Approaches = new System.Collections.Generic.List<ApproachModel>();
            this.Factors = new System.Collections.Generic.List<FactorModel>();
            this.OrganizationalHierarchies = new System.Collections.Generic.List<OrganizationalHierarchyModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around factors
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<FactorModel> Factors { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Factors-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Factors collection is empty.</para>
        /// </summary>
        public bool FactorsSpecified
        {
            get
            {
                return (this.Factors.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around organizational hierarchies
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<OrganizationalHierarchyModel> OrganizationalHierarchies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OrganizationalHierarchies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OrganizationalHierarchies collection is empty.</para>
        /// </summary>
        public bool OrganizationalHierarchiesSpecified
        {
            get
            {
                return (this.OrganizationalHierarchies.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class ApproachModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of approach used (Virtual, Manipulative, Observational)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ApproachTypeModel ApproachType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of approach localization (Microcosm, Mesocosm, Macrocosm)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public ApproachLocalizationModel ApproachLocalization { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ApproachTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ApproachLocalizationModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class FactorModel
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A name of a factor that has been measured
        ///						  or calculated in the study (Producer Diversity,
        ///						  Consumer Density, ...)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public FactorNameModel FactorName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The type of given factor (Biotic, Abiotic, Disturbance, ...)
        ///						</para>
        /// </summary>
        public FactorTypeModel FactorType { get; set; }
        
        /// <summary>
        /// </summary>
        public int Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Id-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Id property is specified.</para>
        /// </summary>
        public bool IdSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        public string Was
        {
            get
            {
                return this._was;
            }
            set
            {
                this._was = value;
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class FactorNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class FactorTypeModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class OrganizationalHierarchyModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A named organizational hierarchy of life (Atom
        ///						  Level, Molecule Level, Cell Level, ...)
        ///						</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public OrganizationHierarchyNameModel OrganizationHierarchyName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class OrganizationHierarchyNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ReferencesModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public System.Collections.Generic.List<HosterModel> Hosters { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Hosters-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Hosters collection is empty.</para>
        /// </summary>
        public bool HostersSpecified
        {
            get
            {
                return (this.Hosters.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="References" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="References" /> class.</para>
        /// </summary>
        public ReferencesModel()
        {
            this.Hosters = new System.Collections.Generic.List<HosterModel>();
            this.Persons = new System.Collections.Generic.List<PersonModel>();
            this.Descriptions = new System.Collections.Generic.List<DescriptionModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///			  Persons related to the data described with the annotation
        ///			</para>
        /// </summary>
        [CAFE.Web.ValidationAttributes.AtLeastOneAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.Collections.Generic.List<PersonModel> Persons { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///			  All types of descriptions related to the data described with the annotation
        ///			</para>
        /// </summary>
        public System.Collections.Generic.List<DescriptionModel> Descriptions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Descriptions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Descriptions collection is empty.</para>
        /// </summary>
        public bool DescriptionsSpecified
        {
            get
            {
                return (this.Descriptions.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class HosterModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The name of the hoster (e.g. SNSB, KNB)
        ///				    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public HosterNameModel HosterName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class HosterNameModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class PersonModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The function of the person in the context of the data (e.g. Contact, Author)
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<PositionModel> Position { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Person" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Person" /> class.</para>
        /// </summary>
        public PersonModel()
        {
            this.Position = new System.Collections.Generic.List<PositionModel>();
            this.Salutation = new System.Collections.Generic.List<string>();
            this.GivenName = new System.Collections.Generic.List<string>();
            this.SurName = new System.Collections.Generic.List<string>();
            this.EmailAddress = new System.Collections.Generic.List<string>();
            this.PhoneNumber = new System.Collections.Generic.List<string>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The salutation
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<string> Salutation { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Salutation-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Salutation collection is empty.</para>
        /// </summary>
        public bool SalutationSpecified
        {
            get
            {
                return (this.Salutation.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The given name
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<string> GivenName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The sur name
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<string> SurName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The email address of the person
        ///				    </para>
        /// <para xml:lang="en">
        ///	An email address
        ///      </para>
        /// <para xml:lang="en">Pattern: [^@]+@[^\.]+\..+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^@]+@[^\\.]+\\..+")]
        public System.Collections.Generic.List<string> EmailAddress { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      Phone number of the person
        ///				    </para>
        /// </summary>
        public System.Collections.Generic.List<string> PhoneNumber { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PhoneNumber-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PhoneNumber collection is empty.</para>
        /// </summary>
        public bool PhoneNumberSpecified
        {
            get
            {
                return (this.PhoneNumber.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class PositionModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class DescriptionModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A title for the data which is describe.
        ///				    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string Title { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      An abstract that describes the object in all
        ///				      its details. This can contain any information
        ///				      that is suitable to inform somebody who does
        ///				      not know your data nor your research. Write in
        ///				      great detail about all aspects that
        ///				      characterize the data (e.g. condidtions, setup,
        ///				      organism, notes).
        ///				    </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string Abstract { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class ResourceModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				Online resources reference the file that is described with the one instance of
        ///				a ease annotation.
        ///			      </para>
        /// </summary>
        public System.Collections.Generic.List<OnlineResourceModel> OnlineResources { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OnlineResources-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OnlineResources collection is empty.</para>
        /// </summary>
        public bool OnlineResourcesSpecified
        {
            get
            {
                return (this.OnlineResources.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Resource" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Resource" /> class.</para>
        /// </summary>
        public ResourceModel()
        {
            this.OnlineResources = new System.Collections.Generic.List<OnlineResourceModel>();
            this.OfflineResources = new System.Collections.Generic.List<OfflineResourceModel>();
            this.EmbeddedResources = new System.Collections.Generic.List<EmbeddedResourceModel>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				An offline resource references the file in a
        ///				database by id or by a local file path.
        ///			      </para>
        /// </summary>
        public System.Collections.Generic.List<OfflineResourceModel> OfflineResources { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OfflineResources-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OfflineResources collection is empty.</para>
        /// </summary>
        public bool OfflineResourcesSpecified
        {
            get
            {
                return (this.OfflineResources.Count != 0);
            }
        }
        
        /// <summary>
        /// </summary>
        public System.Collections.Generic.List<EmbeddedResourceModel> EmbeddedResources { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmbeddedResources-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EmbeddedResources collection is empty.</para>
        /// </summary>
        public bool EmbeddedResourcesSpecified
        {
            get
            {
                return (this.EmbeddedResources.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    public partial class OnlineResourceModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The URL to the download of the data. Using this URL with a download manager
        ///					    should return the raw data e.g. csv or whatever kind of data type is described.
        ///					  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string DownloadUrl { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The object reference URL can be used to link the annotation to more contextual
        ///					    information for example the project homepage with more extensive metadata of
        ///					    the object described with the annotation.
        ///					  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string ReferenceUrl { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The file type of the data described with the annotation. For example (Audio,
        ///					    Image, Table, Video)
        ///					  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public DataFormatModel DataFormat { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class DataFormatModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// </summary>
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class OfflineResourceModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    A database id as reference to a dataset which is described.
        ///					  </para>
        /// </summary>
        public int FileID { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FileID-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FileID property is specified.</para>
        /// </summary>
        public bool FileIDSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The file name. Fore example '19.11.1996_audio1.mp3'.
        ///					  </para>
        /// </summary>
        public string FileName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The file name including the path. Fore example '/tmp/19.11.1996_image1.png'.
        ///					  </para>
        /// </summary>
        public string FilePath { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The mime type of the base64 encoded audio data
        ///					  </para>
        /// <para xml:lang="en">
        ///	A mime type of a file
        ///      </para>
        /// </summary>
        public string MimeType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The file type of the data described with the annotation. For example (Audio,
        ///					    Image, Table, Video)
        ///					  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public DataFormat DataFormat { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class EmbeddedResourceModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					      A base 64 encoded resource
        ///					    </para>
        /// </summary>
        public Base64ResourceModel Base64Resource { get; set; }
    }
    
    /// <summary>
    /// </summary>
    public partial class Base64ResourceModel
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entität eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        public long Id { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The file name. Fore example '19.11.1996_audio1.mp3'. This is
        ///						    useful to reconstruct the file for processing.
        ///						  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string FileName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The mime type of the base64 encoded audio data
        ///						  </para>
        /// <para xml:lang="en">
        ///	A mime type of a file
        ///      </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string MimeType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    A base 64 encoded string containing the audio
        ///						  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public byte[] Data { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The date of audio encoding
        ///						  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public System.DateTime EncodingDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The time of audio encoding
        ///						  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string EncodingTime { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The sha2 hash of the base64 encoded audio data for verification
        ///						  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string Sha2Hash { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The file type of the data described with the annotation. For example (Audio,
        ///						    Image, Table, Video)
        ///						  </para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public DataFormat DataFormat { get; set; }
    }
}
