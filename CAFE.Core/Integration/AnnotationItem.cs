//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace CAFE.Core.Integration
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// <para xml:lang="en">
    ///	This is the root element of the Essential Annotation Schema for Ecology.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AnnotationItem", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Ease", Namespace="")]
    public partial class AnnotationItem
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	      The Object wraps all information stored in an annotation.
        ///	      It contains context information for the data but also the
        ///	      references and the resources which allow to acccess the
        ///	      data described.
        ///	    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Object", Namespace="")]
        public AnnotationObject Object { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AnnotationObject", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnnotationObject
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///		    The Contexts element is a wrapper around the different
        ///		    contexts which have been selecte representing distinct
        ///		    dimensions of information in the search space of ecology.
        ///		  </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Contexts", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Context", Namespace="")]
        public System.Collections.Generic.List<Context> Contexts { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="AnnotationObject" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AnnotationObject" /> class.</para>
        /// </summary>
        public AnnotationObject()
        {
            this.Contexts = new System.Collections.Generic.List<Context>();
            this.Resources = new System.Collections.Generic.List<Resource>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///		    The references capture important information that is
        ///		    neccesary to exchange the data.
        ///		  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("References", Namespace="")]
        public References References { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///		    The resources module serves as a wrapper around embedded and online resources
        ///		    described by the EASE annotation file (e.g. EASE+EML+CSV). The module allows to
        ///		    reference exchange and access data.
        ///		  </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Resources", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Resource", Namespace="")]
        public System.Collections.Generic.List<Resource> Resources { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Context", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Context
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The time context allows to capture the
        ///				quantitative and qualitative temporal aspects
        ///				that describe the the object.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TimeContext", Namespace="")]
        public TimeContext TimeContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The space context allows to capture the quantitative and qualitative spatial
        ///				aspects that describe the the object.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SpaceContext", Namespace="")]
        public SpaceContext SpaceContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The sphere context allows to capture the quantitative and qualitative sphere
        ///				related aspects that describe the the object.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SphereContext", Namespace="")]
        public SphereContext SphereContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The biome context allows to capture the quantitative and qualitative biome
        ///				related aspects that describe the the object.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BiomeContext", Namespace="")]
        public BiomeContext BiomeContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The organism context captures the quantitative and qualitative organism related
        ///				aspects that describe the the object.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OrganismContext", Namespace="")]
        public OrganismContext OrganismContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The process context captures the quantitative and qualitative process related
        ///				aspects that describe the the object.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ProcessContext", Namespace="")]
        public ProcessContext ProcessContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The chemical context allows to capture the quantitative and qualitative
        ///				chemical related aspects that describe the the object.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ChemicalContext", Namespace="")]
        public ChemicalContext ChemicalContext { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				The method context allows to capture the quantitative and qualitative method
        ///				related aspects that describe the the object.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("MethodContext", Namespace="")]
        public MethodContext MethodContext { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimeContext", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimeContext
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The time range allows to capture the
        ///				      quantitative and qualitative temporal
        ///				      aspects of the temporal extetent which
        ///				      characterize the object.
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TimeRanges", Namespace="")]
        public TimeRanges TimeRanges { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The time periods is a wrapper around all
        ///				      sorts of time periods that provide a
        ///				      reference for the temporal context of the
        ///				      the object.
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TimePeriods", Namespace="")]
        public TimePeriods TimePeriods { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around temporal aspects describing the temporal resolution of the
        ///				      object.
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("TemporalResolutions", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("TemporalResolution", Namespace="")]
        public System.Collections.Generic.List<TemporalResolution> TemporalResolutions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TemporalResolutions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TemporalResolutions collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TemporalResolutionsSpecified
        {
            get
            {
                return (this.TemporalResolutions.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TimeContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimeContext" /> class.</para>
        /// </summary>
        public TimeContext()
        {
            this.TemporalResolutions = new System.Collections.Generic.List<TemporalResolution>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimeRanges", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimeRanges
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The time range allows to capture the
        ///					    quantitative and qualitative temporal
        ///					    aspects of the temporal extetent which
        ///					    characterize the object.
        ///					  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TimeRange", Namespace="")]
        public TimeRange TimeRange { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimeRange", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimeRange
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The start of the time range in
        ///						  form of a local date and
        ///						  local time associated with a
        ///						  tz-database timezone. This
        ///						  can be used e.g. to designate
        ///						  the start of a study or the
        ///						  data aquisition or a field
        ///						  campaign.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("RangeStart", Namespace="")]
        public RangeStart RangeStart { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The end of the time range in
        ///						  form of a local date and
        ///						  local time associated with a
        ///						  tz-database timezone. This
        ///						  can be used e.g. to designate
        ///						  the end of a study or the
        ///						  data aquisition or a field
        ///						  campaign.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("RangeEnd", Namespace="")]
        public RangeEnd RangeEnd { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RangeStart", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RangeStart
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							This element captures a local time with date and olson timezone
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("DateTime", Namespace="")]
        public DateAndTime DateTime { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DateAndTime", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DateAndTime
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A single date in form YYYY-MM-DD conform to iso 8601.
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("date", Namespace="", DataType="date")]
        public System.DateTime Date { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A single time in form HH:MM:SS conform to iso 8601.
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("time", Namespace="", DataType="string")]
        public string Time { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      The olson timezone of the given date and time in the
        ///							      (e.g. Europe/Berlin)
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("timezone", Namespace="")]
        public Timezone Timezone { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Timezone", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Timezone
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A name of a timezone from the tz database. The values specified below
    ///	come from the tz database release 2016c.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimezoneVocabulary", Namespace="")]
    public enum TimezoneVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Abidjan")]
        AfricaSlashAbidjan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Accra")]
        AfricaSlashAccra,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Addis_Ababa")]
        AfricaSlashAddis_Ababa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Algiers")]
        AfricaSlashAlgiers,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Asmara")]
        AfricaSlashAsmara,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Asmera")]
        AfricaSlashAsmera,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Bamako")]
        AfricaSlashBamako,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Bangui")]
        AfricaSlashBangui,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Banjul")]
        AfricaSlashBanjul,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Bissau")]
        AfricaSlashBissau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Blantyre")]
        AfricaSlashBlantyre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Brazzaville")]
        AfricaSlashBrazzaville,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Bujumbura")]
        AfricaSlashBujumbura,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Cairo")]
        AfricaSlashCairo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Casablanca")]
        AfricaSlashCasablanca,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Ceuta")]
        AfricaSlashCeuta,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Conakry")]
        AfricaSlashConakry,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Dakar")]
        AfricaSlashDakar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Dar_es_Salaam")]
        AfricaSlashDar_Es_Salaam,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Djibouti")]
        AfricaSlashDjibouti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Douala")]
        AfricaSlashDouala,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/El_Aaiun")]
        AfricaSlashEl_Aaiun,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Freetown")]
        AfricaSlashFreetown,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Gaborone")]
        AfricaSlashGaborone,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Harare")]
        AfricaSlashHarare,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Johannesburg")]
        AfricaSlashJohannesburg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Juba")]
        AfricaSlashJuba,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Kampala")]
        AfricaSlashKampala,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Khartoum")]
        AfricaSlashKhartoum,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Kigali")]
        AfricaSlashKigali,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Kinshasa")]
        AfricaSlashKinshasa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Lagos")]
        AfricaSlashLagos,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Libreville")]
        AfricaSlashLibreville,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Lome")]
        AfricaSlashLome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Luanda")]
        AfricaSlashLuanda,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Lubumbashi")]
        AfricaSlashLubumbashi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Lusaka")]
        AfricaSlashLusaka,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Malabo")]
        AfricaSlashMalabo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Maputo")]
        AfricaSlashMaputo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Maseru")]
        AfricaSlashMaseru,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Mbabane")]
        AfricaSlashMbabane,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Mogadishu")]
        AfricaSlashMogadishu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Monrovia")]
        AfricaSlashMonrovia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Nairobi")]
        AfricaSlashNairobi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Ndjamena")]
        AfricaSlashNdjamena,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Niamey")]
        AfricaSlashNiamey,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Nouakchott")]
        AfricaSlashNouakchott,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Ouagadougou")]
        AfricaSlashOuagadougou,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Porto-Novo")]
        AfricaSlashPorto_Novo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Sao_Tome")]
        AfricaSlashSao_Tome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Timbuktu")]
        AfricaSlashTimbuktu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Tripoli")]
        AfricaSlashTripoli,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Tunis")]
        AfricaSlashTunis,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Africa/Windhoek")]
        AfricaSlashWindhoek,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Adak")]
        AmericaSlashAdak,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Anchorage")]
        AmericaSlashAnchorage,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Anguilla")]
        AmericaSlashAnguilla,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Antigua")]
        AmericaSlashAntigua,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Araguaina")]
        AmericaSlashAraguaina,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/Buenos_Aires")]
        AmericaSlashArgentinaSlashBuenos_Aires,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/Catamarca")]
        AmericaSlashArgentinaSlashCatamarca,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/ComodRivadavia")]
        AmericaSlashArgentinaSlashComodRivadavia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/Cordoba")]
        AmericaSlashArgentinaSlashCordoba,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/Jujuy")]
        AmericaSlashArgentinaSlashJujuy,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/La_Rioja")]
        AmericaSlashArgentinaSlashLa_Rioja,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/Mendoza")]
        AmericaSlashArgentinaSlashMendoza,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/Rio_Gallegos")]
        AmericaSlashArgentinaSlashRio_Gallegos,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/Salta")]
        AmericaSlashArgentinaSlashSalta,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/San_Juan")]
        AmericaSlashArgentinaSlashSan_Juan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/San_Luis")]
        AmericaSlashArgentinaSlashSan_Luis,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/Tucuman")]
        AmericaSlashArgentinaSlashTucuman,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Argentina/Ushuaia")]
        AmericaSlashArgentinaSlashUshuaia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Aruba")]
        AmericaSlashAruba,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Asuncion")]
        AmericaSlashAsuncion,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Atikokan")]
        AmericaSlashAtikokan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Atka")]
        AmericaSlashAtka,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Bahia")]
        AmericaSlashBahia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Bahia_Banderas")]
        AmericaSlashBahia_Banderas,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Barbados")]
        AmericaSlashBarbados,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Belem")]
        AmericaSlashBelem,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Belize")]
        AmericaSlashBelize,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Blanc-Sablon")]
        AmericaSlashBlanc_Sablon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Boa_Vista")]
        AmericaSlashBoa_Vista,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Bogota")]
        AmericaSlashBogota,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Boise")]
        AmericaSlashBoise,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Buenos_Aires")]
        AmericaSlashBuenos_Aires,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Cambridge_Bay")]
        AmericaSlashCambridge_Bay,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Campo_Grande")]
        AmericaSlashCampo_Grande,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Cancun")]
        AmericaSlashCancun,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Caracas")]
        AmericaSlashCaracas,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Catamarca")]
        AmericaSlashCatamarca,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Cayenne")]
        AmericaSlashCayenne,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Cayman")]
        AmericaSlashCayman,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Chicago")]
        AmericaSlashChicago,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Chihuahua")]
        AmericaSlashChihuahua,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Coral_Harbour")]
        AmericaSlashCoral_Harbour,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Cordoba")]
        AmericaSlashCordoba,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Costa_Rica")]
        AmericaSlashCosta_Rica,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Creston")]
        AmericaSlashCreston,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Cuiaba")]
        AmericaSlashCuiaba,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Curacao")]
        AmericaSlashCuracao,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Danmarkshavn")]
        AmericaSlashDanmarkshavn,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Dawson")]
        AmericaSlashDawson,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Dawson_Creek")]
        AmericaSlashDawson_Creek,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Denver")]
        AmericaSlashDenver,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Detroit")]
        AmericaSlashDetroit,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Dominica")]
        AmericaSlashDominica,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Edmonton")]
        AmericaSlashEdmonton,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Eirunepe")]
        AmericaSlashEirunepe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/El_Salvador")]
        AmericaSlashEl_Salvador,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Ensenada")]
        AmericaSlashEnsenada,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Fort_Nelson")]
        AmericaSlashFort_Nelson,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Fort_Wayne")]
        AmericaSlashFort_Wayne,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Fortaleza")]
        AmericaSlashFortaleza,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Glace_Bay")]
        AmericaSlashGlace_Bay,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Godthab")]
        AmericaSlashGodthab,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Goose_Bay")]
        AmericaSlashGoose_Bay,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Grand_Turk")]
        AmericaSlashGrand_Turk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Grenada")]
        AmericaSlashGrenada,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Guadeloupe")]
        AmericaSlashGuadeloupe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Guatemala")]
        AmericaSlashGuatemala,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Guayaquil")]
        AmericaSlashGuayaquil,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Guyana")]
        AmericaSlashGuyana,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Halifax")]
        AmericaSlashHalifax,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Havana")]
        AmericaSlashHavana,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Hermosillo")]
        AmericaSlashHermosillo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Indiana/Indianapolis")]
        AmericaSlashIndianaSlashIndianapolis,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Indiana/Knox")]
        AmericaSlashIndianaSlashKnox,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Indiana/Marengo")]
        AmericaSlashIndianaSlashMarengo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Indiana/Petersburg")]
        AmericaSlashIndianaSlashPetersburg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Indiana/Tell_City")]
        AmericaSlashIndianaSlashTell_City,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Indiana/Vevay")]
        AmericaSlashIndianaSlashVevay,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Indiana/Vincennes")]
        AmericaSlashIndianaSlashVincennes,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Indiana/Winamac")]
        AmericaSlashIndianaSlashWinamac,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Indianapolis")]
        AmericaSlashIndianapolis,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Inuvik")]
        AmericaSlashInuvik,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Iqaluit")]
        AmericaSlashIqaluit,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Jamaica")]
        AmericaSlashJamaica,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Jujuy")]
        AmericaSlashJujuy,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Juneau")]
        AmericaSlashJuneau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Kentucky/Louisville")]
        AmericaSlashKentuckySlashLouisville,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Kentucky/Monticello")]
        AmericaSlashKentuckySlashMonticello,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Knox_IN")]
        AmericaSlashKnox_IN,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Kralendijk")]
        AmericaSlashKralendijk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/La_Paz")]
        AmericaSlashLa_Paz,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Lima")]
        AmericaSlashLima,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Los_Angeles")]
        AmericaSlashLos_Angeles,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Louisville")]
        AmericaSlashLouisville,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Lower_Princes")]
        AmericaSlashLower_Princes,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Maceio")]
        AmericaSlashMaceio,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Managua")]
        AmericaSlashManagua,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Manaus")]
        AmericaSlashManaus,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Marigot")]
        AmericaSlashMarigot,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Martinique")]
        AmericaSlashMartinique,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Matamoros")]
        AmericaSlashMatamoros,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Mazatlan")]
        AmericaSlashMazatlan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Mendoza")]
        AmericaSlashMendoza,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Menominee")]
        AmericaSlashMenominee,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Merida")]
        AmericaSlashMerida,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Metlakatla")]
        AmericaSlashMetlakatla,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Mexico_City")]
        AmericaSlashMexico_City,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Miquelon")]
        AmericaSlashMiquelon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Moncton")]
        AmericaSlashMoncton,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Monterrey")]
        AmericaSlashMonterrey,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Montevideo")]
        AmericaSlashMontevideo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Montreal")]
        AmericaSlashMontreal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Montserrat")]
        AmericaSlashMontserrat,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Nassau")]
        AmericaSlashNassau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/New_York")]
        AmericaSlashNew_York,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Nipigon")]
        AmericaSlashNipigon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Nome")]
        AmericaSlashNome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Noronha")]
        AmericaSlashNoronha,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/North_Dakota/Beulah")]
        AmericaSlashNorth_DakotaSlashBeulah,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/North_Dakota/Center")]
        AmericaSlashNorth_DakotaSlashCenter,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/North_Dakota/New_Salem")]
        AmericaSlashNorth_DakotaSlashNew_Salem,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Ojinaga")]
        AmericaSlashOjinaga,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Panama")]
        AmericaSlashPanama,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Pangnirtung")]
        AmericaSlashPangnirtung,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Paramaribo")]
        AmericaSlashParamaribo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Phoenix")]
        AmericaSlashPhoenix,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Port_of_Spain")]
        AmericaSlashPort_Of_Spain,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Port-au-Prince")]
        AmericaSlashPort_Au_Prince,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Porto_Acre")]
        AmericaSlashPorto_Acre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Porto_Velho")]
        AmericaSlashPorto_Velho,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Puerto_Rico")]
        AmericaSlashPuerto_Rico,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Rainy_River")]
        AmericaSlashRainy_River,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Rankin_Inlet")]
        AmericaSlashRankin_Inlet,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Recife")]
        AmericaSlashRecife,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Regina")]
        AmericaSlashRegina,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Resolute")]
        AmericaSlashResolute,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Rio_Branco")]
        AmericaSlashRio_Branco,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Rosario")]
        AmericaSlashRosario,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Santa_Isabel")]
        AmericaSlashSanta_Isabel,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Santarem")]
        AmericaSlashSantarem,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Santiago")]
        AmericaSlashSantiago,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Santo_Domingo")]
        AmericaSlashSanto_Domingo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Sao_Paulo")]
        AmericaSlashSao_Paulo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Scoresbysund")]
        AmericaSlashScoresbysund,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Shiprock")]
        AmericaSlashShiprock,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Sitka")]
        AmericaSlashSitka,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/St_Barthelemy")]
        AmericaSlashSt_Barthelemy,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/St_Johns")]
        AmericaSlashSt_Johns,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/St_Kitts")]
        AmericaSlashSt_Kitts,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/St_Lucia")]
        AmericaSlashSt_Lucia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/St_Thomas")]
        AmericaSlashSt_Thomas,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/St_Vincent")]
        AmericaSlashSt_Vincent,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Swift_Current")]
        AmericaSlashSwift_Current,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Tegucigalpa")]
        AmericaSlashTegucigalpa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Thule")]
        AmericaSlashThule,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Thunder_Bay")]
        AmericaSlashThunder_Bay,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Tijuana")]
        AmericaSlashTijuana,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Toronto")]
        AmericaSlashToronto,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Tortola")]
        AmericaSlashTortola,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Vancouver")]
        AmericaSlashVancouver,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Virgin")]
        AmericaSlashVirgin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Whitehorse")]
        AmericaSlashWhitehorse,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Winnipeg")]
        AmericaSlashWinnipeg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Yakutat")]
        AmericaSlashYakutat,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("America/Yellowknife")]
        AmericaSlashYellowknife,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/Casey")]
        AntarcticaSlashCasey,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/Davis")]
        AntarcticaSlashDavis,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/DumontDUrville")]
        AntarcticaSlashDumontDUrville,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/Macquarie")]
        AntarcticaSlashMacquarie,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/Mawson")]
        AntarcticaSlashMawson,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/McMurdo")]
        AntarcticaSlashMcMurdo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/Palmer")]
        AntarcticaSlashPalmer,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/Rothera")]
        AntarcticaSlashRothera,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/South_Pole")]
        AntarcticaSlashSouth_Pole,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/Syowa")]
        AntarcticaSlashSyowa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/Troll")]
        AntarcticaSlashTroll,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antarctica/Vostok")]
        AntarcticaSlashVostok,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Arctic/Longyearbyen")]
        ArcticSlashLongyearbyen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Aden")]
        AsiaSlashAden,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Almaty")]
        AsiaSlashAlmaty,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Amman")]
        AsiaSlashAmman,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Anadyr")]
        AsiaSlashAnadyr,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Aqtau")]
        AsiaSlashAqtau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Aqtobe")]
        AsiaSlashAqtobe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Ashgabat")]
        AsiaSlashAshgabat,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Ashkhabad")]
        AsiaSlashAshkhabad,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Baghdad")]
        AsiaSlashBaghdad,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Bahrain")]
        AsiaSlashBahrain,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Baku")]
        AsiaSlashBaku,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Bangkok")]
        AsiaSlashBangkok,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Barnaul")]
        AsiaSlashBarnaul,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Beirut")]
        AsiaSlashBeirut,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Bishkek")]
        AsiaSlashBishkek,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Brunei")]
        AsiaSlashBrunei,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Calcutta")]
        AsiaSlashCalcutta,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Chita")]
        AsiaSlashChita,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Choibalsan")]
        AsiaSlashChoibalsan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Chongqing")]
        AsiaSlashChongqing,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Chungking")]
        AsiaSlashChungking,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Colombo")]
        AsiaSlashColombo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Dacca")]
        AsiaSlashDacca,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Damascus")]
        AsiaSlashDamascus,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Dhaka")]
        AsiaSlashDhaka,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Dili")]
        AsiaSlashDili,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Dubai")]
        AsiaSlashDubai,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Dushanbe")]
        AsiaSlashDushanbe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Gaza")]
        AsiaSlashGaza,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Harbin")]
        AsiaSlashHarbin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Hebron")]
        AsiaSlashHebron,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Ho_Chi_Minh")]
        AsiaSlashHo_Chi_Minh,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Hong_Kong")]
        AsiaSlashHong_Kong,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Hovd")]
        AsiaSlashHovd,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Irkutsk")]
        AsiaSlashIrkutsk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Istanbul")]
        AsiaSlashIstanbul,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Jakarta")]
        AsiaSlashJakarta,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Jayapura")]
        AsiaSlashJayapura,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Jerusalem")]
        AsiaSlashJerusalem,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Kabul")]
        AsiaSlashKabul,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Kamchatka")]
        AsiaSlashKamchatka,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Karachi")]
        AsiaSlashKarachi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Kashgar")]
        AsiaSlashKashgar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Kathmandu")]
        AsiaSlashKathmandu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Katmandu")]
        AsiaSlashKatmandu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Khandyga")]
        AsiaSlashKhandyga,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Kolkata")]
        AsiaSlashKolkata,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Krasnoyarsk")]
        AsiaSlashKrasnoyarsk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Kuala_Lumpur")]
        AsiaSlashKuala_Lumpur,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Kuching")]
        AsiaSlashKuching,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Kuwait")]
        AsiaSlashKuwait,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Macao")]
        AsiaSlashMacao,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Macau")]
        AsiaSlashMacau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Magadan")]
        AsiaSlashMagadan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Makassar")]
        AsiaSlashMakassar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Manila")]
        AsiaSlashManila,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Muscat")]
        AsiaSlashMuscat,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Nicosia")]
        AsiaSlashNicosia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Novokuznetsk")]
        AsiaSlashNovokuznetsk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Novosibirsk")]
        AsiaSlashNovosibirsk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Omsk")]
        AsiaSlashOmsk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Oral")]
        AsiaSlashOral,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Phnom_Penh")]
        AsiaSlashPhnom_Penh,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Pontianak")]
        AsiaSlashPontianak,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Pyongyang")]
        AsiaSlashPyongyang,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Qatar")]
        AsiaSlashQatar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Qyzylorda")]
        AsiaSlashQyzylorda,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Rangoon")]
        AsiaSlashRangoon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Riyadh")]
        AsiaSlashRiyadh,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Saigon")]
        AsiaSlashSaigon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Sakhalin")]
        AsiaSlashSakhalin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Samarkand")]
        AsiaSlashSamarkand,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Seoul")]
        AsiaSlashSeoul,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Shanghai")]
        AsiaSlashShanghai,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Singapore")]
        AsiaSlashSingapore,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Srednekolymsk")]
        AsiaSlashSrednekolymsk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Taipei")]
        AsiaSlashTaipei,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Tashkent")]
        AsiaSlashTashkent,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Tbilisi")]
        AsiaSlashTbilisi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Tehran")]
        AsiaSlashTehran,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Tel_Aviv")]
        AsiaSlashTel_Aviv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Thimbu")]
        AsiaSlashThimbu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Thimphu")]
        AsiaSlashThimphu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Tokyo")]
        AsiaSlashTokyo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Ujung_Pandang")]
        AsiaSlashUjung_Pandang,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Ulaanbaatar")]
        AsiaSlashUlaanbaatar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Ulan_Bator")]
        AsiaSlashUlan_Bator,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Urumqi")]
        AsiaSlashUrumqi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Ust-Nera")]
        AsiaSlashUst_Nera,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Vientiane")]
        AsiaSlashVientiane,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Vladivostok")]
        AsiaSlashVladivostok,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Yakutsk")]
        AsiaSlashYakutsk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Yekaterinburg")]
        AsiaSlashYekaterinburg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Asia/Yerevan")]
        AsiaSlashYerevan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Azores")]
        AtlanticSlashAzores,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Bermuda")]
        AtlanticSlashBermuda,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Canary")]
        AtlanticSlashCanary,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Cape_Verde")]
        AtlanticSlashCape_Verde,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Faeroe")]
        AtlanticSlashFaeroe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Faroe")]
        AtlanticSlashFaroe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Jan_Mayen")]
        AtlanticSlashJan_Mayen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Madeira")]
        AtlanticSlashMadeira,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Reykjavik")]
        AtlanticSlashReykjavik,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/South_Georgia")]
        AtlanticSlashSouth_Georgia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/St_Helena")]
        AtlanticSlashSt_Helena,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atlantic/Stanley")]
        AtlanticSlashStanley,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/ACT")]
        AustraliaSlashACT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Adelaide")]
        AustraliaSlashAdelaide,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Brisbane")]
        AustraliaSlashBrisbane,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Broken_Hill")]
        AustraliaSlashBroken_Hill,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Canberra")]
        AustraliaSlashCanberra,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Currie")]
        AustraliaSlashCurrie,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Darwin")]
        AustraliaSlashDarwin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Eucla")]
        AustraliaSlashEucla,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Hobart")]
        AustraliaSlashHobart,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/LHI")]
        AustraliaSlashLHI,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Lindeman")]
        AustraliaSlashLindeman,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Lord_Howe")]
        AustraliaSlashLord_Howe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Melbourne")]
        AustraliaSlashMelbourne,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/North")]
        AustraliaSlashNorth,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/NSW")]
        AustraliaSlashNSW,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Perth")]
        AustraliaSlashPerth,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Queensland")]
        AustraliaSlashQueensland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/South")]
        AustraliaSlashSouth,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Sydney")]
        AustraliaSlashSydney,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Tasmania")]
        AustraliaSlashTasmania,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Victoria")]
        AustraliaSlashVictoria,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/West")]
        AustraliaSlashWest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Australia/Yancowinna")]
        AustraliaSlashYancowinna,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Brazil/Acre")]
        BrazilSlashAcre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Brazil/DeNoronha")]
        BrazilSlashDeNoronha,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Brazil/East")]
        BrazilSlashEast,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Brazil/West")]
        BrazilSlashWest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Canada/Atlantic")]
        CanadaSlashAtlantic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Canada/Central")]
        CanadaSlashCentral,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Canada/Eastern")]
        CanadaSlashEastern,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Canada/East-Saskatchewan")]
        CanadaSlashEast_Saskatchewan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Canada/Mountain")]
        CanadaSlashMountain,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Canada/Newfoundland")]
        CanadaSlashNewfoundland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Canada/Pacific")]
        CanadaSlashPacific,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Canada/Saskatchewan")]
        CanadaSlashSaskatchewan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Canada/Yukon")]
        CanadaSlashYukon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        CET,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Chile/Continental")]
        ChileSlashContinental,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Chile/EasterIsland")]
        ChileSlashEasterIsland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        CST6CDT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Cuba,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        EET,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Egypt,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Eire,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        EST,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        EST5EDT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT")]
        EtcSlashGMT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+0")]
        EtcSlashGMTPlus0,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+1")]
        EtcSlashGMTPlus1,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+10")]
        EtcSlashGMTPlus10,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+11")]
        EtcSlashGMTPlus11,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+12")]
        EtcSlashGMTPlus12,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+2")]
        EtcSlashGMTPlus2,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+3")]
        EtcSlashGMTPlus3,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+4")]
        EtcSlashGMTPlus4,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+5")]
        EtcSlashGMTPlus5,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+6")]
        EtcSlashGMTPlus6,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+7")]
        EtcSlashGMTPlus7,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+8")]
        EtcSlashGMTPlus8,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT+9")]
        EtcSlashGMTPlus9,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT0")]
        EtcSlashGMT0,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-0")]
        EtcSlashGMT_0,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-1")]
        EtcSlashGMT_1,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-10")]
        EtcSlashGMT_10,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-11")]
        EtcSlashGMT_11,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-12")]
        EtcSlashGMT_12,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-13")]
        EtcSlashGMT_13,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-14")]
        EtcSlashGMT_14,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-2")]
        EtcSlashGMT_2,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-3")]
        EtcSlashGMT_3,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-4")]
        EtcSlashGMT_4,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-5")]
        EtcSlashGMT_5,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-6")]
        EtcSlashGMT_6,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-7")]
        EtcSlashGMT_7,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-8")]
        EtcSlashGMT_8,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/GMT-9")]
        EtcSlashGMT_9,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/Greenwich")]
        EtcSlashGreenwich,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/UCT")]
        EtcSlashUCT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/Universal")]
        EtcSlashUniversal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/UTC")]
        EtcSlashUTC,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Etc/Zulu")]
        EtcSlashZulu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Amsterdam")]
        EuropeSlashAmsterdam,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Andorra")]
        EuropeSlashAndorra,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Astrakhan")]
        EuropeSlashAstrakhan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Athens")]
        EuropeSlashAthens,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Belfast")]
        EuropeSlashBelfast,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Belgrade")]
        EuropeSlashBelgrade,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Berlin")]
        EuropeSlashBerlin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Bratislava")]
        EuropeSlashBratislava,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Brussels")]
        EuropeSlashBrussels,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Bucharest")]
        EuropeSlashBucharest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Budapest")]
        EuropeSlashBudapest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Busingen")]
        EuropeSlashBusingen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Chisinau")]
        EuropeSlashChisinau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Copenhagen")]
        EuropeSlashCopenhagen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Dublin")]
        EuropeSlashDublin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Gibraltar")]
        EuropeSlashGibraltar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Guernsey")]
        EuropeSlashGuernsey,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Helsinki")]
        EuropeSlashHelsinki,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Isle_of_Man")]
        EuropeSlashIsle_Of_Man,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Istanbul")]
        EuropeSlashIstanbul,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Jersey")]
        EuropeSlashJersey,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Kaliningrad")]
        EuropeSlashKaliningrad,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Kiev")]
        EuropeSlashKiev,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Lisbon")]
        EuropeSlashLisbon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Ljubljana")]
        EuropeSlashLjubljana,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/London")]
        EuropeSlashLondon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Luxembourg")]
        EuropeSlashLuxembourg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Madrid")]
        EuropeSlashMadrid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Malta")]
        EuropeSlashMalta,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Mariehamn")]
        EuropeSlashMariehamn,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Minsk")]
        EuropeSlashMinsk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Monaco")]
        EuropeSlashMonaco,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Moscow")]
        EuropeSlashMoscow,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Nicosia")]
        EuropeSlashNicosia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Oslo")]
        EuropeSlashOslo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Paris")]
        EuropeSlashParis,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Podgorica")]
        EuropeSlashPodgorica,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Prague")]
        EuropeSlashPrague,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Riga")]
        EuropeSlashRiga,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Rome")]
        EuropeSlashRome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Samara")]
        EuropeSlashSamara,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/San_Marino")]
        EuropeSlashSan_Marino,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Sarajevo")]
        EuropeSlashSarajevo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Simferopol")]
        EuropeSlashSimferopol,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Skopje")]
        EuropeSlashSkopje,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Sofia")]
        EuropeSlashSofia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Stockholm")]
        EuropeSlashStockholm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Tallinn")]
        EuropeSlashTallinn,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Tirane")]
        EuropeSlashTirane,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Tiraspol")]
        EuropeSlashTiraspol,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Ulyanovsk")]
        EuropeSlashUlyanovsk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Uzhgorod")]
        EuropeSlashUzhgorod,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Vaduz")]
        EuropeSlashVaduz,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Vatican")]
        EuropeSlashVatican,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Vienna")]
        EuropeSlashVienna,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Vilnius")]
        EuropeSlashVilnius,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Volgograd")]
        EuropeSlashVolgograd,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Warsaw")]
        EuropeSlashWarsaw,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Zagreb")]
        EuropeSlashZagreb,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Zaporozhye")]
        EuropeSlashZaporozhye,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Europe/Zurich")]
        EuropeSlashZurich,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        GB,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("GB-Eire")]
        GB_Eire,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        GMT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("GMT+0")]
        GMTPlus0,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        GMT0,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("GMT-0")]
        GMT_0,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Greenwich,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Hongkong,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        HST,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Iceland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Antananarivo")]
        IndianSlashAntananarivo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Chagos")]
        IndianSlashChagos,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Christmas")]
        IndianSlashChristmas,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Cocos")]
        IndianSlashCocos,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Comoro")]
        IndianSlashComoro,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Kerguelen")]
        IndianSlashKerguelen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Mahe")]
        IndianSlashMahe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Maldives")]
        IndianSlashMaldives,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Mauritius")]
        IndianSlashMauritius,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Mayotte")]
        IndianSlashMayotte,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Indian/Reunion")]
        IndianSlashReunion,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Iran,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Israel,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Jamaica,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Japan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Kwajalein,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Libya,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        MET,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Mexico/BajaNorte")]
        MexicoSlashBajaNorte,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Mexico/BajaSur")]
        MexicoSlashBajaSur,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Mexico/General")]
        MexicoSlashGeneral,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        MST,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        MST7MDT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Navajo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        NZ,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("NZ-CHAT")]
        NZ_CHAT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Apia")]
        PacificSlashApia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Auckland")]
        PacificSlashAuckland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Bougainville")]
        PacificSlashBougainville,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Chatham")]
        PacificSlashChatham,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Chuuk")]
        PacificSlashChuuk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Easter")]
        PacificSlashEaster,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Efate")]
        PacificSlashEfate,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Enderbury")]
        PacificSlashEnderbury,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Fakaofo")]
        PacificSlashFakaofo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Fiji")]
        PacificSlashFiji,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Funafuti")]
        PacificSlashFunafuti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Galapagos")]
        PacificSlashGalapagos,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Gambier")]
        PacificSlashGambier,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Guadalcanal")]
        PacificSlashGuadalcanal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Guam")]
        PacificSlashGuam,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Honolulu")]
        PacificSlashHonolulu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Johnston")]
        PacificSlashJohnston,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Kiritimati")]
        PacificSlashKiritimati,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Kosrae")]
        PacificSlashKosrae,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Kwajalein")]
        PacificSlashKwajalein,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Majuro")]
        PacificSlashMajuro,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Marquesas")]
        PacificSlashMarquesas,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Midway")]
        PacificSlashMidway,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Nauru")]
        PacificSlashNauru,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Niue")]
        PacificSlashNiue,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Norfolk")]
        PacificSlashNorfolk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Noumea")]
        PacificSlashNoumea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Pago_Pago")]
        PacificSlashPago_Pago,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Palau")]
        PacificSlashPalau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Pitcairn")]
        PacificSlashPitcairn,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Pohnpei")]
        PacificSlashPohnpei,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Ponape")]
        PacificSlashPonape,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Port_Moresby")]
        PacificSlashPort_Moresby,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Rarotonga")]
        PacificSlashRarotonga,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Saipan")]
        PacificSlashSaipan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Samoa")]
        PacificSlashSamoa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Tahiti")]
        PacificSlashTahiti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Tarawa")]
        PacificSlashTarawa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Tongatapu")]
        PacificSlashTongatapu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Truk")]
        PacificSlashTruk,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Wake")]
        PacificSlashWake,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Wallis")]
        PacificSlashWallis,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pacific/Yap")]
        PacificSlashYap,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Poland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Portugal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        PRC,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        PST8PDT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        ROC,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        ROK,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Singapore,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Turkey,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        UCT,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Universal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Alaska")]
        USSlashAlaska,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Aleutian")]
        USSlashAleutian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Arizona")]
        USSlashArizona,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Central")]
        USSlashCentral,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Eastern")]
        USSlashEastern,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/East-Indiana")]
        USSlashEast_Indiana,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Hawaii")]
        USSlashHawaii,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Indiana-Starke")]
        USSlashIndiana_Starke,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Michigan")]
        USSlashMichigan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Mountain")]
        USSlashMountain,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Pacific")]
        USSlashPacific,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Pacific-New")]
        USSlashPacific_New,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("US/Samoa")]
        USSlashSamoa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        UTC,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        WET,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("W-SU")]
        W_SU,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Zulu,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RangeEnd", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RangeEnd
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							This element captures a local time with date and olson timezone
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("DateTime", Namespace="")]
        public DateAndTime DateTime { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimePeriods", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimePeriods
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The time periods is a wrapper around all
        ///					    sorts of time periods that provide a
        ///					    reference for the temporal context of the
        ///					    the object.
        ///					  </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("TimePeriod", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("GeologicalTimePeriod", Namespace="")]
        public System.Collections.Generic.List<GeologicalTimePeriod> TimePeriod { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TimePeriods" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimePeriods" /> class.</para>
        /// </summary>
        public TimePeriods()
        {
            this.TimePeriod = new System.Collections.Generic.List<GeologicalTimePeriod>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalTimePeriod", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeologicalTimePeriod
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological eon contextualizing the object. For example: Phanerozoic,
        ///							Precambrian.
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("geologicalEon", Namespace="")]
        public GeologicalEon GeologicalEon { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological era contextualizing the object. For example: Cenozoic,
        ///							Mesozoic, Paleozoic.
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("geologicalEra", Namespace="")]
        public GeologicalEra GeologicalEra { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological period contextualizing the object. For example:
        ///							Quaternary, Neogene, Paleogene.
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("geologicalPeriod", Namespace="")]
        public GeologicalPeriod GeologicalPeriod { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological epoch contextualizing the object. For example: Holocene,
        ///							Pleistocene, Pilocene.
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("geologicalEpoch", Namespace="")]
        public GeologicalEpoch GeologicalEpoch { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The geological age contextualizing the object. For example: Calabrian,
        ///							Gelasian, Piacenzian.
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("geologicalAge", Namespace="")]
        public GeologicalAge GeologicalAge { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalEon", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeologicalEon
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A geological eon from the international chronostratigraphic chart.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalEonVocabulary", Namespace="")]
    public enum GeologicalEonVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Phanerozoic is the current geologic eon in the geologic time
        ///	    scale, and the one during which abundant animal and plant life has
        ///	    existed. It covers 541 million years to the present, and goes back
        ///	    to the period when diverse hard-shelled animals first appeared (WP,
        ///	    https://goo.gl/jyAqVf)
        ///	  </para>
        /// </summary>
        Phanerozoic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Precambrian or Pre-Cambrian is the largest span of time in
        ///	    Earth's history before the current Phanerozoic Eon, and is a
        ///	    Supereon divided into several eons of the geologic time scale. It
        ///	    spans from the formation of Earth about 4.6 billion years ago (Ga)
        ///	    to the beginning of the Cambrian Period, about 541 million years
        ///	    ago (Ma), when hard-shelled creatures first appeared in abundance.
        ///	    The Precambrian is so named because it preceded the Cambrian, the
        ///	    first period of the Phanerozoic Eon, which is named after Cambria,
        ///	    the classical name for Wales, where rocks from this age were first
        ///	    studied. The Precambrian accounts for 88% of geologic time (WP,
        ///	    https://goo.gl/YuXJS8)
        ///	  </para>
        /// </summary>
        Precambrian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Proterozoic is a geological eon representing the time just
        ///	    before the proliferation of complex life on Earth. The name
        ///	    Proterozoic comes from Greek and means "earlier life",the Greek
        ///	    root protero-,means "former, earlier" and zoic-,means "animal,
        ///	    living being". The Proterozoic Eon extended from 2500 Ma to
        ///	    542.0±1.0 Ma (million years ago), and is the most recent part of
        ///	    the Precambrian. It is subdivided into three geologic eras (from
        ///	    oldest to youngest): the Paleoproterozoic, Mesoproterozoic, and
        ///	    Neoproterozoic (WP, https://goo.gl/sUu8Tg)
        ///	  </para>
        /// </summary>
        Proterozoic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Archean Eon is a geologic eon, 4,000 to 2,500 million years ago
        ///	    (that is, 4 to 2.5 billion years ago), following the Hadean Eon and
        ///	    preceding the Proterozoic Eon. During the Archean, the earth's
        ///	    crust and layers had just formed, making the Earth much cooler than
        ///	    it was during the Hadean and allowing the formation of continents
        ///	    (WP, https://goo.gl/zPqxU)
        ///	  </para>
        /// </summary>
        Archean,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Hadean is a geologic eon of the Earth, and lies before the
        ///	    Archean. It began with the formation of the Earth about 4.6 billion
        ///	    years ago and ended, as defined by the ICS, 4 billion years ago
        ///	    (WP, https://goo.gl/0tvynG)
        ///	  </para>
        /// </summary>
        Hadean,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalEra", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeologicalEra
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A geological era from the international chronostratigraphic chart.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalEraVocabulary", Namespace="")]
    public enum GeologicalEraVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Cenozoic Era is the current and most recent of the three
        ///	    Phanerozoic geological eras, following the Mesozoic Era and
        ///	    covering the period from 66 million years ago to present day. The
        ///	    Cenozoic is also known as the Age of Mammals, because of large
        ///	    Mammals that dominated, such as Entelodont, Paraceratherium
        ///	    Diprotodon and Basilosaurus. The extinction of many large Reptile
        ///	    groups such as non Avian Dinosaurs, Plesiosauria and Pterosauria
        ///	    allowed Mammals to greatly diversify and dominate the planet, even
        ///	    to the present day (WP, https://goo.gl/2Izzpv)
        ///	  </para>
        /// </summary>
        Cenozoic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Mesozoic Era is an interval of geological time from about 252
        ///	    to 66 million years ago. It is also called the Age of Reptiles, a
        ///	    phrase introduced by the 19th century paleontologist Gideon Mantell
        ///	    who viewed it as dominated by Reptiles such as Iguanodon,
        ///	    Megalosaurus, Plesiosaurus and Quetzalcoatlus. This Era is also
        ///	    called from a paleobotanist view the Age of Conifers (WP,
        ///	    https://goo.gl/lWAoeN)
        ///	  </para>
        /// </summary>
        Mesozoic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Paleozoic Era  is the earliest of three geologic eras of the
        ///	    Phanerozoic Eon, spanning from 541 to 252.17 million years ago. It
        ///	    is the longest of the Phanerozoic eras, and is subdivided into six
        ///	    geologic periods (from oldest to youngest): the Cambrian,
        ///	    Ordovician, Silurian, Devonian, Carboniferous, and Permian. The
        ///	    Paleozoic comes after the Neoproterozoic Era of the Proterozoic
        ///	    Eon, and is followed by the Mesozoic Era (WP, https://goo.gl/crCI28)
        ///	  </para>
        /// </summary>
        Paleozoic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Neoproterozoic Era is the unit of geologic time from 1,000 to
        ///	    541 million years ago. It is the last era of the Proterozoic Eon
        ///	    and Precambrian Supereon; it is subdivided into the Tonian,
        ///	    Cryogenian, and Ediacaran Periods. It is preceded by the
        ///	    Mesoproterozoic era and succeeded by the Paleozoic era (WP,
        ///	    https://goo.gl/5mGcbY)
        ///	  </para>
        /// </summary>
        Neoproterozoic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Mesoproterozoic Era is a geologic era that occurred from 1,600
        ///	    to 1,000 million years ago. The Mesoproterozoic was the first
        ///	    period of Earth's history of which a respectable geological record
        ///	    survives. Continents existed in the Paleoproterozoic, but we know
        ///	    little about them. It is noteworthy that the continental masses of
        ///	    the Mesoproterozoic are more or less the same ones that are with us
        ///	    today (WP, https://goo.gl/ui0yau ).
        ///	  </para>
        /// </summary>
        Mesoproterozoic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Paleoproterozoic is the first of the three sub-divisions (eras)
        ///	    of the Proterozoic occurring 2,500 to 1,600 million years ago
        ///	    (2.5–1.6 Ga). This is when the continents first stabilized (WP,
        ///	    https://goo.gl/6pC2zs )
        ///	  </para>
        /// </summary>
        Paleoproterozoic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Neoarchean is a geologic era within the Archaean. The
        ///	    Neoarchean spans the period of time from 2,800 to 2,500 million
        ///	    years ago the period being defined chronometrically and not
        ///	    referenced to a specific level in a rock section on Earth (WP,
        ///	    https://goo.gl/qX7fWi)
        ///	  </para>
        /// </summary>
        Neoarchean,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Mesoarchean is a geologic era within the Archean, spanning
        ///	    3,200 to 2,800 million years ago. The period is defined
        ///	    chronometrically and is not referenced to a specific level in a
        ///	    rock section on Earth. Fossils from Australia show that
        ///	    stromatolites have lived on Earth since the Mesoarchean. The
        ///	    Pongola glaciation occurred at 2,900 million years ago. The first
        ///	    supercontinent Vaalbara broke up during this time around 2,800
        ///	    million years ago (WP, https://goo.gl/ZL4B1q).
        ///	  </para>
        /// </summary>
        Mesoarchean,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Paleoarchean is a geologic era within the Archaean. It spans
        ///	    the period of time 3,600 to 3,200 million years ago—the era being
        ///	    defined chronometrically and not referenced to a specific level in
        ///	    a rock section on Earth. The name derives from Greek "Palaios"
        ///	    ancient. The oldest ascertained life form (well-preserved bacteria
        ///	    older than 3,460 million years found in Western Australia) is from
        ///	    this era. 3,480 Ma: Fossils of microbial mat found in 3.48
        ///	    billion-year-old sandstone discovered in Western Australia. The
        ///	    first supercontinent Vaalbara formed during this period (WP,
        ///	    https://goo.gl/VuiWQ9)
        ///	  </para>
        /// </summary>
        Paleoarchean,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic record the Eoarchean Era or erathem is the earliest
        ///	    time following the solidification of Earth's crust. It follows the
        ///	    Hadean Eon and precedes the Paleoarchean Era of the geologic
        ///	    timescale. The approximate abiotic origins of life have been dated
        ///	    to a time window from 4,000 to 3,600 million years ago when
        ///	    atmospheric pressure values ranged from 10 to 100 bar (10 to 100
        ///	    atmospheres) (WP, https://goo.gl/vy3RyF).
        ///	  </para>
        /// </summary>
        Eoarchean,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalPeriod", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeologicalPeriod
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A geological period from the international chronostratigraphic chart.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalPeriodVocabulary", Namespace="")]
    public enum GeologicalPeriodVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Quaternary Period is the current and most recent of the three
        ///	    periods of the Cenozoic Era in the geologic time scale of the
        ///	    International Commission on Stratigraphy (ICS). It follows the
        ///	    Neogene Period and spans from 2.588 ± 0.005 million years ago to
        ///	    the present. The Quaternary Period is divided into two epochs: the
        ///	    Pleistocene (2.588 million years ago to 11.7 thousand years ago)
        ///	    and the Holocene (11.7 thousand years ago to today). The informal
        ///	    term "Late Quaternary" refers to the past 0.5–1.0 million years.
        ///	    The Quaternary period is typically defined by the cyclic growth and
        ///	    decay of continental ice sheets driven by Milankovitch cycles and
        ///	    the associated climate and environmental changes that occurred (WP,
        ///	    https://goo.gl/zdzlm2 )
        ///	  </para>
        /// </summary>
        Quaternary,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Neogene is a geologic period and system in the International
        ///	    Commission on Stratigraphy (ICS) Geologic Timescale starting 23.03
        ///	    million years ago and ending 2.58 million years ago. The second
        ///	    period in the Cenozoic Era, it follows the Paleogene Period and is
        ///	    succeeded by the Quaternary Period. The Neogene is sub-divided into
        ///	    two epochs, the earlier Miocene and the later Pliocene (WP,
        ///	    https://goo.gl/9YZTF3)
        ///	  </para>
        /// </summary>
        Neogene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Paleogene is a geologic period and system that began 66 and ended 23.03
        ///	    million years ago and comprises the first part of the Cenozoic Era. Lasting 43
        ///	    million years, the Paleogene is most notable as being the time in which mammals
        ///	    evolved from relatively small, simple forms into a large group of diverse
        ///	    animals in the wake of the Cretaceous–Paleogene extinction event that ended the
        ///	    preceding Cretaceous Period (WP, https://goo.gl/2NlFFn).
        ///	  </para>
        /// </summary>
        Paleogene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Cretaceous, derived from the Latin "creta" (chalk), usually abbreviated K
        ///	    for its German translation Kreide (chalk), is a geologic period and system from
        ///	    145 ± 4 to 66 million years (Ma) ago. In the geologic timescale, the Cretaceous
        ///	    follows the Jurassic Period and is followed by the Paleogene Period of the
        ///	    Cenozoic Era. It is the last period of the Mesozoic Era, and, spanning 79
        ///	    million years, the longest period of the Phanerozoic Eon.
        ///	    (WP, https://goo.gl/f3z6Hn)
        ///	  </para>
        /// </summary>
        Cretaceous,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Jurassic is a geologic period and system that extends from 201.3 Mya
        ///	    (million years ago) to 145.5 Mya from the end of the Triassic to the beginning
        ///	    of the Cretaceous. The Jurassic constitutes the middle period of the Mesozoic
        ///	    Era, also known as the Age of Reptiles. The start of the period is marked by
        ///	    the major Triassic–Jurassic extinction event. Two other extinction events
        ///	    occurred during the period: the Pliensbachian/Toarcian event in the Early
        ///	    Jurassic, and the Tithonian event at the end; however, neither event ranks
        ///	    among the "Big Five" mass extinctions (WP, https://goo.gl/oISdB7)
        ///	  </para>
        /// </summary>
        Jurassic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Triassic is a geologic period and system that extends from roughly 252.17
        ///	    to 201.3 million years ago, an interval of 51.04 million years. It is the first
        ///	    period of the Mesozoic Era, and lies between the Permian and Jurassic periods.
        ///	    Both the start and end of the period are marked by major extinction events. The
        ///	    Triassic was named in 1834 by Friedrich von Alberti, after the three distinct
        ///	    rock layers (tri meaning "three") that are found throughout Germany and
        ///	    northwestern Europe—red beds, capped by marine limestone, followed by a series
        ///	    of terrestrial mud- and sandstones—called the "Trias". (WP, https://goo.gl/bw9CYZ)
        ///	  </para>
        /// </summary>
        Triassic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Permian is a geologic period and system which extends from 298.9 to 252.17
        ///	    million years ago. It is the last period of the Paleozoic, following the
        ///	    Carboniferous and preceding the Triassic of the Mesozoic. The concept of the
        ///	    Permian was introduced in 1841 by geologist Sir Roderick Murchison, who named
        ///	    it after the ancient kingdom of Permia (WP, https://goo.gl/1HZquE)
        ///	  </para>
        /// </summary>
        Permian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Carboniferous is a geologic period and system that extends from the end of
        ///	    the Devonian Period, at 358.9 ± 0.4 million years ago, to the beginning of the
        ///	    Permian Period, at 298.9 ± 0.15 Ma. The name Carboniferous means "coal-bearing"
        ///	    and derives from the Latin words carbō ("coal") and ferō ("I bear, I carry"),
        ///	    and was coined by geologists William Conybeare and William Phillips in 1822.
        ///	    Based on a study of the British rock succession, it was the first of the modern
        ///	    'system' names to be employed, and reflects the fact that many coal beds were
        ///	    formed globally during this time. The Carboniferous is often treated in North
        ///	    America as two geological periods, the earlier Mississippian and the later
        ///	    Pennsylvanian (WP, https://goo.gl/VuxQMZ).
        ///	  </para>
        /// </summary>
        Carboniferous,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Devonian is a geologic period and system of the Paleozoic Era
        ///	    spanning from the end of the Silurian Period, about 419.2 Mya
        ///	    (million years ago), to the beginning of the Carboniferous Period,
        ///	    about 358.9. It is named after Devon, England, where rocks from
        ///	    this period were first studied. The Devonian period experienced the
        ///	    first significant adaptive radiation of terrestrial life.
        ///	    Free-sporing vascular plants began to spread across dry land,
        ///	    forming extensive forests which covered the continents. By the
        ///	    middle of the Devonian, several groups of plants had evolved leaves
        ///	    and true roots, and by the end of the period the first seed-bearing
        ///	    plants appeared. Various terrestrial arthropods also became
        ///	    well-established. Fish reached substantial diversity during this
        ///	    time, leading the Devonian to often be dubbed the "Age of Fish".
        ///	    The first ray-finned and lobe-finned bony fish appeared, while the
        ///	    placoderms began dominating almost every known aquatic environment.
        ///	    (WP, https://goo.gl/nbtNUu)
        ///	  </para>
        /// </summary>
        Devonian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Silurian is a geologic period and system that extends from the
        ///	    end of the Ordovician Period, at 443.8 million years ago (Mya), to
        ///	    the beginning of the Devonian Period, 419.2 Mya. As with other
        ///	    geologic periods, the rock beds that define the period's start and
        ///	    end are well identified, but the exact dates are uncertain by
        ///	    several million years. The base of the Silurian is set at a major
        ///	    extinction event when 60% of marine species were wiped out. See
        ///	    Ordovician-Silurian extinction events (WP, https://goo.gl/mStlAZ).
        ///	  </para>
        /// </summary>
        Silurian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Ordovician is a geologic period and system, the second of six of the
        ///	    Paleozoic Era, and covers the time between 485.4 and 443.8 million years
        ///	    ago. It follows the Cambrian Period and is followed by the Silurian Period.
        ///	    The Ordovician, named after the Celtic tribe of the Ordovices, was defined by
        ///	    Charles Lapworth in 1879 to resolve a dispute between followers of Adam
        ///	    Sedgwick and Roderick Murchison, who were placing the same rock beds in
        ///	    northern Wales into the Cambrian and Silurian periods, respectively.
        ///	    Lapworth, recognizing that the fossil fauna in the disputed strata were
        ///	    different from those of either the Cambrian or the Silurian periods, realized
        ///	    that they should be placed in a period of their own. While recognition of the
        ///	    distinct Ordovician period was slow in the United Kingdom, other areas of the
        ///	    world accepted it quickly. It received international sanction in 1960, when it
        ///	    was adopted as an official period of the Paleozoic Era by the International
        ///	    Geological Congress (WP, https://goo.gl/hcmkyj).
        ///	  </para>
        /// </summary>
        Ordovician,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Cambrian was the first geological period of the Paleozoic Era,
        ///	    lasting from 541 to 485.4 million years ago (mya) and was succeeded
        ///	    by the Ordovician. Its subdivisions, and indeed its base, are
        ///	    somewhat in flux. The period was established (as “Cambrian series”)
        ///	    by Adam Sedgwick, who named it after Cambria, the Latinised form of
        ///	    Cymru, the Welsh name for Wales, where Britain's Cambrian rocks are
        ///	    best exposed. The Cambrian is unique in its unusually high
        ///	    proportion of lagerstätte sedimentary deposits. These are sites of
        ///	    exceptional preservation, where "soft" parts of organisms are
        ///	    preserved as well as their more resistant shells. This means that
        ///	    our understanding of the Cambrian biology surpasses that of some
        ///	    later periods (WP, https://goo.gl/4evSXv).
        ///	  </para>
        /// </summary>
        Cambrian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Ediacaran Period, named after the Ediacara Hills of South
        ///	    Australia, is the last geological period of the Neoproterozoic Era
        ///	    and of the Proterozoic Eon, immediately preceding the Cambrian
        ///	    Period, the first period of the Paleozoic Era and of the
        ///	    Phanerozoic Eon (WP, https://goo.gl/GbJOZG).
        ///	  </para>
        /// </summary>
        Ediacaran,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Cryogenian is a geologic period that lasted from 720 to 635
        ///	    million years ago. It forms the second geologic period of the
        ///	    Neoproterozoic Era, preceded by the Tonian Period and followed by
        ///	    the Ediacaran (WP, https://en.wikipedia.org/wiki/Cryogenian)
        ///	  </para>
        /// </summary>
        Cryogenian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Tonian (from Greek tonas, "stretch") is the first geologic period in the
        ///	    Neoproterozoic Era and lasted from 1000 Mya to ~720 Mya (million years ago).
        ///	    Instead of being based on stratigraphy, these dates are defined by the ICS
        ///	    based on radiometric chronometry (WP, https://goo.gl/5lXA0K).
        ///	  </para>
        /// </summary>
        Tonian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Stenian is the final geologic period in the Mesoproterozoic Era
        ///	    and lasted from 1200 Mya to 1000 Mya (million years ago). Instead
        ///	    of being based on stratigraphy, these dates are defined
        ///	    chronometrically. The name derives from narrow polymetamorphic
        ///	    belts formed over this period (WP, https://goo.gl/XJAlhU).
        ///	  </para>
        /// </summary>
        Stenian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Ectasian is the second geologic period in the Mesoproterozoic
        ///	    Era and lasted from 1400 Mya ago to 1200 Mya (million years ago).
        ///	    Instead of being based on stratigraphy, these dates are defined
        ///	    chronometrically (WP, https://goo.gl/xZBsSI).
        ///	  </para>
        /// </summary>
        Ectasian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Calymmian (from Greek calymma, "cover") is the first geologic
        ///	    period in the Mesoproterozoic Era and lasted from 1600 Mya to 1400
        ///	    Mya (million years ago). Instead of being based on stratigraphy,
        ///	    these dates are defined chronometrically (WP,
        ///	    https://goo.gl/0y2zee).
        ///	  </para>
        /// </summary>
        Calymmian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Statherian is the final geologic period in the Paleoproterozoic
        ///	    Era and lasted from 1800 Mya to 1600 Mya (million years ago).
        ///	    Instead of being based on stratigraphy, these dates are defined
        ///	    chronometrically. The period is characterized on most continents by
        ///	    either new platforms or final cratonization of fold belts (WP,
        ///	    https://goo.gl/C1sO7w)
        ///	  </para>
        /// </summary>
        Statherian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Orosirian is the third geologic period in the Paleoproterozoic
        ///	    Era and lasted from 2050 Mya to 1800 Mya (million years ago).
        ///	    Instead of being based on stratigraphy, these dates are defined
        ///	    chronometrically. The later half of the period was an episode of
        ///	    intensive orogeny on virtually all continents.
        ///	  </para>
        /// </summary>
        Orosirian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Rhyacian is the second geologic period in the Paleoproterozoic
        ///	    Era and lasted from 2300 Mya to 2050 Mya (million years ago).
        ///	    Instead of being based on stratigraphy, these dates are defined
        ///	    chronometrically. (WP, https://goo.gl/lI4T6C)
        ///	  </para>
        /// </summary>
        Rhyacian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Siderian is the first geologic period in the Paleoproterozoic
        ///	    Era and lasted from 2500 Ma to 2300 Ma (million years ago, from
        ///	    Greek: Mega and Latin: Annum ). Instead of being based on
        ///	    stratigraphy, these dates are defined chronometrically (WP,
        ///	    https://goo.gl/OOb8Rq).
        ///	  </para>
        /// </summary>
        Siderian,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalEpoch", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeologicalEpoch
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A geological epoch from the international chronostratigraphic chart.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalEpochVocabulary", Namespace="")]
    public enum GeologicalEpochVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Holocene  is the geological epoch that began after the
        ///	    Pleistocene at approximately 11,700 years before AD 2000 and
        ///	    continues to the present. The term "Recent" (usually capitalised)
        ///	    has often been used as an exact synonym of "Holocene", although
        ///	    this usage is discouraged in 21st-century work. The Holocene is
        ///	    part of the Quaternary period. It has been identified with the
        ///	    current warm period, known as MIS 1, and can be considered an
        ///	    interglacial in the current ice age based on that evidence (WP,
        ///	    https://goo.gl/vj6I2).
        ///	  </para>
        /// </summary>
        Holocene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Pleistocene is the geological epoch which lasted from about
        ///	    2,588,000 to 11,700 years ago, spanning the world's most recent
        ///	    period of repeated glaciations. The end of the Pleistocene
        ///	    corresponds with the end of the last glacial period and also with
        ///	    the end of the Paleolithic age used in archaeology (WP,
        ///	    https://goo.gl/8rh6qj)
        ///	  </para>
        /// </summary>
        Pleistocene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Pilocene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Miocene is the first geological epoch of the Neogene Period and
        ///	    extends from about 23.03 to 5.332 million years ago (Ma). The
        ///	    Miocene was named by Sir Charles Lyell. Its name comes from the
        ///	    Greek words μείων (meiōn, “less”) and καινός (kainos, “new”) and
        ///	    means "less recent" because it has 18% fewer modern sea
        ///	    invertebrates than the Pliocene. The Miocene follows the Oligocene
        ///	    Epoch and is followed by the Pliocene Epoch (WP,
        ///	    https://goo.gl/AVnjBY).
        ///	  </para>
        /// </summary>
        Miocene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Oligocene is a geologic epoch of the Paleogene Period and
        ///	    extends from about 33.9 million to 23 million years before the
        ///	    present (33.9±0.1 to 23.03±0.05 Ma). As with other older geologic
        ///	    periods, the rock beds that define the epoch are well identified
        ///	    but the exact dates of the start and end of the epoch are slightly
        ///	    uncertain. The name Oligocene comes from the Greek ὀλίγος (oligos,
        ///	    few) and καινός (kainos, new), and refers to the sparsity of extant
        ///	    forms of molluscs. The Oligocene is preceded by the Eocene Epoch
        ///	    and is followed by the Miocene Epoch. The Oligocene is the third
        ///	    and final epoch of the Paleogene Period (WP,
        ///	    https://goo.gl/Q5vpkN).
        ///	  </para>
        /// </summary>
        Oligocene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Eocene Epoch, lasting from 56 to 33.9 million years ago, is a
        ///	    major division of the geologic timescale and the second epoch of
        ///	    the Paleogene Period in the Cenozoic Era. The Eocene spans the time
        ///	    from the end of the Palaeocene Epoch to the beginning of the
        ///	    Oligocene Epoch. The start of the Eocene is marked by a brief
        ///	    period in which the concentration of the carbon isotope 13C in the
        ///	    atmosphere was exceptionally low in comparison with the more common
        ///	    isotope 12C. The end is set at a major extinction event called the
        ///	    Grande Coupure (the "Great Break" in continuity) or the
        ///	    Eocene–Oligocene extinction event, which may be related to the
        ///	    impact of one or more large bolides in Siberia and in what is now
        ///	    Chesapeake Bay. As with other geologic periods, the strata that
        ///	    define the start and end of the epoch are well identified, though
        ///	    their exact dates are slightly uncertain (WP,
        ///	    https://goo.gl/1p60TM).
        ///	  </para>
        /// </summary>
        Eocene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Paleocene or Palaeocene, the "old recent", is a geologic epoch
        ///	    that lasted from about 66 to 56 million years ago. It is the first
        ///	    epoch of the Paleogene Period in the modern Cenozoic Era. As with
        ///	    many geologic periods, the strata that define the epoch's beginning
        ///	    and end are well identified, but the exact ages remain uncertain.
        ///	    The Paleocene Epoch brackets two major events in Earth's history.
        ///	    It started with the mass extinction event at the end of the
        ///	    Cretaceous, known as the Cretaceous–Paleogene (K–Pg) boundary. This
        ///	    was a time marked by the demise of non-avian dinosaurs, giant
        ///	    marine reptiles and much other fauna and flora. The die-off of the
        ///	    dinosaurs left unfilled ecological niches worldwide. It ended with
        ///	    the Paleocene–Eocene Thermal Maximum. This was a geologically brief
        ///	    (~0.2 million year) interval characterized by extreme changes in
        ///	    climate and carbon cycling (WP, https://goo.gl/TCq88n).
        ///	  </para>
        /// </summary>
        Paleocene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Lopingian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Guadalupian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Cisuralian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Pennsylvanian (also known as Upper Carboniferous or Late
        ///	    Carboniferous) is, in the ICS geologic timescale, the younger of
        ///	    two subperiods (or upper of two subsystems) of the Carboniferous
        ///	    Period. It lasted from roughly 323.2 million years ago to 298.9
        ///	    million years ago Ma (million years ago). As with most other
        ///	    geochronologic units, the rock beds that define the Pennsylvanian
        ///	    are well identified, but the exact date of the start and end are
        ///	    uncertain by a few million years (WP, https://goo.gl/pSaSbq).
        ///	  </para>
        /// </summary>
        Pennsylvanian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Mississippian (also known as Lower Carboniferous or Early
        ///	    Carboniferous) is a subperiod in the geologic timescale or a
        ///	    subsystem of the geologic record. It is the earliest/lowermost of
        ///	    two subperiods of the Carboniferous period lasting from roughly
        ///	    358.9 to 323.2 million years ago. As with most other geochronologic
        ///	    units, the rock beds that define the Mississippian are well
        ///	    identified, but the exact start and end dates are uncertain by a
        ///	    few million years. The Mississippian is so named because rocks with
        ///	    this age are exposed in the Mississippi River valley (WP,
        ///	    https://goo.gl/8xPJHe).
        ///	  </para>
        /// </summary>
        Mississippian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Pridoli, lasting from 423 ± 1.5 to 419.2 ± 2.8 mya, is the
        ///	    final and shortest epoch of the Silurian. It is named after one
        ///	    locality at the Homolka a Přídolí nature reserve near the Prague
        ///	    suburb Slivenec in the Czech Republic. Přídolí is the old name of a
        ///	    cadastral field area. (WP, https://goo.gl/mStlAZ)
        ///	  </para>
        /// </summary>
        Pridoli,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Ludlow, lasting from 427.4 ± 1.5 to 423 ± 2.8 mya, comprises
        ///	    the Gorstian stage, lasting until 425.6 million years ago, and the
        ///	    Ludfordian stage. It is named for the town of Ludlow (and
        ///	    neighbouring Ludford) in Shropshire, England. (WP,
        ///	    https://goo.gl/mStlAZ)
        ///	  </para>
        /// </summary>
        Ludlow,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Wenlock, which lasted from 433.4 ± 1.5 to 427.4 ± 2.8 mya, is
        ///	    subdivided into the Sheinwoodian (to 430.5 million years ago) and
        ///	    Homerian ages. It is named after Wenlock Edge in Shropshire,
        ///	    England. During the Wenlock, the oldest known tracheophytes of the
        ///	    genus Cooksonia, appear. The complexity of slightly younger
        ///	    Gondwana plants like Baragwanathia indicates a much longer history
        ///	    for vascular plants, perhaps extending into the early Silurian or
        ///	    even Ordovician. See Evolutionary history of plants. The first
        ///	    terrestrial animals also appear in the Wenlock, represented by
        ///	    air-breathing millipedes from Scotland. (WP, https://goo.gl/mStlAZ)
        ///	  </para>
        /// </summary>
        Wenlock,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Llandovery Epoch lasted from 443.8 ± 1.5 to 433.4 ± 2.8 mya,
        ///	    and is subdivided into three stages: the Rhuddanian, lasting until
        ///	    440.8 million years ago, the Aeronian, lasting to 438.5 million
        ///	    years ago, and the Telychian. The epoch is named for the town of
        ///	    Llandovery in Carmarthenshire, Wales (WP, https://goo.gl/mStlAZ)
        ///	  </para>
        /// </summary>
        Llandovery,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Furongian is the fourth and final series of the Cambrian. It
        ///	    lasted from ~497 to 485.4 ± 1.9 million years ago. It succeeds the
        ///	    still unnamed 3rd series of the Cambrian and precedes the Lower
        ///	    Ordovician Tremadocian stage. It is subdivided into three stages:
        ///	    the Paibian, Jiangshanian and the unnamed 10th stage of the
        ///	    Cambrian (WP, https://goo.gl/WY4Nzj).
        ///	  </para>
        /// </summary>
        Furongian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Terreneuvian is the lowermost and oldest series of the Cambrian
        ///	    geological system. Its base is defined by the first appearance
        ///	    datum of the trace fossil Treptichnus pedum around 541.0 ± 1.0
        ///	    million years ago. Its top is defined as the first appearance of
        ///	    trilobites in the stratigraphic record around ~521 million years
        ///	    ago. This series was formally ratified by the International
        ///	    Commission on Stratigraphy in 2012 (WP, https://goo.gl/9BTTcO).
        ///	  </para>
        /// </summary>
        Terreneuvian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Cambrian Series 2 is the unnamed 2nd series of the Cambrian. It
        ///	    lies above the Terreneuvian series and below the Cambrian Series 3.
        ///	    Series 2 has not been formally defined by the International
        ///	    Commission on Stratigraphy, lacking a precise lower and upper
        ///	    boundary and subdivision into stages. The proposed lower boundary
        ///	    is the first appearance of trilobites which is estimated to be
        ///	    around ~521 million years ago. The upper boundary is proposed as
        ///	    the first appearance of either the trilobite species Oryctocephalus
        ///	    indicus or Ovatoryctocara granulata, currently estimated to be
        ///	    around ~509 million years ago (WP, https://goo.gl/Xny79N).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Series 2")]
        Series_2,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Cambrian Series 3 is the still unnamed 3rd Series of the Cambrian.
        ///	    It lasted from about ~509 to ~497 million years ago and is divided
        ///	    into 3 stages: the unnamed Stage 5, the Drumian, and the
        ///	    Guzhangian. Cambrian Series 3 is preceded by also unnamed Cambrian
        ///	    Series 2 and succeeded by the Furongian series (WP,
        ///	    https://goo.gl/QChvRc).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Series 3")]
        Series_3,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Upper,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Middle,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Lower,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalAge", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeologicalAge
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A name for a geological age from the international chronostratigraphic chart.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GeologicalAgeVocabulary", Namespace="")]
    public enum GeologicalAgeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Calabrian is a subdivision of the Pleistocene Epoch of the geologic time scale,
        ///	    defined as ~1.8 Ma.—781,000 years ago ± 5,000 years, a period of ~1.019 million
        ///	    years. The end of the stage is defined by the last magnetic pole reversal (781
        ///	    ± 5 Ka) and plunge into an ice age and global drying possibly colder and drier
        ///	    than the late Miocene (Messinian) through early Pliocene (Zanclean) cold
        ///	    period. Originally the Calabrian was a European faunal stage primarily based
        ///	    on mollusk fossils. It has become the second geologic age in the Early
        ///	    Pleistocene. Many of the mammalian faunal assemblages of the Early Pleistocene
        ///	    start in the Gelasian. For example, the Platygonus and other Blancan fauna
        ///	    appear first in the Gelasian (WP, https://goo.gl/fvxSGa).
        ///	  </para>
        /// </summary>
        Calabrian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    he Gelasian is an age in the international geologic timescale or a stage in
        ///	    chronostratigraphy, being the earliest or lowest subdivision of the Quaternary
        ///	    period/system and Pleistocene epoch/series. It spans the time between 2.588 ±
        ///	    0.005 Ma (million years ago) and 1.806 ± 0.005 Ma. It follows the Piacenzian
        ///	    stage (part of the Pliocene) and is followed by the Calabrian stage (WP,
        ///	    https://goo.gl/CtzNIv).
        ///	  </para>
        /// </summary>
        Gelasian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Piacenzian is in the international geologic time scale the upper stage or
        ///	    latest age of the Pliocene. It spans the time between 3.6 ± 0.005 Ma and 2.588
        ///	    ± 0.005 Ma (million years ago). The Piacenzian is on top of the Zanclean and is
        ///	    followed by the Gelasian (part of the Pleistocene) (WP, https://goo.gl/ttDaja).
        ///	  </para>
        /// </summary>
        Piacenzian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Zanclian is the lowest stage or earliest age on the geologic time scale of
        ///	    the Pliocene. It spans the time between 5.332 ± 0.005 Ma and 3.6 ± 0.005 Ma
        ///	    (million years ago). It is preceded by the Messinian age of the Miocene epoch,
        ///	    and followed by the Piacenzian age (WP, https://goo.gl/hoMlmv).
        ///	  </para>
        /// </summary>
        Zanclean,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    he Messinian is in the geologic timescale the last age or uppermost stage of
        ///	    the Miocene. It spans the time between 7.246 ± 0.005 Ma and 5.332 ± 0.005 Ma
        ///	    (million years ago). It follows the Tortonian and is followed by the Zanclean,
        ///	    the first age of the Pliocene (WP, https://goo.gl/BbVuyw).
        ///	  </para>
        /// </summary>
        Messinian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Tortonian is in the geologic timescale an age or stage of the late Miocene
        ///	    that spans the time between 11.608 ± 0.005 Ma and 7.246 ± 0.005 Ma (million
        ///	    years ago). It follows the Serravallian and is followed by the Messinian (WP,
        ///	    https://goo.gl/yPq9Au).
        ///	  </para>
        /// </summary>
        Tortonian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Serravallian is in the geologic timescale an age or a stage in the middle
        ///	    Miocene epoch/series, that spans the time between 13.65 ± 0.05 Ma and 11.608 ±
        ///	    0.005 Ma (million years ago). The Serravallian follows the Langhian and is
        ///	    followed by the Tortonian (WP, https://goo.gl/erycZ3).
        ///	  </para>
        /// </summary>
        Serravallian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Langhian is, in the ICS geologic timescale, an age or stage in the middle
        ///	    Miocene epoch/series. It spans the time between 15.97 ± 0.05 Ma and 13.65 ±
        ///	    0.05 Ma (million years ago) during the Middle Miocene (WP,
        ///	    https://goo.gl/YpyJw3).
        ///	  </para>
        /// </summary>
        Langhian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Burdigalian is, in the geologic timescale, an age or stage in the early
        ///	    Miocene. It spans the time between 20.43 ± 0.05 Ma and 15.97 ± 0.05 Ma (million
        ///	    years ago). Preceded by the Aquitanian, the Burdigalian was the first and
        ///	    longest warming period of the Miocene and is succeeded by the Langhian (WP,
        ///	    https://goo.gl/pc1Rkt).
        ///	  </para>
        /// </summary>
        Burdigalian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Aquitanian is, in the ICS' geologic timescale, the oldest age or lowest
        ///	    stage in the Miocene. It spans the time between 23.03 ± 0.05 Ma and 20.43 ±
        ///	    0.05 Ma (million years ago) during the Early Miocene. It is a dry, cooling
        ///	    period. The Aquitanian succeeds the Chattian (the youngest age of the
        ///	    Oligocene) and precedes the Burdigalian (WP, https://goo.gl/hvxMfX).
        ///	  </para>
        /// </summary>
        Aquitanian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Chattian is, in the geologic timescale, the younger of two ages or upper of
        ///	    two stages of the Oligocene epoch/series. It spans the time between 28.1 and
        ///	    23.03 Ma. The Chattian is preceded by the Rupelian and is followed by the
        ///	    Aquitanian (the lowest stage of the Miocene) (WP, https://goo.gl/Ufl38O).
        ///	  </para>
        /// </summary>
        Chattian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Rupelian is, in the geologic timescale, the older of two ages or the lower
        ///	    of two stages of the Oligocene epoch/series. It spans the time between 33.9 and
        ///	    28.1 Ma. It is preceded by the Priabonian stage (part of the Eocene) and is
        ///	    followed by the Chattian stage (WP, https://goo.gl/P8U2Xs).
        ///	  </para>
        /// </summary>
        Rupelian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Priabonian is, in the ICS's geologic timescale, the latest age or the upper
        ///	    stage of the Eocene epoch or series. It spans the time between 37.8 and 33.9
        ///	    Ma. The Priabonian is preceded by the Bartonian and is followed by the
        ///	    Rupelian, the lowest stage of the Oligocene (WP, https://goo.gl/qEED1G).
        ///	  </para>
        /// </summary>
        Priabonian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Bartonian is, in the ICS's geologic time scale, a stage or age in the
        ///	    middle Eocene epoch or series. The Bartonian age spans the time between 41.2
        ///	    and 37.8 Ma. It is preceded by the Lutetian and is followed by the Priabonian
        ///	    age (WP, https://goo.gl/AW2q96).
        ///	  </para>
        /// </summary>
        Bartonian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Lutetian is, in the geologic timescale, a stage or age in the
        ///	    Eocene. It spans the time between 47.8 and 41.2 Ma. The Lutetian
        ///	    is preceded by the Ypresian and is followed by the Bartonian.
        ///	    Together with the Bartonian it is sometimes referred to as the
        ///	    Middle Eocene subepoch (WP, https://goo.gl/IqPVMn)
        ///	  </para>
        /// </summary>
        Lutetian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale the Ypresian (pronunciation: /iːˈprɛsiən/) is the
        ///	    oldest age or lowest stratigraphic stage of the Eocene. It spans the time
        ///	    between 56 and 47.8 Ma, is preceded by the Thanetian age (part of the
        ///	    Paleocene) and is followed by the Eocene Lutetian age (WP,
        ///	    https://goo.gl/NVeq4j)
        ///	  </para>
        /// </summary>
        Ypresian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Thanetian is, in the ICS Geologic timescale, the latest age or uppermost
        ///	    stratigraphic stage of the Paleocene Epoch or series. It spans the time between
        ///	    59.2 and 56 Ma. The Thanetian is preceded by the Selandian age and followed by
        ///	    the Ypresian age (part of the Eocene). The Thanetian is sometimes referred
        ///	    to as the Late Paleocene sub-epoch (WP, https://goo.gl/ntpflj).
        ///	  </para>
        /// </summary>
        Thanetian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Selandian is in the geologic timescale an age or stage in the Paleocene. It
        ///	    spans the time between 61.6 and 59.2 Ma. It is preceded by the Danian and
        ///	    followed by the Thanetian. Sometimes the Paleocene is subdivided in
        ///	    subepochs, in which the Selandian forms the "Middle Paleocene". (WP,
        ///	    https://goo.gl/RyiIOs)
        ///	  </para>
        /// </summary>
        Selandian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Danian is the oldest age or lowermost stage of the Paleocene epoch or
        ///	    series, the Paleogene period or system and the Cenozoic era or erathem. The
        ///	    beginning of the Danian age (and the end of the preceding Maastrichtian age) is
        ///	    at the Cretaceous–Paleogene extinction event 66 Ma. The age ended 61.6 Ma,
        ///	    being followed by the Selandian age (WP, https://goo.gl/WpM0lU).
        ///	  </para>
        /// </summary>
        Danian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Maastrichtian is, in the ICS geologic timescale, the latest age or upper
        ///	    stage of the Late Cretaceous epoch or Upper Cretaceous series, the Cretaceous
        ///	    period or system, and of the Mesozoic era or erathem. It spanned the interval
        ///	    from 72.1 to 66 million years ago. The Maastrichtian was preceded by the
        ///	    Campanian and succeeded by the Danian (part of the Paleogene and Paleocene)
        ///	    (WP, https://goo.gl/xvwAHe)
        ///	  </para>
        /// </summary>
        Maastrichtian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Campanian is, in the ICS' geologic timescale, the fifth of six ages of the
        ///	    Late Cretaceous epoch (or, in chronostratigraphy: the fifth of six stages in
        ///	    the Upper Cretaceous series). The Campanian spans the time from 83.6 ± 0.7 Ma
        ///	    to 72.1 ± 0.6 Ma (million years ago). It is preceded by the Santonian and it is
        ///	    followed by the Maastrichtian (WP, https://goo.gl/Q47fpS).
        ///	  </para>
        /// </summary>
        Campanian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Santonian is an age in the geologic timescale or a chronostratigraphic
        ///	    stage. It is a subdivision of the Late Cretaceous epoch or Upper Cretaceous
        ///	    series. It spans the time between 86.3 ± 0.7 mya (million years ago) and 83.6 ±
        ///	    0.7 mya. The Santonian is preceded by the Coniacian and is followed by the
        ///	    Campanian (WP, https://goo.gl/wYfDET).
        ///	  </para>
        /// </summary>
        Santonian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Coniacian is an age or stage in the geologic timescale. It is a subdivision
        ///	    of the Late Cretaceous epoch or Upper Cretaceous series and spans the time
        ///	    between 89.8 ± 1 Ma and 86.3 ± 0.7 Ma (million years ago). The Coniacian is
        ///	    preceded by the Turonian and followed by the Santonian (WP,
        ///	    https://goo.gl/6ysKVB).
        ///	  </para>
        /// </summary>
        Coniacian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Turonian is, in the ICS' geologic timescale, the second age in the Late
        ///	    Cretaceous epoch, or a stage in the Upper Cretaceous series. It spans the time
        ///	    between 93.9 ± 0.8 Ma and 89.8 ± 1 Ma (million years ago). The Turonian is
        ///	    preceded by the Cenomanian stage and underlies the Coniacian stage (WP,
        ///	    https://goo.gl/cXU55Q).
        ///	  </para>
        /// </summary>
        Turonian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Cenomanian is, in the ICS' geological timescale the oldest or earliest age
        ///	    of the Late Cretaceous epoch or the lowest stage of the Upper Cretaceous
        ///	    series. An age is a unit of geochronology: it is a unit of time; the stage
        ///	    is a unit in the stratigraphic column deposited during the corresponding age.
        ///	    Both age and stage bear the same name (WP, https://goo.gl/omrp1u).
        ///	  </para>
        /// </summary>
        Cenomanian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Albian is both an age of the geologic timescale and a stage in the
        ///	    stratigraphic column. It is the youngest or uppermost subdivision of the
        ///	    Early/Lower Cretaceous epoch/series. Its approximate time range is 113.0 ± 1.0
        ///	    Ma to 100.5 ± 0.9 Ma (million years ago). The Albian is preceded by the Aptian
        ///	    and followed by the Cenomanian (WP, https://goo.gl/g90neK).
        ///	  </para>
        /// </summary>
        Albian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Aptian is an age in the geologic timescale or a stage in the stratigraphic
        ///	    column. It is a subdivision of the Early or Lower Cretaceous epoch or series
        ///	    and encompasses the time from 125.0 ± 1.0 Ma to 113.0 ± 1.0 Ma (million years
        ///	    ago), approximately. The Aptian succeeds the Barremian and precedes the Albian,
        ///	    all part of the Lower/Early Cretaceous (WP, https://goo.gl/8B9r4E).
        ///	  </para>
        /// </summary>
        Aptian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Barremian is an age in the geologic timescale (or a chronostratigraphic
        ///	    stage) between 129.4 ± 1.5 Ma (million years ago) and 125.0 ± 1.0 Ma). It is a
        ///	    subdivision of the Early Cretaceous epoch (or Lower Cretaceous series). It is
        ///	    preceded by the Hauterivian and followed by the Aptian stage (WP,
        ///	    https://goo.gl/SNSUhS).
        ///	  </para>
        /// </summary>
        Barremian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Hauterivian is, in the geologic timescale, an age in the Early Cretaceous
        ///	    epoch or a stage in the Lower Cretaceous series. It spans the time between
        ///	    132.9 ± 2 Ma and 129.4 ± 1.5 Ma (million years ago). The Hauterivian is
        ///	    preceded by the Valanginian and succeeded by the Barremian (WP,
        ///	    https://goo.gl/PivdCS).
        ///	  </para>
        /// </summary>
        Hauterivian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Valanginian is an age or stage of the Early or
        ///	    Lower Cretaceous. It spans between 139.8 ± 3.0 Ma and 132.9 ± 2.0 Ma (million
        ///	    years ago). The Valanginian stage succeeds the Berriasian stage of the Lower
        ///	    Cretaceous and precedes the Hauterivian stage of the Lower Cretaceous (WP,
        ///	    https://goo.gl/Z70dMw)
        ///	  </para>
        /// </summary>
        Valanginian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geological timescale, the Berriasian is an age or stage of the Early
        ///	    Cretaceous. It is the oldest, or lowest, subdivision in the entire Cretaceous.
        ///	    It spanned the time between 145.0 ± 4.0 Ma and 139.8 ± 3.0 Ma (million years
        ///	    ago). The Berriasian succeeds the Tithonian (part of the Jurassic) and precedes
        ///	    the Valanginian (WP, https://goo.gl/004uzd)
        ///	  </para>
        /// </summary>
        Berriasian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geological timescale the Tithonian is the latest age of the Late
        ///	    Jurassic epoch or the uppermost stage of the Upper Jurassic series. It spans
        ///	    the time between 152.1 ± 4 Ma and 145.0 ± 4 Ma (million years ago). It is
        ///	    preceded by the Kimmeridgian and followed by the Berriasian stage (part of the
        ///	    Cretaceous) (WP, https://goo.gl/YmzG3a).
        ///	  </para>
        /// </summary>
        Tithonian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Kimmeridgian is an age or stage in the Late or
        ///	    Upper Jurassic epoch or series. It spans the time between 157.3 ± 1.0 Ma and
        ///	    152.1 ± 0.9 Ma (million years ago). The Kimmeridgian follows the Oxfordian and
        ///	    precedes the Tithonian. (WP, https://goo.gl/gr7r0U).
        ///	  </para>
        /// </summary>
        Kimmeridgian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Oxfordian is, in the ICS' geologic timescale, the earliest age of the Late
        ///	    Jurassic epoch, or the lowest stage of the Upper Jurassic series. It spans the
        ///	    time between 163.5 ± 4 Ma and 157.3 ± 4 Ma (million years ago). The Oxfordian
        ///	    is preceded by the Callovian and is followed by the Kimmeridgian (WP,
        ///	    https://goo.gl/IJUvEy)
        ///	  </para>
        /// </summary>
        Oxfordian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Callovian is an age or stage in the Middle
        ///	    Jurassic, lasting between 166.1 ± 4.0 Ma (million years ago) and 163.5 ± 4.0
        ///	    Ma. It is the last stage of the Middle Jurassic, following the Bathonian and
        ///	    preceding the Oxfordian (WP, https://goo.gl/b2WYfK).
        ///	  </para>
        /// </summary>
        Callovian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale the Bathonian is an age or stage of the Middle
        ///	    Jurassic. It lasted from approximately 168.3 Ma to around 166.1 Ma (million
        ///	    years ago). The Bathonian age succeeds the Bajocian age and precedes the
        ///	    Callovian age (WP, https://goo.gl/zLmmW8).
        ///	  </para>
        /// </summary>
        Bathonian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Bajocian is an age or stage in the Middle
        ///	    Jurassic. It lasted from approximately 170.3 Ma to around 168.3 Ma (million
        ///	    years ago). The Bajocian age succeeds the Aalenian age and precedes the
        ///	    Bathonian age (WP, https://goo.gl/UymRy9).
        ///	  </para>
        /// </summary>
        Bajocian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Aalenian is a subdivision of the Middle Jurassic epoch/series of the
        ///	    geologic timescale that extends from about 174.1 Ma to about 170.3 Ma (million
        ///	    years ago). It was preceded by the Toarcian and succeeded by the Bajocian (WP,
        ///	    https://goo.gl/gspPGX).
        ///	  </para>
        /// </summary>
        Aalenian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Toarcian is, in the ICS' geologic timescale, an age or stage in the Early
        ///	    or Lower Jurassic. It spans the time between 182.7 Ma (million years ago) and
        ///	    174.1 Ma. It follows the Pliensbachian and is followed by the Aalenian.
        ///	    The Toarcian age began with the Toarcian turnover, the extinction event that
        ///	    sets its fossil faunas apart from the previous Pliensbachian age (WP,
        ///	    https://goo.gl/jXcK7r).
        ///	  </para>
        /// </summary>
        Toarcian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Pliensbachian is an age of the geologic timescale or stage in
        ///	    the stratigraphic column. It is part of the Early or Lower Jurassic
        ///	    epoch or series and spans the time between 190.8 ± 1.5 Ma and 182.7
        ///	    ± 1.5 Ma (million years ago). The Pliensbachian is preceded by
        ///	    the Sinemurian and followed by the Toarcian. The Pliensbachian
        ///	    ended with the extinction event called the Toarcian turnover.
        ///	    During the Pliensbachian, the middle part of the Lias was deposited
        ///	    in Europe. The Pliensbachian is roughly coeval with the
        ///	    Charmouthian regional stage of North America (WP,
        ///	    https://goo.gl/IT8ojw)
        ///	  </para>
        /// </summary>
        Pliensbachian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Sinemurian is an age or stage in the Early or
        ///	    Lower Jurassic epoch or series. It spans the time between 199.3 ± 2 Ma and
        ///	    190.8 ± 1.5 Ma (million years ago). The Sinemurian is preceded by the
        ///	    Hettangian and is followed by the Pliensbachian. In Europe the Sinemurian
        ///	    age, together with the Hettangian age, saw the deposition of the lower Lias, in
        ///	    Great Britain known as the Blue Lias (WP, https://goo.gl/y5aEKm)
        ///	  </para>
        /// </summary>
        Sinemurian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Hettangian is the earliest age or lowest stage of the Jurassic period of
        ///	    the geologic timescale. It spans the time between 201.3 ± 0.2 Ma and 199.3 ±
        ///	    0.3 Ma (million years ago). The Hettangian follows the Rhaetian (part of the
        ///	    Triassic period) and is followed by the Sinemurian (WP, https://goo.gl/nVWzYu).
        ///	  </para>
        /// </summary>
        Hettangian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Rhaetian is, in geochronology, the latest age of the Triassic period or in
        ///	    chronostratigraphy the uppermost stage of the Triassic system. It lasted from
        ///	    ~208.5 to 201.3 ± 0.2 million years ago. It was preceded by the Norian and
        ///	    succeeded by the Hettangian (the lowermost stage or earliest age of the
        ///	    Jurassic) (WP, https://goo.gl/EvBnKe).
        ///	  </para>
        /// </summary>
        Rhaetian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Norian is a division of the Triassic geological period. It has the rank of
        ///	    an age (geochronology) or stage (chronostratigraphy). The Norian lasted from
        ///	    ~228 to ~208.5 million years ago. It was preceded by the Carnian and
        ///	    succeeded by the Rhaetian (WP, https://goo.gl/4pXV66).
        ///	  </para>
        /// </summary>
        Norian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Carnian (less commonly, Karnian) is the lowermost stage of the Upper
        ///	    Triassic series (or earliest age of the Late Triassic epoch). It lasted from
        ///	    237 to 228.4 million years ago (Ma). The Carnian is preceded by the Ladinian
        ///	    and is followed by the Norian. Its boundaries are not characterized by major
        ///	    extinctions or biotic turnovers, but a climatic event (known as the Carnian
        ///	    Pluvial Event) occurred during the Carnian and seems to be associated with
        ///	    important extinctions or biotic radiations (WP, https://goo.gl/TnWh1O).
        ///	  </para>
        /// </summary>
        Carnian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Ladinian is a stage and age in the Middle Triassic series or epoch. It
        ///	    spans the time between ~242 Ma and ~235 Ma (million years ago). The Ladinian
        ///	    was preceded by the Anisian and succeeded by the Carnian (part of the Upper or
        ///	    Late Triassic) (WP, https://goo.gl/2S00e4).
        ///	  </para>
        /// </summary>
        Ladinian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Anisian is the lower stage or earliest age of
        ///	    the Middle Triassic series or epoch and lasted from 247.2 million years ago
        ///	    until ~242 million years ago. The Anisian age succeeds the Olenekian age
        ///	    (part of the Lower Triassic epoch) and precedes the Ladinian age (WP,
        ///	    https://goo.gl/B5uqUL)
        ///	  </para>
        /// </summary>
        Anisian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Olenekian is an age in the Early Triassic epoch
        ///	    or a stage in the Lower Triassic series. It spans the time between 251.2 Ma and
        ///	    247.2 Ma (million years ago). The Olenekian follows the Induan and is
        ///	    followed by the Anisian. The Olenekian saw the deposition of a large part of
        ///	    the Buntsandstein in Europe. Archosaurs - a group encompassing crocodiles,
        ///	    pterosaurs, dinosaurs, and ultimately birds - are diapsid reptiles that first
        ///	    evolved from Archosauriform ancestors during the Olenekian (WP,
        ///	    https://goo.gl/reThth).
        ///	  </para>
        /// </summary>
        Olenekian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Induan is, in the geologic timescale, the first age of the Early Triassic
        ///	    epoch or the lowest stage of the Lower Triassic series. It spans the time
        ///	    between 252.17 ± 0.06 Ma and 251.2 Ma (million years ago). It is preceded by
        ///	    the Changhsingian and is followed by the Olenekian (WP, https://goo.gl/HHzPCt)
        ///	  </para>
        /// </summary>
        Induan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic time scale, the Changhsingian or Changxingian is the latest age
        ///	    or uppermost stage of the Permian. It is also the upper or latest of two
        ///	    subdivisions of the Lopingian epoch or series. The Changhsingian lasted from
        ///	    254.14 ± 0.07 to 252.17 ± 0.06 million years ago (Ma). It was preceded by the
        ///	    Wuchiapingian and followed by the Induan. The greatest mass extinction event
        ///	    in the Phanerozoic eon occurred during this age. The extinction rate peaked
        ///	    about a million years before the end of this stage (WP, https://goo.gl/t0QrK5).
        ///	  </para>
        /// </summary>
        Changhsingian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Wuchiapingian or Wujiapingian (from Chinese:
        ///	    吴家坪; pinyin: Wújiāpíng; literally: "Wu Family Flatland"" in the Liangshan
        ///	    area of Hanzhong, Shaanxi Province) is an age or stage of the Permian. It is
        ///	    also the lower or earlier of two subdivisions of the Lopingian epoch or series.
        ///	    The Wuchiapingian spans the time between 259.8 ± 0.4 and 254.14 ± 0.07 million
        ///	    years ago (Ma). It was preceded by the Capitanian and followed by the
        ///	    Changhsingian (WP, https://goo.gl/JcyOdo).
        ///	  </para>
        /// </summary>
        Wuchiapingian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Capitanian is an age or stage of the Permian. It
        ///	    is also the uppermost or latest of three subdivisions of the Guadalupian epoch
        ///	    or series. The Capitanian lasted between 265.1 ± 0.4 and 259.8 ± 0.4. It was
        ///	    preceded by the Wordian and followed by the Wuchiapingian. A significant
        ///	    mass extinction event (the End-Capitanian extinction event) occurred at the end
        ///	    of this stage, which was associated with anoxia and acidification in the oceans
        ///	    and possibly caused by the volcanic eruptions that produced the Emeishan
        ///	    Traps. This extinction event may be related to the much larger
        ///	    Permian-Triassic extinction event that followed about 10 million years later
        ///	    (WP, https://goo.gl/5PlSfN).
        ///	  </para>
        /// </summary>
        Capitanian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    n the geologic timescale, the Wordian is an age or stage of the Permian. It is
        ///	    the middle of three subdivisions of the Guadalupian epoch or series. The
        ///	    Wordian lasted between 268.8 ± 0.5 and 265.1 ± 0.4 million years ago (Ma). It
        ///	    was preceded by the Roadian and followed by the Capitanian. (WP,
        ///	    https://goo.gl/iQzhg4)
        ///	  </para>
        /// </summary>
        Wordian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Roadian is an age or stage of the Permian. It is
        ///	    the earliest or lower of three subdivisions of the Guadalupian epoch or series.
        ///	    The Roadian lasted between 272.3 ± 0.5 and 268.8 ± 0.5 million years ago (Ma).
        ///	    It was preceded by the Kungurian and followed by the Wordian (WP,
        ///	    https://goo.gl/168Hpe)
        ///	  </para>
        /// </summary>
        Roadian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Kungurian is an age or stage of the Permian. It
        ///	    is the latest or upper of four subdivisions of the Cisuralian epoch or series.
        ///	    The Kungurian lasted between 283.5 ± 0.6 and 272.3 ± 0.5 million years ago
        ///	    (Ma). It was preceded by the Artinskian and followed by the Roadian. It
        ///	    corresponds roughly to the Leonardian stage, covering the span from 280 to
        ///	    270.6 ± 0.7 Ma in the North American system (WP, https://goo.gl/PNV3EN).
        ///	  </para>
        /// </summary>
        Kungurian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Artinskian is an age or stage of the Permian. It
        ///	    is a subdivision of the Cisuralian epoch or series. The Artinskian lasted
        ///	    between 290.1 ± 0.26 and 283.5 ± 0.6 million years ago (Ma). It was preceded by
        ///	    the Sakmarian and followed by the Kungurian (WP, https://goo.gl/cgVjWS).
        ///	  </para>
        /// </summary>
        Artinskian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Sakmarian is an age or stage of the Permian. It
        ///	    is a subdivision of the Cisuralian epoch or series. The Sakmarian lasted
        ///	    between 295.0 ± 0.18 and 290.1 ± 0.26 million years ago (Ma). It was preceded
        ///	    by the Asselian and followed by the Artinskian (WP, https://goo.gl/DZBT8o)
        ///	  </para>
        /// </summary>
        Sakmarian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In the geologic timescale, the Asselian is the earliest geochronologic age or
        ///	    lowermost chronostratigraphic stage of the Permian. It is a subdivision of the
        ///	    Cisuralian epoch or series. The Asselian lasted between 298.9 ± 0.15 and 295.0
        ///	    ± 0.18 million years ago (Ma). It was preceded by the Gzhelian (the latest or
        ///	    uppermost subdivision in the Carboniferous) and followed by the Sakmarian.
        ///	    (WP, https://goo.gl/eR5zGK)
        ///	  </para>
        /// </summary>
        Asselian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Gzhelian is an age in the ICS geologic timescale or a stage in the
        ///	    stratigraphic column. It is the youngest stage of the Pennsylvanian, the
        ///	    youngest subsystem of the Carboniferous. The Gzhelian lasted from 303.7 ± 0.1
        ///	    to 298.9 ± 0.15 Ma. It follows the Kasimovian age/stage and is followed by
        ///	    the Asselian age/stage, the oldest subdivision of the Permian system (WP,
        ///	    https://goo.gl/FYE4mE).
        ///	  </para>
        /// </summary>
        Gzhelian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Kasimovian is an geochronologic age or chronostratigraphic stage in the ICS
        ///	    geologic timescale. It is the third stage in the Pennsylvanian (late
        ///	    Carboniferous), lasting from 307.0 ± 0.1 to 303.7 ± 0.1 Ma. The Kasimovian
        ///	    stage follows the Moscovian and is followed by the Gzhelian. The Kasimovian saw
        ///	    an extinction event which occurred around 305 mya, referred to as the
        ///	    Carboniferous Rainforest Collapse (WP, https://goo.gl/d6QuF6).
        ///	  </para>
        /// </summary>
        Kasimovian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Moscovian is in the ICS geologic timescale a stage or age in the
        ///	    Pennsylvanian, the youngest subsystem of the Carboniferous. The Moscovian age
        ///	    lasted from 315.2 ± 0.2 to 307.0 ± 0.1 Ma, is preceded by the Bashkirian and
        ///	    is followed by the Kasimovian. The Moscovian overlaps with the European
        ///	    regional Westphalian stage and the North American Atokan and Desmoinesian
        ///	    stages (WP, https://goo.gl/2dHU6L).
        ///	  </para>
        /// </summary>
        Moscovian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Bashkirian is in the ICS geologic timescale the lowest stage or oldest age
        ///	    of the Pennsylvanian, The Bashkirian age lasted from 323.2 ± 0.4 to 315.2 ± 0.2
        ///	    Ma, is preceded by the Serpukhovian and is followed by the Moscovian. The
        ///	    Bashkirian overlaps with the upper part of the Namurian and lower part of the
        ///	    Westphalian stages from regional European stratigraphy. It also overlaps with
        ///	    the North American Morrowan and Atokan stages and the Chinese Luosuan and lower
        ///	    Huashibanian stages (WP, https://goo.gl/krz6ZF).
        ///	  </para>
        /// </summary>
        Bashkirian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Serpukhovian is in the ICS geologic timescale the uppermost stage or
        ///	    youngest age of the Mississippian, the lower subsystem of the Carboniferous.
        ///	    The Serpukhovian age lasted from 330.9 ± 0.2 Ma to 323.2 ± 0.4 Ma. It is
        ///	    preceded by the Visean and is followed by the Bashkirian. The Serpukhovian
        ///	    correlates with the lower part of the Namurian stage of European stratigraphy
        ///	    and the middle and upper parts of the Chesterian stage of North American
        ///	    stratigraphy (WP, https://goo.gl/3qoJni).
        ///	  </para>
        /// </summary>
        Serpukhovian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Visean, Viséan or Visian is an age in the ICS geologic timescale or a stage
        ///	    in the stratigraphic column. It is the second stage of the Mississippian, the
        ///	    lower subsystem of the Carboniferous. The Visean lasted from 346.7 ± 0.4 to
        ///	    330.9 ± 0.2 Ma. It follows the Tournaisian age/stage and is followed by the
        ///	    Serpukhovian age/stage (WP, https://goo.gl/2eAkIc).
        ///	  </para>
        /// </summary>
        Visean,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Tournaisian is in the ICS geologic timescale the lowest stage or oldest age
        ///	    of the Mississippian, the oldest subsystem of the Carboniferous. The
        ///	    Tournaisian age lasted from 358.9 ± 0.4 Ma to 346.7 ± 0.4 Ma. It is preceded
        ///	    by the Famennian (the uppermost stage of the Devonian) and is followed by the
        ///	    Viséan (WP, https://goo.gl/OM6RQu).
        ///	  </para>
        /// </summary>
        Tournaisian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Famennian is the latter of two faunal stages in the Late Devonian epoch. It
        ///	    lasted from 372.2 ± 1.6 million years ago to 358.9 ± 0.4 million years ago. It
        ///	    was preceded by the Frasnian stage and followed by the Tournaisian stage. It
        ///	    was during this age that tetrapods first appeared. In the seas, a novel major
        ///	    group of ammonoid cephalopods called clymeniids appeared, underwent tremendous
        ///	    diversification and spread worldwide, then just as suddenly went extinct. The
        ///	    beginning of the Famennian is marked by a major extinction event, the
        ///	    Kellwasser Event, and the end with a smaller but still quite severe extinction
        ///	    event, the Hangenberg Event. North American subdivisions of the Famennian
        ///	    include the Chautauquan, Canadaway, Conneaut, Conneautan, Conewango and
        ///	    Conewangan (WP, https://goo.gl/DAauwe).
        ///	  </para>
        /// </summary>
        Famennian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Frasnian is one of two faunal stages in the Late Devonian period. It lasted
        ///	    from 382.7 ± 1.6 million years ago to 372.2 ± 1.6 million years ago. It was
        ///	    preceded by the Givetian stage and followed by the Famennian stage. Major
        ///	    reef-building was under way during the Frasnian stage, particularly in western
        ///	    Canada and Australia. On land, the first forests were taking shape. In North
        ///	    America, the Antler and Taconic orogenies peaked, which were contemporary with
        ///	    the Bretonic phase of the Variscan orogeny in Europe. The Frasnian coincides
        ///	    with the second half of the "charcoal gap" in the fossil record, a time when
        ///	    atmospheric oxygen levels were below 13%, the minimum necessary to sustain
        ///	    wildfires. North American subdivisions of the Frasnian include West Falls
        ///	    Group, Sonyea Group and Genesee Group (WP, https://goo.gl/P1idrs).
        ///	  </para>
        /// </summary>
        Frasnian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Givetian is one of two faunal stages in the Middle Devonian period. It
        ///	    lasted from 387.7 ± 0.8 million years ago to 382.7 ± 1.6 million years ago. It
        ///	    was preceded by the Eifelian stage and followed by the Frasnian stage. It is
        ///	    named after the town of Givet in France (WP, https://goo.gl/JeJZqB).
        ///	  </para>
        /// </summary>
        Givetian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Middle Devonian comprises two subdivisions, the Eifelian giving way to the
        ///	    Givetian 387.7± 2.7 million years ago. During this time the armoured jawless
        ///	    ostracoderm fish were declining in diversity; the jawed fish were thriving and
        ///	    increasing in diversity in both the oceans and freshwater. The shallow, warm,
        ///	    oxygen-depleted waters of Devonian inland lakes, surrounded by primitive
        ///	    plants, provided the environment necessary for certain early fish to develop
        ///	    essential characteristics such as well developed lungs, and the ability to
        ///	    crawl out of the water and onto the land for short periods of time (WP,
        ///	    https://goo.gl/nXmryt).
        ///	  </para>
        /// </summary>
        Eifelian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Early Devonian lasts from 419.2 ± 2.8 to 393.3 ± 2.5 and begins with the
        ///	    Lochkovian stage, which lasts until the Pragian. This spans from 410.8 ± 2.8 to
        ///	    407.6 ± 2.5, and is followed by the Emsian, which lasts until the Middle
        ///	    Devonian begins, 393.3± 2.7 million years ago (WP, https://goo.gl/nXmryt).
        ///	  </para>
        /// </summary>
        Emsian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Early Devonian lasts from 419.2 ± 2.8 to 393.3 ± 2.5 and begins with the
        ///	    Lochkovian stage, which lasts until the Pragian. This spans from 410.8 ± 2.8 to
        ///	    407.6 ± 2.5, and is followed by the Emsian, which lasts until the Middle
        ///	    Devonian begins, 393.3± 2.7 million years ago (WP, https://goo.gl/nXmryt).
        ///	  </para>
        /// </summary>
        Pragian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Early Devonian lasts from 419.2 ± 2.8 to 393.3 ± 2.5 and begins with the
        ///	    Lochkovian stage, which lasts until the Pragian. This spans from 410.8 ± 2.8 to
        ///	    407.6 ± 2.5, and is followed by the Emsian, which lasts until the Middle
        ///	    Devonian begins, 393.3± 2.7 million years ago (WP, https://goo.gl/nXmryt).
        ///	  </para>
        /// </summary>
        Lochkovian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Ludlow, lasting from 427.4 ± 1.5 to 423 ± 2.8 mya, comprises the Gorstian
        ///	    stage, lasting until 425.6 million years ago, and the Ludfordian stage. It is
        ///	    named for the town of Ludlow (and neighbouring Ludford) in Shropshire, England
        ///	    (WP, https://goo.gl/DRJI4P)
        ///	  </para>
        /// </summary>
        Ludfordian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Ludlow, lasting from 427.4 ± 1.5 to 423 ± 2.8 mya, comprises the Gorstian
        ///	    stage, lasting until 425.6 million years ago, and the Ludfordian stage. It is
        ///	    named for the town of Ludlow (and neighbouring Ludford) in Shropshire, England
        ///	    (WP, https://goo.gl/DRJI4P)
        ///	  </para>
        /// </summary>
        Gorstian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Wenlock is divided into the older Sheinwoodian and the younger Homerian
        ///	    stage. The Sheinwoodian lasted from 433.4 ± 0.8 to 430.5 ± 0.7 million years
        ///	    ago. The Homerian lasted from 430.5 ± 0.7 to 427.4 ± 0.5 million years ago (WP,
        ///	    https://goo.gl/d7u763)
        ///	  </para>
        /// </summary>
        Homerian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Wenlock is divided into the older Sheinwoodian and the younger Homerian
        ///	    stage. The Sheinwoodian lasted from 433.4 ± 0.8 to 430.5 ± 0.7 million years
        ///	    ago. The Homerian lasted from 430.5 ± 0.7 to 427.4 ± 0.5 million years ago (WP,
        ///	    https://goo.gl/d7u763)
        ///	  </para>
        /// </summary>
        Sheinwoodian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Llandovery Epoch lasted from 443.8 ± 1.5 to 433.4 ± 2.8 mya, and is
        ///	    subdivided into three stages: the Rhuddanian, lasting until 440.8 million
        ///	    years ago, the Aeronian, lasting to 438.5 million years ago, and the Telychian.
        ///	    The epoch is named for the town of Llandovery in Carmarthenshire, Wales (WP,
        ///	    https://goo.gl/9KtX1S).
        ///	  </para>
        /// </summary>
        Telychian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Llandovery Epoch lasted from 443.8 ± 1.5 to 433.4 ± 2.8 mya, and is
        ///	    subdivided into three stages: the Rhuddanian, lasting until 440.8 million
        ///	    years ago, the Aeronian, lasting to 438.5 million years ago, and the Telychian.
        ///	    The epoch is named for the town of Llandovery in Carmarthenshire, Wales (WP,
        ///	    https://goo.gl/5PoKh8).
        ///	  </para>
        /// </summary>
        Aeronian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Llandovery Epoch lasted from 443.8 ± 1.5 to 433.4 ± 2.8 mya, and is
        ///	    subdivided into three stages: the Rhuddanian, lasting until 440.8 million
        ///	    years ago, the Aeronian, lasting to 438.5 million years ago, and the Telychian.
        ///	    The epoch is named for the town of Llandovery in Carmarthenshire, Wales (WP,
        ///	    https://goo.gl/Ar7PDx)
        ///	  </para>
        /// </summary>
        Rhuddanian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    he Hirnantian is the seventh and final internationally recognized stage of the
        ///	    Ordovician Period of the Paleozoic Era. It was of short duration, lasting about
        ///	    1.9 million years, from 445.2 ± 1.4 to 443.8 ± 1.5 Ma (million years ago).
        ///	    The early part of the Hirnantian was characterized by cold temperatures, major
        ///	    glaciation, and a severe drop in sea level. In the latter part of the
        ///	    Hirnantian, temperatures rose, the glaciers melted, and sea level returned to
        ///	    the same or to a slightly higher level than it had been prior to the glaciation
        ///	    (WP, https://goo.gl/tZpKFO).
        ///	  </para>
        /// </summary>
        Hirnantian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Katian is the second stage of the Upper Ordovician. It is preceded by the
        ///	    Sandbian and succeeded by the Hirnantian stage. The Katian began 453.0 ± 0.7
        ///	    million years ago and lasted for about 7.8 million years until the beginning of
        ///	    the Hirnantian 445.2 ± 1.4 million years ago (WP, https://goo.gl/tAsaB8).
        ///	  </para>
        /// </summary>
        Katian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Sandbian is the first stage of the Upper Ordovician. It follows the
        ///	    Darriwilian and is succeeded by the Katian. Its lower boundary is defined as
        ///	    the first appearance datum of the graptolite species Nemagraptus gracilis
        ///	    around 458.4 ± 0.9 million years ago. The Sandbian lasted for about 5.4 million
        ///	    years until the beginning of the Katian around 453.0 ± 0.7 million years ago
        ///	    (WP, https://goo.gl/cBjH1P).
        ///	  </para>
        /// </summary>
        Sandbian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Darriwilian is the upper stage of the Middle Ordovician. It is preceded by
        ///	    the Dapingian and succeeded by the Upper Ordovician Sandbian stage. The lower
        ///	    boundary of the Darriwilian is defined as the first appearance of the
        ///	    graptolite species Undulograptus austrodentatus around 467.3 ± 1.1 million
        ///	    years ago. It lasted for about 8.9 million years until the beginning of the
        ///	    Sandbian around 458.4 ± 0.9 million years ago (WP, https://goo.gl/7c8Qq2).
        ///	  </para>
        /// </summary>
        Darriwilian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Dapingian is the third stage of the Ordovician and the first stage of the
        ///	    Middle Ordovician. It is preceded by the Floian and succeeded by the
        ///	    Darriwilian. The base of the Floian is defined as the first appearance of the
        ///	    conodont species Baltoniodus triangularis which happened about 470.0 ± 1.4
        ///	    million years ago. The Dapingian lasted for about 2.7 million years until about
        ///	    467.3 ± 1.1 million years ago (WP, https://goo.gl/Y0RT8c).
        ///	  </para>
        /// </summary>
        Dapingian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Floian is the second stage of the Ordovician. It succeeds the Tremadocian
        ///	    with which it forms the Lower Ordovician epoch. It precedes the Dapingian stage
        ///	    of the Middle Ordovician. The Floian extended from 477.7 ± 1.4 to 470.0 ± 1.4
        ///	    million years ago. The lower boundary is defined as the first appearance of the
        ///	    graptolite species Tetragraptus approximatus (WP, https://goo.gl/Li1qEk).
        ///	  </para>
        /// </summary>
        Floian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Tremadocian is the lowest stage of Ordovician. Together with the later
        ///	    Floian stage it forms the Lower Ordovician epoch. The Tremadocian lasted from
        ///	    485.4 ± 1.9 to 477.7 ± 1.4 million years ago. The base of the Tremadocian is
        ///	    defined as the first appearance of the conodont species Iapetognathus
        ///	    fluctivagus at the GSSP section in Newfoundland (WP, https://goo.gl/AFQxuG).
        ///	  </para>
        /// </summary>
        Tremadocian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Jiangshanian is the middle stage of the Furongian series. It follows the
        ///	    Paibian stage and is succeeded by the still unnamed Stage 10 of the Cambrian.
        ///	    The base is defined as the first appearance of the trilobite Agnostotes
        ///	    orientalis which is estimated to be ~494 million years ago. The Jiangshanian
        ///	    lasted until approximately ~489.5 million years ago (WP,
        ///	    https://goo.gl/12lB1f).
        ///	  </para>
        /// </summary>
        Jiangshanian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Paibian is lowest stage of Furongian series of the Cambrian. It follows the
        ///	    Guzhangian (3rd series of the Cambrian) and is succeeded by the Jiangshanian
        ///	    stage. The base is defined as the first appearance of the trilobite
        ///	    Glyptagnostus reticulatus around ~497 million years ago. The top, or the base
        ///	    of the Jiangshanian is defined as the first appearance of the Agnostotes
        ///	    orientalis around ~494 million years ago (WP, https://goo.gl/3HhNlK).
        ///	  </para>
        /// </summary>
        Paibian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Guzhangian is an uppermost stage of the 3rd series of the Cambrian. It
        ///	    follows the Drumian stage and precedes the Paibian stage of the Furongian
        ///	    series. The base is defined as the first appearance of the trilobite Lejopyge
        ///	    laevigata around ~500.5 million years ago. The Guzhangian-Paibian boundary is
        ///	    marked by the first appearance of the trilobite Glyptagnostus reticulatus
        ///	    around ~497 million years ago (WP, https://goo.gl/I1mhOU).
        ///	  </para>
        /// </summary>
        Guzhangian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Drumian is a stage of 3rd series of the Cambrian. It succeeds still unnamed
        ///	    5th stage of the Cambrian and precedes the Guzhangian. The base is defined as
        ///	    the first appearance of the trilobite Ptychagnostus atavus around ~504.5
        ///	    million years ago. The top is defined as the first appearance of another
        ///	    trilobite Lejopyge laevigata around ~500.5 million years ago (WP,
        ///	    https://goo.gl/iD3tJV)
        ///	  </para>
        /// </summary>
        Drumian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Fortunian stage marks the beginning of the Phanerozoic eon, the Paleozoic
        ///	    era, and the Cambrian period. It is the first of the two stages of the
        ///	    Terreneuvian series. Its base is defined as the first appearance of the trace
        ///	    fossil Treptichnus pedum 541.0 ± 1.0 million years ago. The top of the
        ///	    Fortunian which is the base of the Stage 2 of the Cambrian has not been
        ///	    formally defined yet, but will correspond to the appearance of an Archeocyatha
        ///	    species or "Small shelly fossils" approximately ~529 million years ago (WP,
        ///	    https://goo.gl/38pvGi)
        ///	  </para>
        /// </summary>
        Fortunian,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Stage 2 of the Cambrian is the unnamed upper stage of the Terreneuvian series.
        ///	    It lies on top of the Fortunian and below Stage 3 of the Cambrian. It is
        ///	    commonly referred to as the Tommotian, after the Cambrian stratigraphy of
        ///	    Siberia. Both the upper and lower boundary have not been clearly defined yet
        ///	    by the International Commission on Stratigraphy. Proposals for the lower
        ///	    boundary are the appearance of Small Shelly Fossils, an archaeocyathid species
        ///	    or the mollusc Watsonella crosbyi around ~529 million years ago. The
        ///	    proposed upper boundary might be the first appearance of trilobites around ~521
        ///	    million years ago (WP, https://goo.gl/Crk4Zp).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Stage 2")]
        Stage_2,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Cambrian Stage 3 is the still unnamed third stage of the Cambrian. It succeeds
        ///	    Cambrian Stage 2 and precedes Cambrian Stage 4, although neither its base or
        ///	    top have been formally defined yet. The lower boundary is loosely defined as
        ///	    the first appearance of trilobites which happened around ~521 million years
        ///	    ago. The upper boundary and beginning of Cambrian Stage 4 is informally defined
        ///	    as the first appearance of the trilobite genera Olenellus or Redlichia around
        ///	    ~514 million years ago (WP, https://goo.gl/cMUImz).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Stage 3")]
        Stage_3,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Cambrian Stage 4 is the still unnamed 4th stage of the Cambrian and the upper
        ///	    stage of the 2nd Cambrian series. It follows the 3rd stage and lies below the
        ///	    Cambrian Stage 5. The lower boundary has not been formally defined by the
        ///	    International Commission on Stratigraphy yet. One proposal is the first
        ///	    appearance of two trilobite genera, Olenellus or Redlichia. Another proposal is
        ///	    the first appearance of the trilobite species Arthricocephalus chauveaui.
        ///	    Both proposals will set the lower boundary close to ~514 million years ago.
        ///	    The upper boundary corresponds to the beginning of Cambrian Stage 5 which also
        ///	    has not been formally defined yet. Proposals are the first appearances of the
        ///	    trilobite species Oryctocephalus indicus or Ovatoryctocara granulata, dated at
        ///	    approximately ~509 million years ago (WP, https://goo.gl/H7WDMu).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Stage 4")]
        Stage_4,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Stage 5 of the Cambrian is the first stage of the 3rd series of the Cambrian
        ///	    (or Middle Cambrian). Its lower boundary has not been formally defined by the
        ///	    ICS yet. The most promising definition is the first appearance of either the
        ///	    trilobite species Oryctocephalus indicus or Ovatoryctocara granulata which is
        ///	    currently estimated to be around ~509 million years ago. The end of Cambrian
        ///	    Stage 5 and the beginning of the Drumian stage is marked by the first
        ///	    appearance of the trilobite Ptychagnostus atavus around ~504.5 million years
        ///	    ago (WP, https://goo.gl/UvSfQw).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Stage 5")]
        Stage_5,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Stage 10 of the Cambrian is the still unnamed third and final stage of the
        ///	    Furongian Series. It follows the Jiangshanian and precedes the Ordovician
        ///	    Tremadocian Stage. The proposed lower boundary is the first appearance of the
        ///	    trilobite Lotagnostus americanus around ~489.5 million years ago, but other
        ///	    fossils are also being discussed (see below). The upper boundary is defined as
        ///	    the appearance of the conodont Iapetognathus fluctivagus which marks the
        ///	    beginning of the Tremadocian and is radiometrically dated as 485.4 ± 1.9
        ///	    million years ago (WP, https://goo.gl/tR4xpn).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Stage 10")]
        Stage_10,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Upper,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Middle,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TemporalResolution", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TemporalResolution
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The temporal extent type is a categorical value that describes the extent of
        ///						  the setup the object comes from (e.g. Second, Minute, Hour, Day, Week,
        ///						  ...).
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("temporalExtentType", Namespace="")]
        public TemporalExtentType TemporalExtentType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The temporal resolution is a categorical value that describes the resolution of
        ///						  the setup the object comes from (e.g. Second, Minute, Hour, Day, Week,
        ///						  ...).
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("temporalResolutionType", Namespace="")]
        public TemporalResolutionType TemporalResolutionType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TemporalExtentType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TemporalExtentType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("modifyer", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Modifyer { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A temporal extent type.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TemporalExtentTypeVocabulary", Namespace="")]
    public enum TemporalExtentTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Second (symbol: s) (abbreviated s or sec) is the base
        ///	    unit of time in the International System of Units (SI).
        ///	    It is qualitatively defined as the second division of
        ///	    the hour by sixty, the first division by sixty being
        ///	    the minute. It is quantitatively defined in terms of a
        ///	    certain number of periods – about 9 billion – of a
        ///	    certain frequency of radiation from the caesium atom: a
        ///	    so-called atomic clock. Seconds may be measured using a
        ///	    mechanical, electric or atomic clock (WP,
        ///	    http://bit.ly/1VnHFrn)
        ///	  </para>
        /// </summary>
        Second,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The minute is a unit of time or of angle. As a unit of time, the
        ///	    minute is equal to 1/60 (the first sexagesimal fraction) of an hour
        ///	    or 60 seconds (WP, https://goo.gl/hTtMng)
        ///	  </para>
        /// </summary>
        Minute,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The hour (common symbol: h or hr, h being the international form of
        ///	    the symbol) is a unit of measurement of time. In modern usage, an
        ///	    hour comprises 60 minutes, or 3,600 seconds. It is approximately
        ///	    1/24 of a mean solar day (WP, http://bit.ly/1PhSkDP)
        ///	  </para>
        /// </summary>
        Hour,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A day is a unit of time. In common usage, it is an interval equal
        ///	    to 24 hours (WP, https://goo.gl/9VDGIY).
        ///	  </para>
        /// </summary>
        Day,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A week is a time unit equal to seven days. It is the standard time
        ///	    period used for cycles of work days and rest days in most parts of
        ///	    the world, mostly alongside (but not strictly part of) the
        ///	    Gregorian calendar (WP, https://goo.gl/rvUNel)
        ///	  </para>
        /// </summary>
        Week,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A month is a unit of time, used with calendars, which is
        ///	    approximately as long as a natural period related to the motion of
        ///	    the Moon (WP, https://goo.gl/2Qx7pQ)
        ///	  </para>
        /// </summary>
        Month,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A year is the orbital period of the Earth moving in its orbit
        ///	    around the Sun (WP, https://goo.gl/ZCCcCd)
        ///	  </para>
        /// </summary>
        Year,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A decade is a period of 10 years (WP, https://goo.gl/Jx5raD)
        ///	  </para>
        /// </summary>
        Decade,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A century is 100 years (WP, https://goo.gl/kyUuat)
        ///	  </para>
        /// </summary>
        Century,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A millennium (plural millennia) is a period of time equal to 1000
        ///	    years (WP, https://goo.gl/d4q6WJ)
        ///	  </para>
        /// </summary>
        Millenium,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TemporalResolutionType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TemporalResolutionType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Uri { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("modifyer", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Modifyer { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A temporal extent type.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TemporalResolutionTypeVocabulary", Namespace="")]
    public enum TemporalResolutionTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Second (symbol: s) (abbreviated s or sec) is the base
        ///	    unit of time in the International System of Units (SI).
        ///	    It is qualitatively defined as the second division of
        ///	    the hour by sixty, the first division by sixty being
        ///	    the minute. It is quantitatively defined in terms of a
        ///	    certain number of periods – about 9 billion – of a
        ///	    certain frequency of radiation from the caesium atom: a
        ///	    so-called atomic clock. Seconds may be measured using a
        ///	    mechanical, electric or atomic clock (WP,
        ///	    http://bit.ly/1VnHFrn)
        ///	  </para>
        /// </summary>
        Second,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The minute is a unit of time or of angle. As a unit of time, the
        ///	    minute is equal to 1/60 (the first sexagesimal fraction) of an hour
        ///	    or 60 seconds (WP, https://goo.gl/hTtMng)
        ///	  </para>
        /// </summary>
        Minute,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The hour (common symbol: h or hr, h being the international form of
        ///	    the symbol) is a unit of measurement of time. In modern usage, an
        ///	    hour comprises 60 minutes, or 3,600 seconds. It is approximately
        ///	    1/24 of a mean solar day (WP, http://bit.ly/1PhSkDP)
        ///	  </para>
        /// </summary>
        Hour,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A day is a unit of time. In common usage, it is an interval equal
        ///	    to 24 hours (WP, https://goo.gl/9VDGIY).
        ///	  </para>
        /// </summary>
        Day,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A week is a time unit equal to seven days. It is the standard time
        ///	    period used for cycles of work days and rest days in most parts of
        ///	    the world, mostly alongside (but not strictly part of) the
        ///	    Gregorian calendar (WP, https://goo.gl/rvUNel)
        ///	  </para>
        /// </summary>
        Week,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A month is a unit of time, used with calendars, which is
        ///	    approximately as long as a natural period related to the motion of
        ///	    the Moon (WP, https://goo.gl/2Qx7pQ)
        ///	  </para>
        /// </summary>
        Month,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A year is the orbital period of the Earth moving in its orbit
        ///	    around the Sun (WP, https://goo.gl/ZCCcCd)
        ///	  </para>
        /// </summary>
        Year,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A decade is a period of 10 years (WP, https://goo.gl/Jx5raD)
        ///	  </para>
        /// </summary>
        Decade,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A century is 100 years (WP, https://goo.gl/kyUuat)
        ///	  </para>
        /// </summary>
        Century,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A millennium (plural millennia) is a period of time equal to 1000
        ///	    years (WP, https://goo.gl/d4q6WJ)
        ///	  </para>
        /// </summary>
        Millenium,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SpaceContext", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SpaceContext
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper that can hold several bounding boxes.
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("BoundingBoxes", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("BoundingBox", Namespace="")]
        public System.Collections.Generic.List<BoundingBox> BoundingBoxes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="SpaceContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SpaceContext" /> class.</para>
        /// </summary>
        public SpaceContext()
        {
            this.BoundingBoxes = new System.Collections.Generic.List<BoundingBox>();
            this.Elevations = new System.Collections.Generic.List<Elevation>();
            this.Coordinates = new System.Collections.Generic.List<Coordinate>();
            this.Locations = new System.Collections.Generic.List<Location>();
            this.SpatialResolutions = new System.Collections.Generic.List<SpatialResolution>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wraper that can hold several elevation descriptions.
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Elevations", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Elevation", Namespace="")]
        public System.Collections.Generic.List<Elevation> Elevations { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Elevations-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Elevations collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElevationsSpecified
        {
            get
            {
                return (this.Elevations.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The coordinates element is a wrapper that
        ///				      can capture all sorts of coordinate types
        ///				      which specify locations for the object
        ///				      (curr supporting UTM coordinates)
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Coordinates", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Coordinate", Namespace="")]
        public System.Collections.Generic.List<Coordinate> Coordinates { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Coordinates-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Coordinates collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CoordinatesSpecified
        {
            get
            {
                return (this.Coordinates.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      Locations wraps up locations information contextualizing the object.
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Locations", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Location", Namespace="")]
        public System.Collections.Generic.List<Location> Locations { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Locations-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Locations collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationsSpecified
        {
            get
            {
                return (this.Locations.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around spatial aspects describing the spatial resolution
        ///				      contextualizing the object.
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("SpatialResolutions", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("SpatialResolution", Namespace="")]
        public System.Collections.Generic.List<SpatialResolution> SpatialResolutions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SpatialResolutions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SpatialResolutions collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpatialResolutionsSpecified
        {
            get
            {
                return (this.SpatialResolutions.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BoundingBox", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoundingBox
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The north most geographic coordinate that signifies the boundary of the data.
        ///						  It has to be given in decimal degree between -90 and +90 degree.
        ///						</para>
        /// <para xml:lang="en">
        ///	North most coordinate in a bounding box in decimal degree
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: -90.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("northBoundingCoordinate", Namespace="")]
        public decimal NorthBoundingCoordinate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The soutch most geographic coordinate that signifies the boundary of the data.
        ///						  It has to be given in decimal degree between -90 and +90 degree.
        ///						</para>
        /// <para xml:lang="en">
        ///	South most coordinate in a bounding box in decimal degree
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: -90.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("southBoundingCoordinate", Namespace="")]
        public decimal SouthBoundingCoordinate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The east most geographic coordinate that signifies the boundary of the data. It
        ///						  has to be given in decimal degree between -180 and +180 degree.
        ///						</para>
        /// <para xml:lang="en">
        ///	East most coordinate in a bounding box in decimal degree
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("eastBoundingCoordinate", Namespace="")]
        public decimal EastBoundingCoordinate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The west most geographic coordinate that signifies the boundary of the data. It
        ///						  has to be given in decimal degree between -180 and +180 degree.
        ///						</para>
        /// <para xml:lang="en">
        ///	West most coordinate in a bounding box in decimal degree
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("westBoundingCoordinate", Namespace="")]
        public decimal WestBoundingCoordinate { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Elevation", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Elevation
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The maximum elevation contextualizing the object
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("maximumElevation", Namespace="", DataType="decimal")]
        public decimal MaximumElevation { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The unit the maximum elevation is given in (e.g. Meters)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("maximumElevationUnit", Namespace="")]
        public ElevationUnit MaximumElevationUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The minimum elevation contextualizing the object
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minimumElevation", Namespace="", DataType="decimal")]
        public decimal MinimumElevation { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The unit the minimum elevation is given in (e.g. Meters)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minimumElevationUnit", Namespace="")]
        public ElevationUnit MinimumElevationUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The reference point for the given elevation
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("elevationDatum", Namespace="")]
        public ElevationDatum ElevationDatum { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ElevationUnit", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ElevationUnit
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The unit of the elevation
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ElevationUnitVocabulary", Namespace="")]
    public enum ElevationUnitVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A centimetre (international spelling as used by the
        ///	    International Bureau of Weights and Measures; symbol
        ///	    cm) or centimeter (American spelling) is a unit of
        ///	    length in the metric system, equal to one hundredth of
        ///	    a metre, centi being the SI prefix for a factor of
        ///	    1⁄100 (WP, https://goo.gl/rozVU8)
        ///	  </para>
        /// </summary>
        Centimetre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The metre, or meter (American spelling), [...] is the
        ///	    base unit of length in the International System of
        ///	    Units (SI). The SI unit symbol is m. The metre is
        ///	    defined as the distance travelled by light in a
        ///	    specific fraction – about one three-hundred millionth –
        ///	    of a second (WP, https://goo.gl/pK0Qil).
        ///	  </para>
        /// </summary>
        Metre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The kilometre (International spelling as used by the
        ///	    International Bureau of Weights and Measures; SI
        ///	    symbol: km; /ˈkɪləmiːtə/ or /kɪˈlɒmɪtə/) or kilometer
        ///	    (American spelling) is a unit of length in the metric
        ///	    system, equal to one thousand metres (kilo- being the
        ///	    SI prefix for 1000) (WP, https://goo.gl/bLxJL3)
        ///	  </para>
        /// </summary>
        Kilometre,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ElevationDatum", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ElevationDatum
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ElevationDatumVocabulary", Namespace="")]
    public enum ElevationDatumVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Above Mean Sea Level")]
        Above_Mean_Sea_Level,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Coordinate", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Coordinate
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The utm coordinate is a container that holds one utm coordinate relevant for
        ///						  the object.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("UtmCoordinate", Namespace="")]
        public UtmCoordinate UtmCoordinate { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UtmCoordinate", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UtmCoordinate
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The numerical zone corresponding to the central meridian
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("utmCoordinateZone", Namespace="", DataType="string")]
        public string UtmCoordinateZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The subzone letter corresponding to one of the 20 north-south divisions of the
        ///							UTM grid system
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("utmCoordinateSubZone", Namespace="", DataType="string")]
        public string UtmCoordinateSubZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The hemisphere. This can be N (North) or S (South)
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("utmCoordinateHemisphere", Namespace="")]
        public UtmCoordinateHemisphere UtmCoordinateHemisphere { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The distance east of the origin of the UTM zone
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("utmCoordinateEasting", Namespace="", DataType="decimal")]
        public decimal UtmCoordinateEasting { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The unit of the distance of the easting (Meter, Kilometer)
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("utmCoordinateEastingUnit", Namespace="")]
        public UtmCoordinateUnit UtmCoordinateEastingUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The distance north of the origin of the UTM zone
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("utmCoordinateNorthing", Namespace="", DataType="decimal")]
        public decimal UtmCoordinateNorthing { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The unit of the distance of the northing (Meter, Kilometer)
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("utmCoordinateNorthingUnit", Namespace="")]
        public UtmCoordinateUnit UtmCoordinateNorthingUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The datum (e.g. wgs84)
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("utmCoordinateGeodeticDatum", Namespace="")]
        public UtmCoordinateGeodeticDatum UtmCoordinateGeodeticDatum { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UtmCoordinateHemisphere", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UtmCoordinateHemisphere
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	Hemisphere of the utm coordinate
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UtmCoordinateHemisphereVocabulary", Namespace="")]
    public enum UtmCoordinateHemisphereVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Northern hemisphere
        ///	  </para>
        /// </summary>
        N,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Southern hemisphere
        ///	  </para>
        /// </summary>
        S,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UtmCoordinateUnit", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UtmCoordinateUnit
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	Utm coordinate easting and northing unit
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UtmCoordinateUnitVocabulary", Namespace="")]
    public enum UtmCoordinateUnitVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The metre, or meter (American spelling), [...] is the
        ///	    base unit of length in the International System of
        ///	    Units (SI). The SI unit symbol is m. The metre is
        ///	    defined as the distance travelled by light in a
        ///	    specific fraction – about one three-hundred millionth –
        ///	    of a second (WP, https://goo.gl/pK0Qil).
        ///	  </para>
        /// </summary>
        Metre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The kilometre (International spelling as used by the
        ///	    International Bureau of Weights and Measures; SI
        ///	    symbol: km; /ˈkɪləmiːtə/ or /kɪˈlɒmɪtə/) or kilometer
        ///	    (American spelling) is a unit of length in the metric
        ///	    system, equal to one thousand metres (kilo- being the
        ///	    SI prefix for 1000) (WP, https://goo.gl/bLxJL3)
        ///	  </para>
        /// </summary>
        Kilometre,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UtmCoordinateGeodeticDatum", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UtmCoordinateGeodeticDatum
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	Utm coordinate geodetic datum
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UtmCoordinateGeodeticDatumVocabulary", Namespace="")]
    public enum UtmCoordinateGeodeticDatumVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The datum (e.g. wgs84)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("wgs84")]
        Wgs84,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Location", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Location
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The name of the location (e.g. Leipzig, Cospudener See, Mount Everest)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("locationName", Namespace="", DataType="string")]
        public string LocationName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The type of the location. This could be e.g. City, Lake, Study Site etc.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("locationType", Namespace="")]
        public LocationType LocationType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  Name of the country of the given location name.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("countryName", Namespace="")]
        public CountryName CountryName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  Name of the continent of the given location.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("continentName", Namespace="")]
        public ContinentName ContinentName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LocationType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LocationType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LocationTypeVocabulary", Namespace="")]
    public enum LocationTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A country is a region that is identified as a distinct national
        ///	    entity in political geography. A country may be an independent
        ///	    sovereign state or one that is occupied by another state, as a
        ///	    non-sovereign or formerly sovereign political division, or a
        ///	    geographic region associated with sets of previously independent or
        ///	    differently associated people with distinct political
        ///	    characteristics. Regardless of the physical geography, in the
        ///	    modern internationally accepted legal definition as defined by the
        ///	    League of Nations in 1937 and reaffirmed by the United Nations in
        ///	    1945, a resident of a country is subject to the independent
        ///	    exercise of legal jurisdiction (Wikipedia, https://goo.gl/7j9rFh).
        ///	  </para>
        /// </summary>
        Country,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A state is a type of polity that is an organized political
        ///	    community living under a single system of government. States may or
        ///	    may not be sovereign. For instance, federated states are members of
        ///	    a federal union, and may have only partial sovereignty, but are,
        ///	    nonetheless, states. Some states are subject to external
        ///	    sovereignty or hegemony, in which ultimate sovereignty lies in
        ///	    another state. States that are sovereign are known as sovereign
        ///	    states (Wikipedia, https://goo.gl/c88kso).
        ///	  </para>
        /// </summary>
        State,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In geography, regions are areas broadly divided by physical
        ///	    characteristics (physical geography), human impact characteristics
        ///	    (human geography), and the interaction of humanity and the
        ///	    environment (environmental geography). Geographic regions and
        ///	    sub-regions are mostly described by their imprecisely defined, and
        ///	    sometimes transitory boundaries, except in human geography, where
        ///	    jurisdiction areas such as national borders are defined in law
        ///	    (Wikipedia, https://goo.gl/SjH2D).
        ///	  </para>
        /// </summary>
        Region,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An administrative division, unit, entity, area or region, also
        ///	    referred to as a subnational entity, constituent unit, or country
        ///	    subdivision, is a portion of a country or other region delineated
        ///	    for the purpose of administration. Administrative divisions are
        ///	    granted a certain degree of autonomy and are usually required to
        ///	    manage themselves through their own local governments. Countries
        ///	    are divided up into these smaller units to make managing their land
        ///	    and the affairs of their people easier. For example, a country may
        ///	    be divided into provinces, which, in turn, are divided into
        ///	    counties, which, in turn, may be divided in whole or in part into
        ///	    municipalities (Wikipedia, https://goo.gl/I6a8sI)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Administrative Division")]
        Administrative_Division,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A nature reserve (natural reserve, bioreserve, (natural/nature)
        ///	    preserve or (national/nature) conserve) is a protected area of
        ///	    importance for wildlife, flora, fauna or features of geological or
        ///	    other special interest, which is reserved and managed for
        ///	    conservation and to provide special opportunities for study or
        ///	    research. Nature reserves may be designated by government
        ///	    institutions in some countries, or by private landowners, such as
        ///	    charities and research institutions, regardless of nationality.
        ///	    Nature reserves fall into different IUCN categories depending on
        ///	    the level of protection afforded by local laws (Wikipedia,
        ///	    https://goo.gl/Zq6GvE).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Nature Reserve")]
        Nature_Reserve,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In geography, statistics and archaeology, a settlement, locality or
        ///	    populated place is a community in which people live. A settlement
        ///	    can range in size from a small number of dwellings grouped together
        ///	    to the largest of cities with surrounding urbanized areas.
        ///	    Settlements may include hamlets, villages, towns and cities
        ///	    (Wikipedia, https://goo.gl/GFWOx5).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Human Settlement")]
        Human_Settlement,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A mountain is a large landform that stretches above the surrounding
        ///	    land in a limited area, usually in the form of a peak. A mountain
        ///	    is generally steeper than a hill. Mountains are formed through
        ///	    tectonic forces or volcanism. These forces can locally raise the
        ///	    surface of the earth. Mountains erode slowly through the action of
        ///	    rivers, weather conditions, and glaciers. A few mountains are
        ///	    isolated summits, but most occur in huge mountain ranges
        ///	    (WP,http://bit.ly/1PA8Q42)
        ///	  </para>
        /// </summary>
        Mountain,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A stream is a body of water with a current, confined within a bed
        ///	    and banks. Depending on its location or certain characteristics, a
        ///	    stream may be referred to as a branch, brook, beck, burn, creek,
        ///	    crick, ghyll, gill, kill, lick, mill race, race, rill, river, syke,
        ///	    bayou, rivulet, streamage, wash, run, or runnel. (Wikipedia,
        ///	    https://goo.gl/zP1tA9)
        ///	  </para>
        /// </summary>
        Stream,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A lake is an area of variable size filled with water, localized in a basin,
        ///	    that is surrounded by land, apart from any river or other outlet that serves to
        ///	    feed or drain the lake. Lakes lie on land and are not part of the ocean (except
        ///	    for sea lochs in Scotland and Ireland), and therefore are distinct from
        ///	    lagoons, and are also larger and deeper than ponds, though there are no
        ///	    official or scientific definitions (WP, http://bit.ly/1J2qW84)
        ///	  </para>
        /// </summary>
        Lake,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A sea is a large body of salt water that is surrounded in whole or
        ///	    in part by land. More broadly, "the sea" is the interconnected
        ///	    system of Earth's salty, oceanic waters are considered as one
        ///	    global ocean or as several principal oceanic divisions (WP,
        ///	    http://bit.ly/1nMOfgy)
        ///	  </para>
        /// </summary>
        Sea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A forest is a large area of land covered with trees or other woody
        ///	    vegetation. (Wikipedia, https://goo.gl/z9v3my)
        ///	  </para>
        /// </summary>
        Forest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A park is an area of natural, semi-natural, or planted space set
        ///	    aside for human enjoyment and recreation or for the protection of
        ///	    wildlife or natural habitats. It may consist of grassy areas,
        ///	    rocks, soil, and trees, but may also contain buildings and other
        ///	    artifacts such as monuments, fountains or playground structures.
        ///	    (Wikipedia, https://goo.gl/prF8qX)
        ///	  </para>
        /// </summary>
        Park,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A study site (e.g. Jena Experiment)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Study Site")]
        Study_Site,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CountryName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountryName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A country name
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CountryNameVocabulary", Namespace="")]
    public enum CountryNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Andorra,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("United Arab Emirates")]
        United_Arab_Emirates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Afghanistan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Antigua and Barbuda")]
        Antigua_And_Barbuda,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Anguilla,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Albania,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Armenia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Angola,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Antarctica,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Argentina,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("American Samoa")]
        American_Samoa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Austria,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Australia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Aruba,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Cland Islands")]
        Cland_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Azerbaijan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Bosnia and Herzegovina")]
        Bosnia_And_Herzegovina,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Barbados,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Bangladesh,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Belgium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Burkina Faso")]
        Burkina_Faso,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Bulgaria,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Bahrain,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Burundi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Benin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Barthélemy")]
        Saint_Barthélemy,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Bermuda,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Brunei Darussalam")]
        Brunei_Darussalam,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Bolivia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Caribbean Netherlands")]
        Caribbean_Netherlands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Brazil,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Bahamas,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Bhutan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Bouvet Island")]
        Bouvet_Island,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Botswana,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Belarus,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Belize,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Canada,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Cocos Islands")]
        Cocos_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Democratic Republic of Congo")]
        Democratic_Republic_Of_Congo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Central African Republic")]
        Central_African_Republic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Congo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Switzerland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Coted Ivoire")]
        Coted_Ivoire,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Cook Islands")]
        Cook_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Chile,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Cameroon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        China,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Colombia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Costa Rica")]
        Costa_Rica,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Cuba,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Cape Verde")]
        Cape_Verde,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Curaçao,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Christmas Island")]
        Christmas_Island,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Cyprus,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Czech Republic")]
        Czech_Republic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Germany,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Djibouti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Denmark,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Dominica,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Dominican Republic")]
        Dominican_Republic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Algeria,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Ecuador,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Estonia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Egypt,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Western Sahara")]
        Western_Sahara,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Eritrea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Spain,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Ethiopia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Finland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Fiji,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Falkland Islands")]
        Falkland_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Federated States of Micronesia")]
        Federated_States_Of_Micronesia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Faroe Islands")]
        Faroe_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        France,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Gabon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("United Kingdom")]
        United_Kingdom,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Grenada,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Georgia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("French Guiana")]
        French_Guiana,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Guernsey,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Ghana,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Gibraltar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Greenland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Gambia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Guinea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Guadeloupe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Equatorial Guinea")]
        Equatorial_Guinea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Greece,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("South Georgia and the South Sandwich Islands")]
        South_Georgia_And_The_South_Sandwich_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Guatemala,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Guam,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Guinea-Bissau")]
        Guinea_Bissau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Guyana,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Hong Kong")]
        Hong_Kong,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Heard and Mc Donald Islands")]
        Heard_And_Mc_Donald_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Honduras,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Croatia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Haiti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Hungary,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Indonesia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Ireland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Israel,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Isle of Man")]
        Isle_Of_Man,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        India,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("British Indian Ocean Territory")]
        British_Indian_Ocean_Territory,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Iraq,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Iran,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Iceland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Italy,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Jersey,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Jamaica,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Jordan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Japan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Kenya,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Kyrgyzstan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Cambodia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Kiribati,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Comoros,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Kitts and Nevis")]
        Saint_Kitts_And_Nevis,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("North Korea")]
        North_Korea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("South Korea")]
        South_Korea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Kuwait,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Cayman Islands")]
        Cayman_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Kazakhstan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Lao Peoples Democratic Republic")]
        Lao_Peoples_Democratic_Republic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Lebanon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Lucia")]
        Saint_Lucia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Liechtenstein,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Sri Lanka")]
        Sri_Lanka,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Liberia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Lesotho,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Lithuania,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Luxembourg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Latvia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Libya,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Morocco,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Monaco,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Moldova,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Montenegro,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Martin")]
        Saint_Martin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Madagascar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Marshall Islands")]
        Marshall_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Macedonia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Mali,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Myanmar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Mongolia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Macau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Northern Mariana Islands")]
        Northern_Mariana_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Martinique,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Mauritania,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Montserrat,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Malta,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Mauritius,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Maldives,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Malawi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Mexico,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Malaysia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Mozambique,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Namibia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("New Caledonia")]
        New_Caledonia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Niger,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Norfolk Island")]
        Norfolk_Island,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Nigeria,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Nicaragua,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("The Netherlands")]
        The_Netherlands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Norway,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Nepal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Nauru,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Niue,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("New Zealand")]
        New_Zealand,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Oman,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Panama,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Peru,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("French Polynesia")]
        French_Polynesia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Papua New Guinea")]
        Papua_New_Guinea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Philippines,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Pakistan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Poland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("St Pierre and Miquelon")]
        St_Pierre_And_Miquelon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Pitcairn,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Puerto Rico")]
        Puerto_Rico,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("State of Palestine")]
        State_Of_Palestine,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Portugal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Palau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Paraguay,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Qatar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Reunion,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Romania,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Serbia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Russian Federation")]
        Russian_Federation,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Rwanda,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Saudi Arabia")]
        Saudi_Arabia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Solomon Islands")]
        Solomon_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Seychelles,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Sudan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Sweden,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Singapore,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Helena")]
        Saint_Helena,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Slovenia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Svalbard and Jan Mayen Islands")]
        Svalbard_And_Jan_Mayen_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Slovakia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Sierra Leone")]
        Sierra_Leone,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("San Marino")]
        San_Marino,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Senegal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Somalia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Surivalue,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("South Sudan")]
        South_Sudan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Sao Tome and Principe")]
        Sao_Tome_And_Principe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("El Salvador")]
        El_Salvador,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Sint Maarten")]
        Sint_Maarten,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Syria,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Swaziland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Turks and Caicos Islands")]
        Turks_And_Caicos_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Chad,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("French Southern Territories")]
        French_Southern_Territories,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Togo,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Thailand,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Tajikistan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Tokelau,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Timor Leste")]
        Timor_Leste,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Turkmenistan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Tunisia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Tonga,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Turkey,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Trinidad and Tobago")]
        Trinidad_And_Tobago,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Tuvalu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Taiwan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Tanzania,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Ukraine,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Uganda,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("United States Minor Outlying Islands")]
        United_States_Minor_Outlying_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("United States")]
        United_States,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Uruguay,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Uzbekistan,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Vatican,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Vincent and the Grenadines")]
        Saint_Vincent_And_The_Grenadines,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Venezuela,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Virgin Islands")]
        Virgin_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Vietnam,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Vanuatu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Wallis and Futuna Islands")]
        Wallis_And_Futuna_Islands,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Samoa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Yemen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Mayotte,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("South Africa")]
        South_Africa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Zimbabwe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Zambia,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ContinentName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContinentName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A continent name
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ContinentNameVocabulary", Namespace="")]
    public enum ContinentNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Africa is the world's second-largest and second-most-populous
        ///	    continent. At about 30.3 million km² (11.7 million square miles)
        ///	    including adjacent islands, it covers six percent of Earth's total
        ///	    surface area and 20.4 percent of its total land area. With 1.1
        ///	    billion people as of 2013, it accounts for about 15% of the world's
        ///	    human population. The continent is surrounded by the Mediterranean
        ///	    Sea to the north, both the Suez Canal and the Red Sea along the
        ///	    Sinai Peninsula to the northeast, the Indian Ocean to the
        ///	    southeast, and the Atlantic Ocean to the west. The continent
        ///	    includes Madagascar and various archipelagos. It contains 54 fully
        ///	    recognized sovereign states (countries), nine territories and two
        ///	    de facto independent states with limited or no recognition (WP,
        ///	    https://goo.gl/6O0z0l)
        ///	  </para>
        /// </summary>
        Africa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Asia is the Earth's largest and most populous continent, located
        ///	    primarily in the eastern and northern hemispheres. Asia covers an
        ///	    area of 44,579,000 square kilometers, about 30% of Earth's total
        ///	    land area and 8.7% of the Earth's total surface area. The
        ///	    continent, which has long been home to the majority of the human
        ///	    population[not in citation given], was the site of many of the
        ///	    first civilizations. Asia is notable for not only its overall large
        ///	    size and population, but unusually dense and large settlements as
        ///	    well as vast barely populated regions within the continent of 4.4
        ///	    billion people. The boundaries of Asia are traditionally determined
        ///	    as that of Eurasia, as there is no significant geographical
        ///	    separation between Asia and Europe. The most commonly accepted
        ///	    boundaries place Asia to the east of the Suez Canal, the Ural
        ///	    River, and the Ural Mountains, and south of the Caucasus Mountains
        ///	    and the Caspian and Black Seas. It is bounded on the east by the
        ///	    Pacific Ocean, on the south by the Indian Ocean and on the north by
        ///	    the Arctic Ocean (WP, https://goo.gl/tDYz2W).
        ///	  </para>
        /// </summary>
        Asia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Europe is a continent that comprises the westernmost part of
        ///	    Eurasia. Europe is bordered by the Arctic Ocean to the north, the
        ///	    Atlantic Ocean to the west, and the Mediterranean Sea to the south.
        ///	    To the east and southeast, Europe is generally considered as
        ///	    separated from Asia by the watershed divides of the Ural and
        ///	    Caucasus Mountains, the Ural River, the Caspian and Black Seas, and
        ///	    the waterways of the Turkish Straits. Yet the non-oceanic borders
        ///	    of Europe—a concept dating back to classical antiquity—are
        ///	    arbitrary; the primarily physiographic term "continent" as applied
        ///	    to Europe also incorporates cultural and political elements whose
        ///	    discontinuities are not always reflected by the continent's current
        ///	    boundaries (WP, https://goo.gl/J1cX4n).
        ///	  </para>
        /// </summary>
        Europe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    North America is a continent entirely within the Northern
        ///	    Hemisphere and almost all within the Western Hemisphere. It can
        ///	    also be considered a northern subcontinent of the Americas. It is
        ///	    bordered to the north by the Arctic Ocean, to the east by the
        ///	    Atlantic Ocean, to the west and south by the Pacific Ocean, and to
        ///	    the southeast by South America and the Caribbean Sea. North America
        ///	    covers an area of about 24,709,000 square kilometers (9,540,000
        ///	    square miles), about 16.5% of the earth's land area and about 4.8%
        ///	    of its total surface. North America is the third largest continent
        ///	    by area, following Asia and Africa, and the fourth by population
        ///	    after Asia, Africa, and Europe (WP, https://goo.gl/uWnL9L).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("North America")]
        North_America,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    South America is a continent situated in the Western Hemisphere,
        ///	    mostly in the Southern Hemisphere, with a relatively small portion
        ///	    in the Northern Hemisphere. It is also considered a subcontinent of
        ///	    the Americas, which is the term used in Spanish-speaking nations
        ///	    and most of South America. It is bordered on the west by the
        ///	    Pacific Ocean and on the north and east by the Atlantic Ocean;
        ///	    North America and the Caribbean Sea lie to the northwest. It
        ///	    includes twelve sovereign states – Argentina, Bolivia, Brazil,
        ///	    Chile, Colombia, Ecuador, Guyana, Paraguay, Peru, Suriname,
        ///	    Uruguay, and Venezuela – and two non-sovereign areas – French
        ///	    Guiana, an overseas department of France, and the Falkland Islands,
        ///	    a British Overseas Territory (though disputed by Argentina). In
        ///	    addition to this, the ABC islands of the Netherlands and Trinidad
        ///	    and Tobago may also be considered part of South America
        ///	    (WP, https://goo.gl/4KB2QT).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("South America")]
        South_America,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Oceania also known as Oceanica, is a region centred on the islands
        ///	    of the tropical Pacific Ocean. Opinions of what constitutes Oceania
        ///	    range from its three subregions of Melanesia, Micronesia, and
        ///	    Polynesia to, more broadly, the entire insular region between
        ///	    Southeast Asia and the Americas, including Australasia and the
        ///	    Malay Archipelago. The term is often used more specifically to
        ///	    denote a continent comprising Australia and proximate islands or
        ///	    biogeographically as a synonym for either the Australasian ecozone
        ///	    (Wallacea and Australasia) or the Pacific ecozone (Melanesia,
        ///	    Polynesia, and Micronesia, excluding both New Zealand and mainland
        ///	    New Guinea)(WP, https://goo.gl/s96DKL).
        ///	  </para>
        /// </summary>
        Oceania,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Antarctica is Earth's southernmost continent, containing the
        ///	    geographic South Pole. It is situated in the Antarctic region of
        ///	    the Southern Hemisphere, almost entirely south of the Antarctic
        ///	    Circle, and is surrounded by the Southern Ocean. At 14,000,000
        ///	    square kilometres (5,400,000 square miles), it is the fifth-largest
        ///	    continent in area after Asia, Africa, North America, and South
        ///	    America. For comparison, Antarctica is nearly twice the size of
        ///	    Australia. About 98% of Antarctica is covered by ice that averages
        ///	    1.9 km (1.2 mi; 6,200 ft) in thickness, which extends to all but
        ///	    the northernmost reaches of the Antarctic Peninsula (WP,
        ///	    https://goo.gl/Dq1DY)
        ///	  </para>
        /// </summary>
        Antarctica,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SpatialResolution", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SpatialResolution
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The spatial resolution type is a categorical value that describes the spatial
        ///						  resolution of the setup the object comes from (e.g. Point, Plot, Region,
        ///						  Continent, Global).
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("spatialExtentType", Namespace="")]
        public SpatialResolutionType SpatialExtentType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The spatial extent type is a categorical value that describes the spatial
        ///						  extent of the setup the object comes from (e.g. Point, Plot, Region,
        ///						  Continent, Global).
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("spatialResolutionType", Namespace="")]
        public SpatialResolutionType SpatialResolutionType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SpatialResolutionType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SpatialResolutionType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SpatialResolutionTypeVocabulary", Namespace="")]
    public enum SpatialResolutionTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A point is defined as: m^2
        ///	  </para>
        /// </summary>
        Point,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A plot is defined as: 1 m^2 - 0.01 km^2
        ///	  </para>
        /// </summary>
        Plot,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A regien is defined as: 0.01 km^2 - 10000 km^2
        ///	  </para>
        /// </summary>
        Region,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A continent is defined as: 10000 km^2 - 100000000 km^2
        ///	  </para>
        /// </summary>
        Continent,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Global is defined as: &gt; 100.000,000 km^2
        ///	  </para>
        /// </summary>
        Global,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SphereContext", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SphereContext
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      Spheres is a wrapper that holds all sorts of information about spheres that
        ///				      describe the object. Basically it describes where the measurements have
        ///				      been taken thus this is somewhat complementing the location part.
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Spheres", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Sphere", Namespace="")]
        public System.Collections.Generic.List<Sphere> Spheres { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="SphereContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SphereContext" /> class.</para>
        /// </summary>
        public SphereContext()
        {
            this.Spheres = new System.Collections.Generic.List<Sphere>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Sphere", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Sphere
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The atmosphere element is a wrapper around all qualitative and  quantitative
        ///						  values of the atmosphere.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Atmosphere", Namespace="")]
        public Atmosphere Atmosphere { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The hydrosphere element is a wrapper around all qualitative and quantitative
        ///						  values revolving around the hydrosphere the contextualize the object.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Hydrosphere", Namespace="")]
        public Hydrosphere Hydrosphere { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The pedosphere element is a wrapper around all
        ///						  qualitative and quantitative values of the pedosphere.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Pedosphere", Namespace="")]
        public Pedosphere Pedosphere { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The ecosphere element is a
        ///						  wrapper around all qualitative and quantitative
        ///						  values of the ecosphere.
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Ecosphere", Namespace="")]
        public Ecosphere Ecosphere { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Atmosphere", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Atmosphere
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							Named atmosphre layers is a wrapper around all sorts of named atmosphere
        ///							layers.
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("NamedAtmosphereLayers", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("NamedAtmosphereLayer", Namespace="")]
        public System.Collections.Generic.List<NamedAtmosphereLayer> NamedAtmosphereLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NamedAtmosphereLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NamedAtmosphereLayers collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NamedAtmosphereLayersSpecified
        {
            get
            {
                return (this.NamedAtmosphereLayers.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Atmosphere" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Atmosphere" /> class.</para>
        /// </summary>
        public Atmosphere()
        {
            this.NamedAtmosphereLayers = new System.Collections.Generic.List<NamedAtmosphereLayer>();
            this.NumericAtmosphereLayers = new System.Collections.Generic.List<NumericAtmosphereLayer>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							Numeric atmosphere layers is a wrapper around all sorts of numeric aspects of
        ///							atmospheric layers.
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("NumericAtmosphereLayers", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("NumericAtmosphereLayer", Namespace="")]
        public System.Collections.Generic.List<NumericAtmosphereLayer> NumericAtmosphereLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumericAtmosphereLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NumericAtmosphereLayers collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumericAtmosphereLayersSpecified
        {
            get
            {
                return (this.NumericAtmosphereLayers.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NamedAtmosphereLayer", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NamedAtmosphereLayer
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The name of an atmopshere layer. This can be for example strato, tropo, meso,
        ///								    ionosphere
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("atmosphereLayerName", Namespace="")]
        public AtmosphereLayerName AtmosphereLayerName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AtmosphereLayerName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AtmosphereLayerName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AtmosphereLayerNameVocabulary", Namespace="")]
    public enum AtmosphereLayerNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The troposphere is the lowest portion of Earth's atmosphere, and is
        ///	    also where all weather takes place. It contains approximately 75%
        ///	    of the atmosphere's mass and 99% of its water vapour and
        ///	    aerosols. The average depths of the troposphere are 20 km (12
        ///	    mi) in the tropics, 17 km (11 mi) in the mid latitudes, and 7 km
        ///	    (4.3 mi) in the polar regions in winter. The lowest part of the
        ///	    troposphere, where friction with the Earth's surface influences air
        ///	    flow, is the planetary boundary layer. This layer is typically a
        ///	    few hundred meters to 2 km (1.2 mi) deep depending on the landform
        ///	    and time of day. Atop the troposphere is the tropopause, which is
        ///	    the border between the troposphere and stratosphere. The tropopause
        ///	    is an inversion layer, where the air temperature ceases to decline
        ///	    with height and remains constant through its thickness (WP,
        ///	    https://goo.gl/Eb33Ow)
        ///	  </para>
        /// </summary>
        Troposphere,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The stratosphere is the second major layer of Earth's atmosphere,
        ///	    just above the troposphere, and below the mesosphere. About 20% of
        ///	    the atmosphere's mass is contained in the stratosphere. The
        ///	    stratosphere is stratified in temperature, with warmer layers
        ///	    higher and cooler layers closer to the Earth. The increase of
        ///	    temperature with altitude, is a result of the absorption of the
        ///	    Sun's ultraviolet radiation by ozone. This is in contrast to the
        ///	    troposphere, near the Earth's surface, where temperatures decreases
        ///	    with altitude. The border between the troposphere and stratosphere,
        ///	    the tropopause, marks where this temperature inversion begins. Near
        ///	    the equator, the stratosphere starts at 18 km (59,000 ft; 11 mi);
        ///	    at mid latitudes, it starts at 10–13 km (33,000–43,000 ft; 6.2–8.1
        ///	    mi) and ends at 50 km (160,000 ft; 31 mi); at the poles, it starts
        ///	    at about 8 km (26,000 ft; 5.0 mi). Temperatures vary within the
        ///	    stratosphere with the seasons, in particular with the polar night
        ///	    (winter). The greatest variation of temperature, takes place over
        ///	    the poles in the lower stratosphere; those variations are largely
        ///	    steady at lower latitudes and higher altitudes (WP,
        ///	    https://goo.gl/HNtVtI)
        ///	  </para>
        /// </summary>
        Stratosphere,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The mesosphere is the layer of the Earth's atmosphere that is
        ///	    directly above the stratopause and directly below the mesopause. In
        ///	    the mesosphere temperature decreases as the altitude increases. The
        ///	    upper boundary of the mesosphere is the mesopause, which can be the
        ///	    coldest naturally occurring place on Earth with temperatures below
        ///	    130 K (−226 °F; −143 °C). The exact upper and lower boundaries of
        ///	    the mesosphere vary with latitude and with season, but the lower
        ///	    boundary of the mesosphere is usually located at heights of about
        ///	    50 kilometres (160,000 ft; 31 mi) above the Earth's surface and the
        ///	    mesopause is usually at heights near 100 kilometres (62 mi), except
        ///	    at middle and high latitudes in summer where it descends to heights
        ///	    of about 85 kilometres (53 mi) (WP, https://goo.gl/zQEJ1c)
        ///	  </para>
        /// </summary>
        Mesosphere,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The thermosphere is the layer of the Earth's atmosphere directly
        ///	    above the mesosphere and directly below the exosphere. Within this
        ///	    layer of the atmosphere, ultraviolet radiation causes
        ///	    photoionization/photodissociation of molecules, creating the ions
        ///	    in the ionosphere. Called from the Greek θερμός (pronounced
        ///	    thermos) meaning heat, the thermosphere begins about 85 kilometres
        ///	    (53 mi) above the Earth. At these high altitudes, the residual
        ///	    atmospheric gases sort into strata according to molecular mass (see
        ///	    turbosphere). Thermospheric temperatures increase with altitude due
        ///	    to absorption of highly energetic solar radiation. Temperatures are
        ///	    highly dependent on solar activity, and can rise to 2,000 °C (3,630
        ///	    °F). Radiation causes the atmosphere particles in this layer to
        ///	    become electrically charged (see ionosphere), enabling radio waves
        ///	    to bounce off and be received beyond the horizon. In the exosphere,
        ///	    beginning at 500 to 1,000 kilometres (310 to 620 mi) above the
        ///	    Earth's surface, the atmosphere turns into space (WP,
        ///	    https://goo.gl/4Y54db)
        ///	  </para>
        /// </summary>
        Thermosphere,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The exosphere (Ancient Greek: ἔξω éxō "outside, external, beyond",
        ///	    Ancient Greek: σφαῖρα sphaĩra "sphere") is a thin, atmosphere-like
        ///	    volume surrounding a planet or natural satellite where molecules
        ///	    are gravitationally bound to that body, but where the density is
        ///	    too low for them to behave as a gas by colliding with each
        ///	    other. In the case of bodies with substantial atmospheres, such
        ///	    as Earth's atmosphere, the exosphere is the uppermost layer, where
        ///	    the atmosphere thins out and merges with interplanetary space. It
        ///	    is located directly above the thermosphere (WP,
        ///	    https://goo.gl/0NLIfC).
        ///	  </para>
        /// </summary>
        Exosphere,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The ionosphere is a region of Earth's upper atmosphere, from about
        ///	    60 km (37 mi) to 1,000 km (620 mi) altitude, and includes the
        ///	    thermosphere and parts of the mesosphere and exosphere. It is
        ///	    ionized by solar radiation, plays an important part in atmospheric
        ///	    electricity and forms the inner edge of the magnetosphere. It has
        ///	    practical importance because, among other functions, it influences
        ///	    radio propagation to distant places on the Earth (WP,
        ///	    https://goo.gl/sZlqP9)
        ///	  </para>
        /// </summary>
        Ionosphere,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NumericAtmosphereLayer", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NumericAtmosphereLayer
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The minimum height in the atmosphere relevant for the object.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minimumAtmosphereHeight", Namespace="", DataType="decimal")]
        public decimal MinimumAtmosphereHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The unit the minimum height in atmosphere is given in (Meters, Kilometers).
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minimumAtmosphereHeightUnit", Namespace="")]
        public AtmosphereHeightUnit MinimumAtmosphereHeightUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The maximum height in the atmosphere relevant for the object.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("maximumAtmosphereHeight", Namespace="", DataType="decimal")]
        public decimal MaximumAtmosphereHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The unit the maximum height in atmosphere is given in (Meters, Kilometers).
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("maximumAtmosphereHeightUnit", Namespace="")]
        public AtmosphereHeightUnit MaximumAtmosphereHeightUnit { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AtmosphereHeightUnit", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AtmosphereHeightUnit
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	Atmosphere height unit
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AtmosphereHeightUnitVocabulary", Namespace="")]
    public enum AtmosphereHeightUnitVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The metre, or meter (American spelling), [...] is the
        ///	    base unit of length in the International System of
        ///	    Units (SI). The SI unit symbol is m. The metre is
        ///	    defined as the distance travelled by light in a
        ///	    specific fraction – about one three-hundred millionth –
        ///	    of a second (WP, https://goo.gl/pK0Qil).
        ///	  </para>
        /// </summary>
        Metre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The kilometre (International spelling as used by the
        ///	    International Bureau of Weights and Measures; SI
        ///	    symbol: km; /ˈkɪləmiːtə/ or /kɪˈlɒmɪtə/) or kilometer
        ///	    (American spelling) is a unit of length in the metric
        ///	    system, equal to one thousand metres (kilo- being the
        ///	    SI prefix for 1000) (WP, https://goo.gl/bLxJL3)
        ///	  </para>
        /// </summary>
        Kilometre,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Hydrosphere", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Hydrosphere
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The hydrosphere compartments captures all compartments that are described
        ///							regarding the hydrosphere (River, Lake, Sea)
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("HydrosphereCompartments", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("HydrosphereCompartment", Namespace="")]
        public System.Collections.Generic.List<HydrosphereCompartment> HydrosphereCompartments { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Hydrosphere" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Hydrosphere" /> class.</para>
        /// </summary>
        public Hydrosphere()
        {
            this.HydrosphereCompartments = new System.Collections.Generic.List<HydrosphereCompartment>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HydrosphereCompartment", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HydrosphereCompartment
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The river element is a wrapper
        ///								    around all qualitative and quantitative
        ///								    values of a river.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("River", Namespace="")]
        public River River { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The lake element is a wrapper around
        ///								    all qualitative and quantitative values of a lake.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Lake", Namespace="")]
        public Lake Lake { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The sea element is a wrapper around all
        ///								    qualitative and quantitative values of the sea.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Sea", Namespace="")]
        public Sea Sea { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("River", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class River
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The river zones is a wrapper around all
        ///									  qualitative and quantitative values of the zones of a
        ///									  river.
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("NamedRiverZones", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("NamedRiverZone", Namespace="")]
        public System.Collections.Generic.List<NamedRiverZone> NamedRiverZones { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="River" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="River" /> class.</para>
        /// </summary>
        public River()
        {
            this.NamedRiverZones = new System.Collections.Generic.List<NamedRiverZone>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NamedRiverZone", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NamedRiverZone
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The longitudinal river zone contains one
        ///										      vertical river zone describing the search
        ///										      object (Rhitron, Crenon or Potamon)
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("longitudinalRiverZone", Namespace="")]
        public LongitudinalRiverZone LongitudinalRiverZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The vertical river zone
        ///										      contains one vertical river zone
        ///										      describing the object (Floodplain,
        ///										      River bank, River Water, River Bed)
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("verticalRiverZone", Namespace="")]
        public VerticalRiverZone VerticalRiverZone { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LongitudinalRiverZone", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LongitudinalRiverZone
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A longitudinal river zone
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LongitudinalRiverZoneVocabulary", Namespace="")]
    public enum LongitudinalRiverZoneVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The crenon is the uppermost zone at the source of the river. It is
        ///	    further divided into the eucrenon (spring or boil zone) and the
        ///	    hypocrenon (brook or headstream zone). These areas have low
        ///	    temperatures, reduced oxygen content and slow moving water (WP,
        ///	    https://goo.gl/HcsQwQ)
        ///	  </para>
        /// </summary>
        Crenon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The rhithron is the upstream portion of the river that follows the
        ///	    crenon. It has relatively cool temperatures, high oxygen levels,
        ///	    and fast, turbulent, swift flow (WP, https://goo.gl/HcsQwQ).
        ///	  </para>
        /// </summary>
        Rhitron,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The potamon is the remaining downstream stretch of river. It has
        ///	    warmer temperatures, lower oxygen levels, slow flow and sandier
        ///	    bottoms (WP, https://goo.gl/HcsQwQ).
        ///	  </para>
        /// </summary>
        Potamon,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VerticalRiverZone", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerticalRiverZone
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A vertical river zone
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VerticalRiverZoneVocabulary", Namespace="")]
    public enum VerticalRiverZoneVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A floodplain or flood plain is an area of land adjacent to a stream
        ///	    or river that stretches from the banks of its channel to the base
        ///	    of the enclosing valley walls and experiences flooding during
        ///	    periods of high discharge. It includes the floodway, which consists
        ///	    of the stream channel and adjacent areas that actively carry flood
        ///	    flows downstream, and the flood fringe, which are areas inundated
        ///	    by the flood, but which do not experience a strong current. In
        ///	    other words, a floodplain is an area near a river or a stream which
        ///	    floods when the water level reaches flood stage (WP,
        ///	    https://goo.gl/a9SZV0).
        ///	  </para>
        /// </summary>
        Floodplain,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The bank of a river
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("River Bank")]
        River_Bank,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The water column of a river
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("River Water Column")]
        River_Water_Column,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The bed of a river
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("River Bed")]
        River_Bed,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Lake", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Lake
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The lake zones is a wrapper around
        ///									  all qualitative and quantitative values of the zones
        ///									  of a lake.
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("NamedLakeZones", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("NamedLakeZone", Namespace="")]
        public System.Collections.Generic.List<NamedLakeZone> NamedLakeZones { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Lake" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Lake" /> class.</para>
        /// </summary>
        public Lake()
        {
            this.NamedLakeZones = new System.Collections.Generic.List<NamedLakeZone>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NamedLakeZone", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NamedLakeZone
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      Benthic lake zones contains one
        ///										      benthic zone describing the search
        ///										      object (lithoral, benthic,
        ///										      profundal).
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("benthicLakeZone", Namespace="")]
        public BenthicLakeZone BenthicLakeZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      Pelagig lake zone contains one pelagig zone
        ///										      describing the object (epilimnion, metalimnion,
        ///										      hypolimnion).
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("pelagicLakeZone", Namespace="")]
        public PelagicLakeZone PelagicLakeZone { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BenthicLakeZone", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BenthicLakeZone
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A benthic lake zone
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BenthicLakeZoneVocabulary", Namespace="")]
    public enum BenthicLakeZoneVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The littoral zone is the part of a sea, lake or river that is close
        ///	    to the shore. In coastal environments the littoral zone extends
        ///	    from the high water mark, which is rarely inundated, to shoreline
        ///	    areas that are permanently submerged (WP, https://goo.gl/S0iKd5)
        ///	  </para>
        /// </summary>
        Litoral,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The benthic zone is the ecological region at the lowest level of a body
        ///	    of water such as an ocean or a lake, including the sediment surface and
        ///	    some sub-surface layers. Organisms living in this zone are called
        ///	    benthos, e.g. the benthic invertebrate community, including crustaceans
        ///	    and polychaetes. The organisms generally live in close relationship
        ///	    with the substrate bottom and many are permanently attached to the
        ///	    bottom. The superficial layer of the soil lining the given body of
        ///	    water, the benthic boundary layer, is an integral part of the benthic
        ///	    zone, as it greatly influences the biological activity that takes place
        ///	    there. Examples of contact soil layers include sand bottoms, rocky
        ///	    outcrops, coral, and bay mud (WP, https://goo.gl/jn0AVM)
        ///	  </para>
        /// </summary>
        Benthic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The profundal zone is a deep zone of an inland body of freestanding
        ///	    water, such as a lake or pond, located below the range of effective
        ///	    light penetration. This is typically below the thermocline, the
        ///	    vertical zone in the water through which temperature drops rapidly
        ///	    (WP, https://goo.gl/VCovHK).
        ///	  </para>
        /// </summary>
        Profundal,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PelagicLakeZone", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PelagicLakeZone
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A pelagic lake zone
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PelagicLakeZoneVocabulary", Namespace="")]
    public enum PelagicLakeZoneVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The epilimnion or surface layer is the top-most layer in a
        ///	    thermally stratified lake, occurring above the deeper hypolimnion.
        ///	    It is warmer and typically has a higher pH and higher dissolved
        ///	    oxygen concentration than the hypolimnion (WP,
        ///	    https://goo.gl/wmErNA)
        ///	  </para>
        /// </summary>
        Epilimnion,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A thermocline (sometimes metalimnion in lakes) is a thin but
        ///	    distinct layer in a large body of fluid (e.g. water, such as an
        ///	    ocean or lake, or air, such as an atmosphere) in which temperature
        ///	    changes more rapidly with depth than it does in the layers above or
        ///	    below. In the ocean, the thermocline divides the upper mixed layer
        ///	    from the calm deep water below (WP, https://goo.gl/b0vqZM).
        ///	  </para>
        /// </summary>
        Metalimnion,
        
        /// <summary>
        /// </summary>
        Hypolimnion,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Sea", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Sea
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The sea zones is a wrapper around all
        ///									  qualitative and quantitative values of
        ///									  the zones of a sea.
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("NamedSeaZones", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("NamedSeaZone", Namespace="")]
        public System.Collections.Generic.List<NamedSeaZone> NamedSeaZones { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Sea" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Sea" /> class.</para>
        /// </summary>
        public Sea()
        {
            this.NamedSeaZones = new System.Collections.Generic.List<NamedSeaZone>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NamedSeaZone", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NamedSeaZone
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A benthic sea zone (litoral, neritic,
        ///										      bathyal, abyssal, hadal)
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("benthicSeaZone", Namespace="")]
        public BenthicSeaZone BenthicSeaZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A pelagic sea zone (epipelagic,
        ///										      mesopelagic, bathypelagic).
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("pelagicSeaZone", Namespace="")]
        public PelagicSeaZone PelagicSeaZone { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BenthicSeaZone", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BenthicSeaZone
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A benthic sea zone
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BenthicSeaZoneVocabulary", Namespace="")]
    public enum BenthicSeaZoneVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The littoral zone is the part of a sea, lake or river that is close
        ///	    to the shore. In coastal environments the littoral zone extends
        ///	    from the high water mark, which is rarely inundated, to shoreline
        ///	    areas that are permanently submerged (WP, https://goo.gl/S0iKd5)
        ///	  </para>
        /// </summary>
        Litoral,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The neritic zone is the relatively shallow part of the ocean above
        ///	    the drop-off of the continental shelf, approximately 200 metres
        ///	    (660 ft) in depth. From the point of view of marine biology
        ///	    it forms a relatively stable and well-illuminated environment for
        ///	    marine life, from plankton up to large fish and corals, while
        ///	    physical oceanography sees it as where the oceanic system interacts
        ///	    with the coast (WP, https://goo.gl/mMyNAU).
        ///	  </para>
        /// </summary>
        Neritic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The bathyal zone or bathypelagic (also known as midnight zone) is
        ///	    the part of the pelagic zone that extends from a depth of 1000 to
        ///	    4000 meters (3300 to 13000 feet) below the ocean surface (WP,
        ///	    https://goo.gl/yHvRHV)
        ///	  </para>
        /// </summary>
        Bathyal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The abyssal zone or abyssopelagic is a layer of the pelagic zone of
        ///	    the ocean. At depths of 4,000 to 6,000 metres (13,123 to 19,685
        ///	    feet), this zone remains in perpetual darkness and never receives
        ///	    daylight. These regions are also characterised by continuous cold
        ///	    and lack of nutrients. (WP, https://goo.gl/uMOJ5W)
        ///	  </para>
        /// </summary>
        Abyssal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The hadal zone, also known as the hadopelagic zone and trench zone,
        ///	    is the delineation for the deepest trenches in the ocean. This zone
        ///	    is found from a depth of around 6,000 metres (20,000 ft) to the
        ///	    bottom of the ocean. The hadal zone has low population and low
        ///	    diversity of marine life (WP, https://goo.gl/bpoViO).
        ///	  </para>
        /// </summary>
        Hadal,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PelagicSeaZone", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PelagicSeaZone
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A pelagic sea zone
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PelagicSeaZoneVocabulary", Namespace="")]
    public enum PelagicSeaZoneVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The surface layer of the ocean is known as the epipelagic zone and
        ///	    extends from the surface to 200 meters (656 feet). It is also known
        ///	    as the sunlight zone because this is where most of the visible
        ///	    light exists. With the light come heat. This heat is responsible
        ///	    for the wide range of temperatures that occur in this zone (WP,
        ///	    http://goo.gl/Pr4sT)
        ///	  </para>
        /// </summary>
        Epipelagic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Below the epipelagic zone is the mesopelagic zone, extending from
        ///	    200 meters (656 feet) to 1,000 meters (3,281 feet). The mesopelagic
        ///	    zone is sometimes referred to as the twilight zone or the midwater
        ///	    zone. The light that penetrates to this depth is extremely faint.
        ///	    It is in this zone that we begin to see the twinkling lights of
        ///	    bioluminescent creatures. A great diversity of strange and bizarre
        ///	    fishes can be found here (WP, http://goo.gl/Pr4sT).
        ///	  </para>
        /// </summary>
        Mesopelagic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    It is sometimes referred to as the midnight zone or the dark zone.
        ///	    This zone extends from 1,000 meters (3,281 feet) down to 4,000
        ///	    meters (13,124 feet). Here the only visible light is that produced
        ///	    by the creatures themselves. The water pressure at this depth is
        ///	    immense, reaching 5,850 pounds per square inch. In spite of the
        ///	    pressure, a surprisingly large number of creatures can be found
        ///	    here. Sperm whales can dive down to this level in search of food.
        ///	    Most of the animals that live at these depths are black or red in
        ///	    color due to the lack of light (WP, http://goo.gl/Pr4sT).
        ///	  </para>
        /// </summary>
        Bathypelagic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The abyssopelagic zone, also known as the abyssal zone or simply as
        ///	    the abyss. It extends from 4,000 meters (13,124 feet) to 6,000
        ///	    meters (19,686 feet). The name comes from a Greek word meaning "no
        ///	    bottom". The water temperature is near freezing, and there is no
        ///	    light at all. Very few creatures can be found at these crushing
        ///	    depths. Most of these are invertebrates such as basket stars and
        ///	    tiny squids. Three-quarters of the ocean floor lies within this
        ///	    zone. The deepest fish ever discovered was found in the Puerto Rico
        ///	    Trench at a depth of 27,460 feet (8,372 meters)
        ///	    (WP, http://goo.gl/Pr4sT).
        ///	  </para>
        /// </summary>
        Abyssopelagic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Beyond the abyssopelagic zone lies the forbidding hadalpelagic
        ///	    zone. This layer extends from 6,000 meters (19,686 feet) to the
        ///	    bottom of the deepest parts of the ocean. These areas are mostly
        ///	    found in deep water trenches and canyons. The deepest point in the
        ///	    ocean is located in the Mariana Trench off the coast of Japan at
        ///	    35,797 feet (10,911 meters). The temperature of the water is just
        ///	    above freezing, and the pressure is an incredible eight tons per
        ///	    square inch. That is approximately the weight of 48 Boeing 747
        ///	    jets. In spite of the pressure and temperature, life can still be
        ///	    found here. Invertebrates such as starfish and tube worms can
        ///	    thrive at these depths (WP, http://goo.gl/Pr4sT).
        ///	  </para>
        /// </summary>
        Hadopelagic,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Pedosphere", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Pedosphere
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The pedosphere compartements captures
        ///							all compartements that are described regarding the
        ///							pedosphere (Soil)
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("PedosphereCompartments", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PedosphereCompartment", Namespace="")]
        public System.Collections.Generic.List<PedosphereCompartment> PedosphereCompartments { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Pedosphere" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Pedosphere" /> class.</para>
        /// </summary>
        public Pedosphere()
        {
            this.PedosphereCompartments = new System.Collections.Generic.List<PedosphereCompartment>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PedosphereCompartment", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PedosphereCompartment
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The soil element captures all qualitative and
        ///								    quantitative characteristics regarding the pedosphere
        ///								    compartement soil
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Soil", Namespace="")]
        public Soil Soil { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Soil", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Soil
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The soil layers element is a
        ///									  wrapper around all qualitative
        ///									  and quantitative values of the
        ///									  named pedosphere layers.
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("NamedSoilLayers", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("NamedSoilLayer", Namespace="")]
        public System.Collections.Generic.List<NamedSoilLayer> NamedSoilLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NamedSoilLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NamedSoilLayers collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NamedSoilLayersSpecified
        {
            get
            {
                return (this.NamedSoilLayers.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Soil" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Soil" /> class.</para>
        /// </summary>
        public Soil()
        {
            this.NamedSoilLayers = new System.Collections.Generic.List<NamedSoilLayer>();
            this.NumericSoilLayers = new System.Collections.Generic.List<NumericSoilLayer>();
            this.SoilTextures = new System.Collections.Generic.List<SoilTexture>();
            this.SoilMorphologies = new System.Collections.Generic.List<SoilMorphology>();
            this.SoilAcidities = new System.Collections.Generic.List<SoilAcidity>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The numeric soil layers
        ///									  is an element to capture layers of the
        ///									  soil numerically
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("NumericSoilLayers", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("NumericSoilLayer", Namespace="")]
        public System.Collections.Generic.List<NumericSoilLayer> NumericSoilLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumericSoilLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NumericSoilLayers collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumericSoilLayersSpecified
        {
            get
            {
                return (this.NumericSoilLayers.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  Caputures all qualitative and quantitative characteristics regarding soil texture.
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("SoilTextures", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("SoilTexture", Namespace="")]
        public System.Collections.Generic.List<SoilTexture> SoilTextures { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoilTextures-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoilTextures collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoilTexturesSpecified
        {
            get
            {
                return (this.SoilTextures.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  The soil morphologies according to
        ///									  the World Reference Base for Soil Resources
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("SoilMorphologies", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("SoilMorphology", Namespace="")]
        public System.Collections.Generic.List<SoilMorphology> SoilMorphologies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoilMorphologies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoilMorphologies collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoilMorphologiesSpecified
        {
            get
            {
                return (this.SoilMorphologies.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  Caputres all qualitative and quantitative
        ///									  characteristics regarding soil acidity
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("SoilAcidities", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("SoilAcidity", Namespace="")]
        public System.Collections.Generic.List<SoilAcidity> SoilAcidities { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoilAcidities-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoilAcidities collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoilAciditiesSpecified
        {
            get
            {
                return (this.SoilAcidities.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NamedSoilLayer", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NamedSoilLayer
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The name of a soil horizon.
        ///										      O, A, B, C, R horizon
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("soilHorizon", Namespace="")]
        public SoilHorizon SoilHorizon { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilHorizon", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoilHorizon
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A soil horizon
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilHorizonVocabulary", Namespace="")]
    public enum SoilHorizonVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    This layer generally forms above the mineral soil or occurs in an
        ///	    organic soil profile. The "O" stands for organic matter. It is a
        ///	    surface layer dominated by the presence of large amounts of organic
        ///	    material derived from dead plant and/or animal residues which is in
        ///	    varying stages of decomposition. The O horizon is generally absent
        ///	    in grassland regions. The O horizon usually occurs in forested
        ///	    areas and is commonly referred to as the forest floor. The O
        ///	    horizon should be considered distinct from the layer of leaf litter
        ///	    covering many heavily vegetated areas, which contains no weathered
        ///	    mineral particles and is not part of the soil itself (WP,
        ///	    https://goo.gl/fHikwb)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("O Horizon")]
        O_Horizon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The A horizon is the topmost mineral horizon, often referred to as
        ///	    the 'topsoil'. This layer generally contains enough partially
        ///	    decomposed (humified) organic matter to give the soil a color
        ///	    darker than that of the lower horizons. The A horizons are often
        ///	    coarser in texture, having lost some of the finer materials by
        ///	    translocation to lower horizons and by erosion. This layer is known
        ///	    as the zone in which the most biological activity occurs. Soil
        ///	    organisms such as earthworms, potworms (enchytraeids), arthropods,
        ///	    nematodes, fungi, and many species of bacteria and archaea are
        ///	    concentrated here, often in close association with plant roots.
        ///	    Thus the A horizon may be referred to as the biomantle. However,
        ///	    since biological activity extends far deeper into the soil, it
        ///	    cannot be used as a chief distinguishing feature of an A horizon
        ///	    (WP, https://goo.gl/fHikwb).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("A Horizon")]
        A_Horizon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    "E", being short for eluviated, is most commonly used to label a
        ///	    horizon that has been significantly leached of clay, iron, and
        ///	    aluminum oxides, which leaves a concentration of resistant
        ///	    minerals, such as quartz, in the sand and silt sizes. These are
        ///	    present only in older, well-developed soils, and generally occur
        ///	    between the A and B horizons.The E horizon often has a pale color
        ///	    that is generally lighter in color than either the horizon above or
        ///	    below it. E horizons are commonly found in soils developed under
        ///	    forests, but are rare in soils developed under grasslands. In
        ///	    regions where this designation is not employed, leached layers are
        ///	    classified firstly as an A or B according to other characteristics,
        ///	    and then appended with the designation "e" (see the section below
        ///	    on horizon suffixes). In soils that contain gravels, due to animal
        ///	    bioturbation, a stonelayer commonly forms near or at the base of
        ///	    the E horizon (WP, https://goo.gl/fHikwb).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("E Horizon")]
        E_Horizon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    B horizons form below an O, A, or E horizon and they have undergone
        ///	    sufficient changes during soil genesis, such that the properties of
        ///	    their original parent material are no longer discernible. The B
        ///	    horizon is commonly referred to as the "subsoil". In humid regions,
        ///	    B horizons are the layers of maximum accumulation of materials such
        ///	    as silicate clays, iron (Fe) and aluminum (Al) oxides, and organic
        ///	    material. These materials typically accumulate through a process
        ///	    termed illuviation, wherein the materials gradually wash in from
        ///	    the overlying horizons. Accordingly, this layer is also referred to
        ///	    as the "illuviated" horizon or the "zone of accumulation". In
        ///	    addition, it is defined as having a distinctly different structure
        ///	    or consistency than the horizon(s) above and the horizon(s) below.
        ///	    The B horizon may also have stronger colors (higher chroma) than
        ///	    the A horizon. In arid and semiarid regions, calcium carbonate or
        ///	    calcium sulfate may accumulate in the B horizon (WP,
        ///	    https://goo.gl/fHikwb).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("B Horizon")]
        B_Horizon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The C horizon (parent material) is below the B Horizon. This layer
        ///	    is little affected by soil-forming processes and they thus have a
        ///	    lack of pedological development. In other words, the C horizon is
        ///	    the unconsolidated material underlying the solum (A and B
        ///	    horizons). It may or may not be the same as the parent material
        ///	    from which the solum formed. The C horizon forms as the R horizon
        ///	    weathers and rocks break up into smaller particles. The C horizon
        ///	    is below the zones of greatest biological activity and it has not
        ///	    been sufficiently altered by soil genesis to qualify as a B
        ///	    horizon. In dry regions, carbonates and gypsum may be concentrated
        ///	    in the C horizon. While loose enough to be dug with a shovel, C
        ///	    horizon material often retains some of the structural features of
        ///	    the parent rock or geologic deposits from which it formed. The A
        ///	    and B layers usually originated from the C horizon. The upper
        ///	    layers of the C horizon may in time become a part of the solum as
        ///	    weathering and erosion continue. The C Horizon may contain lumps or
        ///	    more likely large shelves of unweathered rock, rather than being
        ///	    made up solely of small fragments as in the solum. It contains
        ///	    rocks with cracks and crevices (WP, https://goo.gl/fHikwb).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("C Horizon")]
        C_Horizon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    R horizons are the layers of partially weathered bedrock at the
        ///	    base of the soil profile. Unlike the above layers, R horizons are
        ///	    composed largely of consolidated masses of hard rock that cannot be
        ///	    excavated by hand. Soils formed in situ will exhibit strong
        ///	    similarities to this bedrock layer (WP, https://goo.gl/fHikwb).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("R Horizon")]
        R_Horizon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    L (limnic) horizons or layers indicate mineral or organic material
        ///	    that has been deposited in water by precipitation or through the
        ///	    actions of aquatic organisms. Included are coprogenous earth
        ///	    (sedimentary peat), diatomaceous earth, and marl; and is usually
        ///	    found as a remnant of past bodies of standing water (WP,
        ///	    https://goo.gl/fHikwb)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("L Horizon")]
        L_Horizon,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NumericSoilLayer", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NumericSoilLayer
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A decimal number of the
        ///										      minimum depth of the layer.
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minimumSoilDepth", Namespace="", DataType="decimal")]
        public decimal MinimumSoilDepth { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The unit the minimum depth
        ///										      of the layer is given in
        ///										      (Meters, Centimeters).
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minimumSoilDepthUnit", Namespace="")]
        public SoilDepthUnit MinimumSoilDepthUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A decimal number of the
        ///										      maximum depth of the layer.
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("maximumSoilDepth", Namespace="", DataType="decimal")]
        public decimal MaximumSoilDepth { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The unit the maximum depth
        ///										      of the layer is given in
        ///										      (Meters, Centimeters).
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("maximumSoilDepthUnit", Namespace="")]
        public SoilDepthUnit MaximumSoilDepthUnit { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilDepthUnit", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoilDepthUnit
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	Soil layer depth
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilDepthUnitVocabulary", Namespace="")]
    public enum SoilDepthUnitVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The millimetre (International spelling as used by the International
        ///	    Bureau of Weights and Measures) or millimeter (American spelling)
        ///	    (SI unit symbol mm) is a unit of length in the metric system, equal
        ///	    to one thousandth of a metre, which is the SI base unit of length
        ///	    (WP, https://goo.gl/6SDmkZ)
        ///	  </para>
        /// </summary>
        Millimetre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A centimetre (international spelling as used by the
        ///	    International Bureau of Weights and Measures; symbol
        ///	    cm) or centimeter (American spelling) is a unit of
        ///	    length in the metric system, equal to one hundredth of
        ///	    a metre, centi being the SI prefix for a factor of
        ///	    1⁄100 (WP, https://goo.gl/rozVU8)
        ///	  </para>
        /// </summary>
        Centimetre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The metre, or meter (American spelling), [...] is the
        ///	    base unit of length in the International System of
        ///	    Units (SI). The SI unit symbol is m. The metre is
        ///	    defined as the distance travelled by light in a
        ///	    specific fraction – about one three-hundred millionth –
        ///	    of a second (WP, https://goo.gl/pK0Qil).
        ///	  </para>
        /// </summary>
        Metre,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilTexture", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoilTexture
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The percentage of sand present in the soil
        ///										    </para>
        /// <para xml:lang="en">
        ///	A percentage
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("sandPercent", Namespace="")]
        public string SandPercent { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The percentage of silt present in the soil
        ///										    </para>
        /// <para xml:lang="en">
        ///	A percentage
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("siltPercent", Namespace="")]
        public string SiltPercent { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The percentage of loam present in the soil
        ///										    </para>
        /// <para xml:lang="en">
        ///	A percentage
        ///      </para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("loamPercent", Namespace="")]
        public string LoamPercent { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilMorphology", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoilMorphology
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      A soil type as defined in the World Reference Base
        ///										      for Soil Resources.
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("soilMorphologyType", Namespace="")]
        public SoilMorphologyType SoilMorphologyType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilMorphologyType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoilMorphologyType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The soil morphology according to the World Reference Base for Soil Resources
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilMorphologyTypeVocabulary", Namespace="")]
    public enum SoilMorphologyTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with thick organic layers (WRB, 2014).
        ///	  </para>
        /// </summary>
        Histosols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with strong human influence. With long and intensive agricultural use
        ///	    (WRB, 2014)
        ///	  </para>
        /// </summary>
        Anthrosols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with strong human influence. Containing significant ammount of artefacts
        ///	    (WRB, 2014).
        ///	  </para>
        /// </summary>
        Technosols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with limitation to root growth. Permafrost-affected (WRB, 2014).
        ///	  </para>
        /// </summary>
        Cryosols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with limitation to root growth. Thin or with many coarse fragments (WRB,
        ///	    2014).
        ///	  </para>
        /// </summary>
        Leptotols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with limitation to root growth. With a high ammount of exchangeable Na
        ///	    (WRB, 2014).
        ///	  </para>
        /// </summary>
        Solonetz,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with limitation to root growth. Alternating wet-dry
        ///	    conditions, schrink-swell clays (WRB, 2014).
        ///	  </para>
        /// </summary>
        Vertisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with limitation to root growth. High concentration of soluble
        ///	    salts (WRB, 2014).
        ///	  </para>
        /// </summary>
        Solonchaks,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils distinguished by Fe/Al chemistry. Groundwater-affected, underwater and in
        ///	    tidal areas (WRB, 2014)
        ///	  </para>
        /// </summary>
        Gleysols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils distinguished by Fe/Al chemistry. Allophanes or Al-humus complexes (WRB,
        ///	    2014)
        ///	  </para>
        /// </summary>
        Andosols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils distinguished by Fe/Al chemistry. Subsoil accumulation of humus and/or
        ///	    oxides (WRB, 2014)
        ///	  </para>
        /// </summary>
        Podzols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils distinguished by Fe/Al chemistry. Accumulation and redistribution of Fe
        ///	    (WRB, 2014)
        ///	  </para>
        /// </summary>
        Plinthosols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils distinguished by Fe/Al chemistry. Low-activity clay, P fixation, many Fe
        ///	    oxides, strongly structured (WRB, 2014)
        ///	  </para>
        /// </summary>
        Nitisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils distinguished by Fe/Al chemistry. Dominance of kaolinit and oxides (WRB,
        ///	    2014)
        ///	  </para>
        /// </summary>
        Ferralsols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils distinguished by Fe/Al chemistry. Stagnating water, abrupt textural
        ///	    difference (WRB, 2014).
        ///	  </para>
        /// </summary>
        Planosols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils distinguished by Fe/Al chemistry. Stagnating water, structural difference
        ///	    and/or moderate textural difference (WRB, 2014)
        ///	  </para>
        /// </summary>
        Stagnosols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Pronounced accumulation of organic matter in the mineral topsoil. Very dark
        ///	    topsoil, secondary carbonates (WRB, 2014)
        ///	  </para>
        /// </summary>
        Chernozems,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Pronounced accumulation of organic matter in the mineral topsoil. Dark topsoil,
        ///	    secondary carbonates (WRB, 2014)
        ///	  </para>
        /// </summary>
        Kastanozems,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Pronounced accumulation of organic matter in the mineral topsoil. Dark topsoil,
        ///	    no secondary carbonates (unless very deep), high base status (WRB, 2014)
        ///	  </para>
        /// </summary>
        Phaeozems,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Pronounced accumulation of organic matter in the mineral topsoil. Dark topsoil,
        ///	    low base status (WRB, 2014)
        ///	  </para>
        /// </summary>
        Umbrisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Accumulation of moderately soluble salts or non-saline substances. Accumulation
        ///	    of, and cementation by, secondary silica (WRB, 2014)
        ///	  </para>
        /// </summary>
        Durisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Accumulation of moderately soluble salts or non-saline substances. Accumulation
        ///	    of secondary gypsum (WRB, 2014)
        ///	  </para>
        /// </summary>
        Gypsisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Accumulation of moderately soluble salts or non-saline substances. Accumulation
        ///	    of secondary carbonates (WRB, 2014)
        ///	  </para>
        /// </summary>
        Calcisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with clay enriched subsoil. Interfingering of coarser-textured, lighter
        ///	    coloured material into a finer textured, stronger coloured layer (WRB, 2014)
        ///	  </para>
        /// </summary>
        Retisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with clay enriched subsoil. Low-activity clays, low base status (WRB,
        ///	    2014)
        ///	  </para>
        /// </summary>
        Acrisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with clay enriched subsoil. Low-activity clays, high base status (WRB,
        ///	    2014)
        ///	  </para>
        /// </summary>
        Lixisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with clay enriched subsoil. High-activity clays, low base status (WRB,
        ///	    2014)
        ///	  </para>
        /// </summary>
        Alisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with clay enriched subsoil. High-activity clays, high base status (WRB,
        ///	    2014)
        ///	  </para>
        /// </summary>
        Luvisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with little or no profile differentiation. Moderately developed (WRB,
        ///	    2014)
        ///	  </para>
        /// </summary>
        Cambisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with little or no profile differentiation. Sandy (WRB, 2014)
        ///	  </para>
        /// </summary>
        Arenosols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with little or no profile differentiation. Stratified fluviatile, marine
        ///	    and lacustrine sediments (WRB, 2014)
        ///	  </para>
        /// </summary>
        Fluvisols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soils with little or no profile differentiation. No significant profile
        ///	    development (WRB, 2014)
        ///	  </para>
        /// </summary>
        Regosols,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilAcidity", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoilAcidity
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///										      The soil acidity is a categorical element that captures the acidity of the
        ///										      soil. It can be Acidic, Neutral or Alkaline.
        ///										    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("soilAcidityType", Namespace="")]
        public SoilAcidityType SoilAcidityType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilAcidityType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoilAcidityType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	Soil acidity category
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SoilAcidityTypeVocabulary", Namespace="")]
    public enum SoilAcidityTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    pH range from smaller than 3.5 to 6.5. Classification according to the United
        ///	    States Department of Agriculture Natural Resources Conservation Service
        ///	  </para>
        /// </summary>
        Acidic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    pH range from 6.6 to 7.3. Classification according to the United States
        ///	    Department of Agriculture Natural Resources Conservation Service
        ///	  </para>
        /// </summary>
        Neutral,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    pH range from 7.4 to larger than 9.0. Classification according to the United
        ///	    States Department of Agriculture Natural Resources Conservation Service
        ///	  </para>
        /// </summary>
        Alkaline,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Ecosphere", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Ecosphere
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							A wrapper around named ecosphere layers
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("NamedEcosphereLayers", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("NamedEcosphereLayer", Namespace="")]
        public System.Collections.Generic.List<NamedEcosphereLayer> NamedEcosphereLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NamedEcosphereLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NamedEcosphereLayers collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NamedEcosphereLayersSpecified
        {
            get
            {
                return (this.NamedEcosphereLayers.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Ecosphere" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Ecosphere" /> class.</para>
        /// </summary>
        public Ecosphere()
        {
            this.NamedEcosphereLayers = new System.Collections.Generic.List<NamedEcosphereLayer>();
            this.NumericEcosphereLayers = new System.Collections.Generic.List<NumericEcosphereLayer>();
            this.OrganizationalHierarchies = new System.Collections.Generic.List<OrganizationalHierarchy>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							A wrapper around numeric ecosphere layers
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("NumericEcosphereLayers", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("NumericEcosphereLayer", Namespace="")]
        public System.Collections.Generic.List<NumericEcosphereLayer> NumericEcosphereLayers { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumericEcosphereLayers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NumericEcosphereLayers collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumericEcosphereLayersSpecified
        {
            get
            {
                return (this.NumericEcosphereLayers.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							A wrapper around organizational hierarchies
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("OrganizationalHierarchies", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("OrganizationalHierarchy", Namespace="")]
        public System.Collections.Generic.List<OrganizationalHierarchy> OrganizationalHierarchies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OrganizationalHierarchies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OrganizationalHierarchies collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrganizationalHierarchiesSpecified
        {
            get
            {
                return (this.OrganizationalHierarchies.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NamedEcosphereLayer", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NamedEcosphereLayer
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    A named layer in the ecosphere (Tree- , Shrub-, Herb-, Moss-, Ground Layer)
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ecosphereLayerName", Namespace="")]
        public EcosphereLayerName EcosphereLayerName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EcosphereLayerName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EcosphereLayerName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	Ecosphere layer name
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EcosphereLayerNameVocabulary", Namespace="")]
    public enum EcosphereLayerNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In biology, the canopy is the aboveground portion of a plant
        ///	    community or crop, formed by the collection of individual plant
        ///	    crowns. In forest ecology, canopy also refers to the upper layer or
        ///	    habitat zone, formed by mature tree crowns and including other
        ///	    biological organisms (epiphytes, lianas, arboreal animals, etc.).
        ///	    Sometimes the term canopy is used to refer to the extent of the
        ///	    outer layer of leaves of an individual tree or group of trees.
        ///	    Shade trees normally have a dense canopy that blocks light from
        ///	    lower growing plants (WP, https://goo.gl/N3yKtl)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Tree Layer")]
        Tree_Layer,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The shrub layer is the stratum of vegetation within a habitat with
        ///	    heights of between one and a half to about five metres. Young trees
        ///	    are also part of this layer. It may be divided into the first and
        ///	    second shrub layers (low and high bushes). The shrub layer needs
        ///	    sun and only a little moisture, unlike the moss layer, which
        ///	    requires a lot of water. This stratum only receives light filtered
        ///	    by the canopy. i.e. it is preferred by semi-shade or shade-loving
        ///	    plants that would not tolerate bright sunlight. In the shrub layer,
        ///	    which consists of young trees and bushes, birds like the blackbird,
        ///	    song thrush, robin or blackcap are at home. They build their nests
        ///	    protected in the bushes and are therefore referred to as bush
        ///	    nesters. In addition to shrubs, such as elder, hazel, hawthorn,
        ///	    raspberry and blackberry, clematis may also occur. At the edge of a
        ///	    wood, the shrub layer acts as a windbreak close to the trees and
        ///	    protects the soil from drying out (WP, https://goo.gl/7Xib0g).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Shrub Layer")]
        Shrub_Layer,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The herbaceous stratum contains non-woody vegetation, or ground
        ///	    cover, growing in the forest with heights of up to about one and a
        ///	    half metres. The herbaceous layer consists of various herbaceous
        ///	    plants, grasses, dwarf shrubs (hemicryptophytes, geophytes,
        ///	    therophytes and chamaephytes) and young shrubs. In forests, early
        ///	    flowering plants appear first before the canopy fills out.
        ///	    Thereafter, the amount of light available to plants is
        ///	    significantly reduced and only those that are suited to such
        ///	    conditions can thrive. By contrast, grassland consists of moss and
        ///	    herbaceous layers. Sometimes, a shrub layer builds up as part of a
        ///	    process of reforestation (succession) (WP, https://goo.gl/7Xib0g).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Herb Layer")]
        Herb_Layer,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Growing on the surface of the forest floor is vegetation of up to about
        ///	    0.15 metres in height in what is variously described as a moss, soil or
        ///	    cryptogam layer. The ground itself is covered by a layer of dead plant
        ///	    and animal material. In this layer and the underlying few centimetres
        ///	    of the topsoil live innumerable small soil organisms such as bacteria,
        ///	    fungi, algae and microorganisms, which break down the dead organic
        ///	    substances and work them into the soil. In places the ground is covered
        ///	    by lichens and mosses.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Moss Layer")]
        Moss_Layer,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NumericEcosphereLayer", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NumericEcosphereLayer
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    A decimal number of the minimum depth
        ///								    of the vegetation height.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minimumVegetationHeight", Namespace="", DataType="decimal")]
        public decimal MinimumVegetationHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The unit the minimum height of the layer
        ///								    is given in (e.g. Meters, Centimeters).
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minimumVegetationHeightUnit", Namespace="")]
        public VegetationHeightUnit MinimumVegetationHeightUnit { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    A decimal number of the maximum depth
        ///								    of the vegetation height.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("maximumVegetationHeight", Namespace="", DataType="decimal")]
        public decimal MaximumVegetationHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The unit the maximum height of the layer
        ///								    is given in (e.g. Meters, Centimeters).
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("maximumVegetationHeightUnit", Namespace="")]
        public VegetationHeightUnit MaximumVegetationHeightUnit { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VegetationHeightUnit", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VegetationHeightUnit
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	Vegetation height unit
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VegetationHeightUnitVocabulary", Namespace="")]
    public enum VegetationHeightUnitVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The millimetre (International spelling as used by the International
        ///	    Bureau of Weights and Measures) or millimeter (American spelling)
        ///	    (SI unit symbol mm) is a unit of length in the metric system, equal
        ///	    to one thousandth of a metre, which is the SI base unit of length
        ///	    (WP, https://goo.gl/6SDmkZ)
        ///	  </para>
        /// </summary>
        Millimetre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A centimetre (international spelling as used by the
        ///	    International Bureau of Weights and Measures; symbol
        ///	    cm) or centimeter (American spelling) is a unit of
        ///	    length in the metric system, equal to one hundredth of
        ///	    a metre, centi being the SI prefix for a factor of
        ///	    1⁄100 (WP, https://goo.gl/rozVU8)
        ///	  </para>
        /// </summary>
        Centimetre,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The metre, or meter (American spelling), [...] is the
        ///	    base unit of length in the International System of
        ///	    Units (SI). The SI unit symbol is m. The metre is
        ///	    defined as the distance travelled by light in a
        ///	    specific fraction – about one three-hundred millionth –
        ///	    of a second (WP, https://goo.gl/pK0Qil).
        ///	  </para>
        /// </summary>
        Metre,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OrganizationalHierarchy", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrganizationalHierarchy
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    A named organizational hierarchy of life (Atom
        ///								    Level, Molecule Level, Cell Level, ...)
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("organizationHierarchyName", Namespace="")]
        public OrganizationHierarchyName OrganizationHierarchyName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OrganizationHierarchyName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrganizationHierarchyName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	Name of an organizational hierarchy level
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OrganizationHierarchyNameVocabulary", Namespace="")]
    public enum OrganizationHierarchyNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A biome is a formation of plants and animals that have common
        ///	    characteristics due to similar climates and can be found over a
        ///	    range of continents. Biomes are distinct from habitats, because any
        ///	    biome can comprise a variety of habitats (WP,
        ///	    https://goo.gl/g7Urx4).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Biome Level")]
        Biome_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An ecosystem is a community of living organisms in conjunction with
        ///	    the nonliving components of their environment (things like air,
        ///	    water and mineral soil), interacting as a system. These biotic and
        ///	    abiotic components are regarded as linked together through nutrient
        ///	    cycles and energy flows. As ecosystems are defined by the network
        ///	    of interactions among organisms, and between organisms and their
        ///	    environment, they can be of any size but usually encompass
        ///	    specific, limited spaces (although some scientists say that the
        ///	    entire planet is an ecosystem). (WP, https://goo.gl/88BdbP)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Ecosystem Level")]
        Ecosystem_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A population is a summation of all the organisms of the same group
        ///	    or species, which live in a particular geographical area, and have
        ///	    the capability of interbreeding (WP, https://goo.gl/C2jF14).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Population Level")]
        Population_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In biology, an organism is any contiguous living system, such as an
        ///	    animal, plant, fungus, or bacterium. All known types of organisms
        ///	    are capable of some degree of response to stimuli, reproduction,
        ///	    growth and development and homeostasis. An organism consists of one
        ///	    or more cells; when it has one cell it is known as a unicellular
        ///	    organism; and when it has more than one it is known as a
        ///	    multicellular organism. Most unicellular organisms are of
        ///	    microscopic size and are thus classified as microorganisms. Humans
        ///	    are multicellular organisms composed of many trillions of cells
        ///	    grouped into specialized tissues and organs (WP,
        ///	    https://goo.gl/bFZhq).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Organism Level")]
        Organism_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A system of organs
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("System of Organs Level")]
        System_Of_Organs_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In biology, an organ or viscus is a collection of tissues joined in
        ///	    a structural unit to serve a common function. In anatomy, a viscus
        ///	    is an internal organ, and viscera is the plural form. (WP,
        ///	    https://goo.gl/nmTtNo)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Organ Level")]
        Organ_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In biology, tissue is a cellular organizational level intermediate
        ///	    between cells and a complete organ. A tissue is an ensemble of
        ///	    similar cells from the same origin that together carry out a
        ///	    specific function. Organs are then formed by the functional
        ///	    grouping together of multiple tissues (WP, https://goo.gl/9Ptii9).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Tissue Level")]
        Tissue_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The cell (from Latin cella, meaning "small room") is the basic
        ///	    structural, functional, and biological unit of all known living
        ///	    organisms. A cell is the smallest unit of life that can replicate
        ///	    independently, and cells are often called the "building blocks of
        ///	    life". The study of cells is called cell biology (WP,
        ///	    https://goo.gl/O4nWY).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Cell Level")]
        Cell_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In cell biology, an organelle is a specialized subunit within a
        ///	    cell that has a specific function. Individual organelles are
        ///	    usually separately enclosed within their own lipid bilayers (WP,
        ///	    https://goo.gl/Dn6aVN).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Cell Organelle Level")]
        Cell_Organelle_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A molecule is an electrically neutral group of two or more atoms
        ///	    held together by chemical bonds. Molecules are
        ///	    distinguished from ions by their lack of electrical charge.
        ///	    However, in quantum physics, organic chemistry, and biochemistry,
        ///	    the term molecule is often used less strictly, also being applied
        ///	    to polyatomic ions (WP, https://goo.gl/iLvg0x).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Molecule Level")]
        Molecule_Level,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An atom is the smallest constituent unit of ordinary matter that
        ///	    has the properties of a chemical element. Every solid, liquid, gas,
        ///	    and plasma is composed of neutral or ionized atoms. Atoms are very
        ///	    small; typical sizes are around 100 pm (a ten-billionth of a meter,
        ///	    in the short scale). However, atoms do not have well-defined
        ///	    boundaries, and there are different ways to define their size that
        ///	    give different but close values (WP, https://goo.gl/5KGsN6).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Atmom Level")]
        Atmom_Level,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeContext", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BiomeContext
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around zono biomes
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("ZonoBiomes", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ZonoBiome", Namespace="")]
        public System.Collections.Generic.List<ZonoBiome> ZonoBiomes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ZonoBiomes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ZonoBiomes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ZonoBiomesSpecified
        {
            get
            {
                return (this.ZonoBiomes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="BiomeContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BiomeContext" /> class.</para>
        /// </summary>
        public BiomeContext()
        {
            this.ZonoBiomes = new System.Collections.Generic.List<ZonoBiome>();
            this.OroBiomes = new System.Collections.Generic.List<OroBiome>();
            this.PedoBiomes = new System.Collections.Generic.List<PedoBiome>();
            this.Physiognomies = new System.Collections.Generic.List<Physiognomy>();
            this.LandUses = new System.Collections.Generic.List<LandUse>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around oro biomes
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("OroBiomes", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("OroBiome", Namespace="")]
        public System.Collections.Generic.List<OroBiome> OroBiomes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OroBiomes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OroBiomes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OroBiomesSpecified
        {
            get
            {
                return (this.OroBiomes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around pedo biomes
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("PedoBiomes", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PedoBiome", Namespace="")]
        public System.Collections.Generic.List<PedoBiome> PedoBiomes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PedoBiomes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PedoBiomes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PedoBiomesSpecified
        {
            get
            {
                return (this.PedoBiomes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around physiognomies
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Physiognomies", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Physiognomy", Namespace="")]
        public System.Collections.Generic.List<Physiognomy> Physiognomies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Physiognomies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Physiognomies collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhysiognomiesSpecified
        {
            get
            {
                return (this.Physiognomies.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around land uses
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("LandUses", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LandUse", Namespace="")]
        public System.Collections.Generic.List<LandUse> LandUses { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LandUses-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LandUses collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LandUsesSpecified
        {
            get
            {
                return (this.LandUses.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ZonoBiome", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZonoBiome
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The biome type (Terrestrial, Freshwater, Marine)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("biomeType", Namespace="")]
        public BiomeType BiomeType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The name of a biome zone (Polar, Boreal, Temperate, Subtropic, Tropic)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("biomeZone", Namespace="")]
        public BiomeZone BiomeZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The water availability within the biome (Semi Humid, Humid, Arid, Semi Arid)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("biomeHumidityType", Namespace="")]
        public BiomeHumidityType BiomeHumidityType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The influence to the biome (Continental, Maritime)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("biomeContinentalityType", Namespace="")]
        public BiomeContinentalityType BiomeContinentalityType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The hemisphere the biome is located in (North, South)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("biomeHemisphere", Namespace="")]
        public BiomeHemisphere BiomeHemisphere { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BiomeType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A biome type
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeTypeVocabulary", Namespace="")]
    public enum BiomeTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Terrestrial situated biome
        ///	  </para>
        /// </summary>
        Terrestrial,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Freshwater situated biome
        ///	  </para>
        /// </summary>
        Freshwater,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Marine situated biome
        ///	  </para>
        /// </summary>
        Marine,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeZone", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BiomeZone
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A biome zone name
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeZoneVocabulary", Namespace="")]
    public enum BiomeZoneVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The climate called polar climate is similar to a arctic climate,
        ///	    it's regions are characterized by a lack of warm summers. Every
        ///	    month in a polar climate has an average temperature of less than 10
        ///	    °C (50 °F). Regions with polar climate cover more than 20% of the
        ///	    Earth. The sun shines for long hours in the summer, and for many
        ///	    fewer hours in the winter. A polar climate results in treeless
        ///	    tundra, glaciers, or a permanent or semi-permanent layer of ice. It
        ///	    has cool summers and very cold winters (WP, http://bit.ly/1OMdx7g)
        ///	  </para>
        /// </summary>
        Polar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A boreal ecosystem is an ecosystem with a subarctic
        ///	    climate in the Northern Hemisphere, roughly between
        ///	    latitude 60° to 70°N. Boreal forests are also known as
        ///	    the taiga, particularly in Europe and Asia (WP,
        ///	    http://bit.ly/1lNzwAh)
        ///	  </para>
        /// </summary>
        Boreal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The north temperate zone extends from the Tropic of Cancer
        ///	    (approximately 23.5° north latitude) to the Arctic Circle
        ///	    (approximately 66.5° north latitude). The south temperate zone
        ///	    extends from the Tropic of Capricorn (approximately 23.5° south
        ///	    latitude) to the Antarctic Circle (at approximately 66.5° south
        ///	    latitude). (WP, http://bit.ly/20qmLLS)
        ///	  </para>
        /// </summary>
        Temperate,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The subtropics are geographic and climate zones located roughly
        ///	    between the tropic circle of latitude (the Tropic of Cancer and
        ///	    Tropic of Capricorn) and the 38th parallel in each hemisphere (WP,
        ///	    http://bit.ly/1S8mImK)
        ///	  </para>
        /// </summary>
        Subtropic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A tropical climate is a climate typically found within the Tropics,
        ///	    while a few locations outside the Tropics are considered to have a
        ///	    tropical climate. In the Köppen climate classification it is a
        ///	    non-arid climate in which all twelve months have mean temperatures
        ///	    of at least 18 °C (64 °F). Unlike the extra-tropics, where there
        ///	    are strong variations in day length and temperature, with season,
        ///	    tropical temperature remains relatively constant throughout the
        ///	    year and seasonal variations are dominated by precipitation (WP,
        ///	    http://bit.ly/1S8mImK)
        ///	  </para>
        /// </summary>
        Tropic,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeHumidityType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BiomeHumidityType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of water availability
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeHumidityTypeVocabulary", Namespace="")]
    public enum BiomeHumidityTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Humid climate is characterized by a higher precipitation then a potential
        ///	    evapotranspiration in 10 to 12 Months/Year. http://bit.ly/159p4ec (WP)
        ///	  </para>
        /// </summary>
        Humid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Humid climate is characterized by a higher precipitation then a potential
        ///	    evapotranspiration in 6 to 9 Months/Year. http://bit.ly/159p4ec (WP)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Semi Humid")]
        Semi_Humid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Semiarid climate is characterized by a lower precipitation then a potential
        ///	    evapotranspiration in 6 to 9 Months/Year. http://bit.ly/1yKM6WM (WP).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Semi Arid")]
        Semi_Arid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Arid climate is characterized by a lower precipitation then a potential
        ///	    evapotranspiration in 10 to 12 Months/Year. http://bit.ly/1yKM6WM (WP).
        ///	  </para>
        /// </summary>
        Arid,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeContinentalityType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BiomeContinentalityType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of continentality influence
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeContinentalityTypeVocabulary", Namespace="")]
    public enum BiomeContinentalityTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Continentally influenced
        ///	  </para>
        /// </summary>
        Continental,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Maritime influenced
        ///	  </para>
        /// </summary>
        Maritime,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeHemisphere", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BiomeHemisphere
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of continentality influence
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BiomeHemisphereVocabulary", Namespace="")]
    public enum BiomeHemisphereVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The northern hemisphere. North of the equator.
        ///	  </para>
        /// </summary>
        North,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The southern hemisphere. South of the equator.
        ///	  </para>
        /// </summary>
        South,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OroBiome", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OroBiome
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The type of oro biome (Nivale, Subalpine, Alpine, Montane, Submontane, Planar)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("oroBiomeType", Namespace="")]
        public OroBiomeType OroBiomeType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OroBiomeType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OroBiomeType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of oro biome. Altitudinal zonation in mountainous regions
    ///	describes the natural layering of ecosystems that occurs at distinct
    ///	altitudes due to varying environmental conditions. Temperature,
    ///	humidity, soil composition, and solar radiation are important factors
    ///	in determining altitudinal zones, which consequently support different
    ///	vegetation and animal species (WP, https://goo.gl/GQGR3m )
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OroBiomeTypeVocabulary", Namespace="")]
    public enum OroBiomeTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Covered in snow throughout most of the year. Vegetation is
        ///	    extremely limited to only a few species that thrive on silica
        ///	    soils (WP, https://goo.gl/GQGR3m).
        ///	  </para>
        /// </summary>
        Nivale,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The zone that stretches between the tree line and snowline
        ///	    (WP, https://goo.gl/GQGR3m)
        ///	  </para>
        /// </summary>
        Alpine,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The subalpine zone is the biotic zone immediately below the tree
        ///	    line around the world. In tropical regions of Southeast Asia the
        ///	    tree line may be above 4,000 m (13,000 ft), whereas in Scotland
        ///	    it may be as low as 450 m (1,480 ft). Species that occur in
        ///	    this zone depend on the location of the zone on the Earth, for
        ///	    example, snow gum in Australia, or subalpine larch, mountain
        ///	    hemlock and subalpine fir in western North America (WP,
        ///	    https://goo.gl/ZvpVBf).
        ///	  </para>
        /// </summary>
        Subalpine,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Extends from the mid-altitude forests to the tree line. The exact level
        ///	    of the tree line varies with local climate, but typically the tree line
        ///	    is found where mean monthly soil temperatures never exceed 10.0 degrees
        ///	    C and the mean annual soil temperatures are around 6.7 degrees C. In
        ///	    the tropics, this region is typified by montane rain forest (above
        ///	    3,000 ft) while at higher latitudes coniferous forests often dominate
        ///	    (WP, https://goo.gl/ZvpVBf).
        ///	  </para>
        /// </summary>
        Montane,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    This lowest section of mountains varies distinctly across climates
        ///	    and is referred to by a wide range of names depending on the
        ///	    surrounding landscape. Colline zones are found in tropical regions
        ///	    and Encinal zones and desert grasslands are found in desert regions
        ///	    (WP, https://goo.gl/ZvpVBf).
        ///	  </para>
        /// </summary>
        Planar,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PedoBiome", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PedoBiome
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of pedo biome (Amphibiome, Halobiome, Helobiome, Hydrobiome, Lithobiome,
        ///						  Peinobiome, Psammobiome)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("pedoBiomeType", Namespace="")]
        public PedoBiomeType PedoBiomeType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PedoBiomeType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PedoBiomeType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of pedo biome
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PedoBiomeTypeVocabulary", Namespace="")]
    public enum PedoBiomeTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Amphibiomes are pedobiomes with changing wet or temporarily flooded
        ///	    soils.
        ///	  </para>
        /// </summary>
        Amphibiome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Halobiomes are pedobiomes with salty soils
        ///	  </para>
        /// </summary>
        Halobiome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Helobiomes are pedobiomes with soils containing a high amount of
        ///	    humus (moor)
        ///	  </para>
        /// </summary>
        Helobiome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Hydrobiomes are pedobiomes where the soil is continously under
        ///	    water.
        ///	  </para>
        /// </summary>
        Hydrobiome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lithobiomes are pedobiomes where the soil is characterized by
        ///	    skelletal stone structures.
        ///	  </para>
        /// </summary>
        Lithobiome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Peinobiomes are pedobiomes with nutrient-poor soils.
        ///	  </para>
        /// </summary>
        Peinobiome,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Psammobiomes are pedobiomes whith sandy soils (e.g. dunes)
        ///	  </para>
        /// </summary>
        Psammobiome,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Physiognomy", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Physiognomy
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A wrapper around physiognomy types
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("PhysiognomyTypes", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PhysiognomyType", Namespace="")]
        public System.Collections.Generic.List<PhysiognomyType> PhysiognomyTypes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Physiognomy" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Physiognomy" /> class.</para>
        /// </summary>
        public Physiognomy()
        {
            this.PhysiognomyTypes = new System.Collections.Generic.List<PhysiognomyType>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PhysiognomyType", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PhysiognomyType
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A wrapper around terrestrial physiognomies
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("TerrestrialPhysiognomies", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("TerrestrialPhysiognomy", Namespace="")]
        public System.Collections.Generic.List<TerrestrialPhysiognomy> TerrestrialPhysiognomies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TerrestrialPhysiognomies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TerrestrialPhysiognomies collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TerrestrialPhysiognomiesSpecified
        {
            get
            {
                return (this.TerrestrialPhysiognomies.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="PhysiognomyType" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PhysiognomyType" /> class.</para>
        /// </summary>
        public PhysiognomyType()
        {
            this.TerrestrialPhysiognomies = new System.Collections.Generic.List<TerrestrialPhysiognomy>();
            this.SemiAquaticPhysiognomies = new System.Collections.Generic.List<SemiAquaticPhysiognomy>();
            this.AquaticPhysiognomies = new System.Collections.Generic.List<AquaticPhysiognomy>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A wrapper around semi aquatic physiognomies
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("SemiAquaticPhysiognomies", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("SemiAquaticPhysiognomy", Namespace="")]
        public System.Collections.Generic.List<SemiAquaticPhysiognomy> SemiAquaticPhysiognomies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemiAquaticPhysiognomies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemiAquaticPhysiognomies collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SemiAquaticPhysiognomiesSpecified
        {
            get
            {
                return (this.SemiAquaticPhysiognomies.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      A wrapper around aquatic physiognomies
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("AquaticPhysiognomies", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("AquaticPhysiognomy", Namespace="")]
        public System.Collections.Generic.List<AquaticPhysiognomy> AquaticPhysiognomies { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AquaticPhysiognomies-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AquaticPhysiognomies collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AquaticPhysiognomiesSpecified
        {
            get
            {
                return (this.AquaticPhysiognomies.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TerrestrialPhysiognomy", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerrestrialPhysiognomy
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  A type of terrestrial physiognomy (Evergreen Needleleaf Forest, Evergreen
        ///									  Broadleaf Forest, Deciduous Needleleaf Forest, Deciduous Broadleaf Forest)
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("terrestrialPhysiognomyType", Namespace="")]
        public TerrestrialPhysiognomyType TerrestrialPhysiognomyType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TerrestrialPhysiognomyType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerrestrialPhysiognomyType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of terrestrial physiognomy
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TerrestrialPhysiognomyTypeVocabulary", Namespace="")]
    public enum TerrestrialPhysiognomyTypeVocabulary
    {
        
        /// <summary>
        /// </summary>
        Forest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands dominated by trees with a canopy cover of more than 60% and height
        ///	    exceeding 2 m. Almost all trees remain green all year. Canopy is never without
        ///	    green foliage. Woodward et al. (2004).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Evergreen Needleleaf Forest")]
        Evergreen_Needleleaf_Forest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands dominated by trees with a canopy cover of more than 60% and height
        ///	    exceeding 2 m. Consists of seasonal needleleaf tree communities with an annual
        ///	    cycle of leaf-on and leaf-off periods. Woodward et al. (2004).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Deciduous Needleleaf Forest")]
        Deciduous_Needleleaf_Forest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands dominated by trees with a canopy cover of more than 60% and height
        ///	    exceeding 2 m. Almost all trees remain green all year. Canopy is never without
        ///	    green foliage. Woodward et al. (2004).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Evergreen Broadleaf Forest")]
        Evergreen_Broadleaf_Forest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands dominated by trees with a canopy cover of more than 60% and height
        ///	    exceeding 2 m. Consists of seasonal broadleaf tree communities with an annual
        ///	    cycle of leaf-on and leaf-off periods. Woodward et al. (2004).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Deciduous Broadleaf Forest")]
        Deciduous_Broadleaf_Forest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands dominated by trees with a canopy cover of more than 60% and height
        ///	    exceeding 2 m. Consists of tree communities with interspersed mixtures or
        ///	    mosaics of the other four forest cover types. None of the forest types exceeds
        ///	    60% of the landscape. Woodward et al. (2004).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Mixed Forest")]
        Mixed_Forest,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Open Woodland")]
        Open_Woodland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands with herbaceous and other understorey systems, and with forest canopy
        ///	    cover between 10 and 30%. The forest cover height exceeds 2 m. Woodward et al.
        ///	    (2004).
        ///	  </para>
        /// </summary>
        Savannah,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands with herbaceous and other understorey systems, and with forest canopy
        ///	    cover of between 30 and 60%. The forest cover height exceeds 2 m. Woodward et
        ///	    al. (2004).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Woody Savannah")]
        Woody_Savannah,
        
        /// <summary>
        /// </summary>
        Shrubland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands with woody vegetation less than 2 m tall and with shrub canopy cover more
        ///	    than 60%. The shrub foliage can be either evergreen or deciduous. Woodward et
        ///	    al. (2004).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Closed Shrubland")]
        Closed_Shrubland,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands with woody vegetation less than 2 m tall and with shrub canopy cover
        ///	    between 10 and 60%. The shrub foliage can be either evergreen or deciduous.
        ///	    Woodward et al. (2004).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Open Shrubland")]
        Open_Shrubland,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Herbaceous System")]
        Herbaceous_System,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lands with herbaceous types of cover. Tree and shrub cover is less than 10%.
        ///	    Woodward et al. (2004).
        ///	  </para>
        /// </summary>
        Grassland,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Barren Land")]
        Barren_Land,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Deserts have been defined and classified in a number of ways, generally
        ///	    combining total precipitation, number of days on which this falls, temperature,
        ///	    and humidity, and sometimes additional factors. For example, Phoenix, Arizona,
        ///	    receives less than 250 mm (9.8 in) of precipitation per year, and is
        ///	    immediately recognized as being located in a desert because of its
        ///	    aridity-adapted plants. The North Slope of Alaska's Brooks Range also receives
        ///	    less than 250 mm (9.8 in) of precipitation per year and is often classified as
        ///	    a cold desert. Other regions of the world have cold deserts, including areas of
        ///	    the Himalayas and other high-altitude areas in other parts of the world. Polar
        ///	    deserts cover much of the ice-free areas of the Arctic and Antarctic. A
        ///	    non-technical definition is that deserts are those parts of the Earth's surface
        ///	    that have insufficient vegetation cover to support a human population (WP:
        ///	    https://goo.gl/mx90cC).
        ///	  </para>
        /// </summary>
        Desert,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SemiAquaticPhysiognomy", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SemiAquaticPhysiognomy
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  A type of semi aquatic physiognomy (Mire, Bog, Fan, Saltmarsh)
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("semiAquaticPhysiognomyType", Namespace="")]
        public SemiAquaticPhysiognomyType SemiAquaticPhysiognomyType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SemiAquaticPhysiognomyType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SemiAquaticPhysiognomyType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of semi aquatic physiognomy
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SemiAquaticPhysiognomyTypeVocabulary", Namespace="")]
    public enum SemiAquaticPhysiognomyTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A mire or quagmire, sometimes called a peatland, is a wetland
        ///	    terrain without forest cover dominated by living, peat-forming
        ///	    plants. For botanists and ecologists, the term peatland is a more
        ///	    general term for any terrain dominated by peat to a depth of at
        ///	    least 30 cm (12 in), even if it has been completely drained (i.e.,
        ///	    a peatland can be dry, but a mire by definition must be wet)
        ///	    (WP, https://goo.gl/Viw6mV).
        ///	  </para>
        /// </summary>
        Mire,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A bog is a wetland that accumulates peat, a deposit of dead plant
        ///	    material—often mosses, and in a majority of cases, sphagnum
        ///	    moss. It is one of the four main types of wetlands. Other names
        ///	    for bogs include mire, quagmire, and muskeg; alkaline mires are
        ///	    called fens. They are frequently covered in ericaceous shrubs
        ///	    rooted in the sphagnum moss and peat. The gradual accumulation of
        ///	    decayed plant material in a bog functions as a carbon sink. (WP,
        ///	    https://goo.gl/RTPvv)
        ///	  </para>
        /// </summary>
        Bog,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A fen is one of the main types of wetland, the others being grassy
        ///	    marshes, forested swamps, and peaty bogs. Along with bogs, fens are
        ///	    a kind of mire. Fens are usually fed by mineral-rich surface water
        ///	    or groundwater. They are characterised by their water chemistry,
        ///	    which is pH neutral or alkaline, with relatively high dissolved
        ///	    mineral levels but few other plant nutrients. They are usually
        ///	    dominated by grasses and sedges, and typically have brown mosses in
        ///	    general including Scorpidium or Drepanocladus. Fens frequently
        ///	    have a high diversity of other plant species including carnivorous
        ///	    plants such as Pinguicula. They may also occur along large
        ///	    lakes and rivers where seasonal changes in water level maintain wet
        ///	    soils with few woody plants. The distribution of individual
        ///	    species of fen plants is often closely connected to water regimes
        ///	    and nutrient concentrations (WP, https://goo.gl/CyBBHb).
        ///	  </para>
        /// </summary>
        Fen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A salt marsh or saltmarsh, also known as a coastal salt marsh or a
        ///	    tidal marsh, is a coastal ecosystem in the upper coastal intertidal
        ///	    zone between land and open salt water or brackish water that is
        ///	    regularly flooded by the tides. It is dominated by dense stands of
        ///	    salt-tolerant plants such as herbs, grasses, or low shrubs. These
        ///	    plants are terrestrial in origin and are essential to the stability
        ///	    of the salt marsh in trapping and binding sediments (WP,
        ///	    https://goo.gl/SgJHEb)
        ///	  </para>
        /// </summary>
        Saltmarsh,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AquaticPhysiognomy", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AquaticPhysiognomy
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  A plant characterized aquatic physiognomy type (Emergent Aquatic, Floating
        ///									  Leave Aquatic ...)
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("plantCharacterizedAquaticPhysiognomyType", Namespace="")]
        public PlantCharacterizedAquaticPhysiognomyType PlantCharacterizedAquaticPhysiognomyType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///									  A habitat characterized aquatic physiognomy type (Estuary, Kelp Forest, Coral
        ///									  Reef, Cold Seep, ...)
        ///									</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("habitatCharacterizedAquaticPhysiognomy", Namespace="")]
        public HabitatCharacterizedAquaticPhysiognomy HabitatCharacterizedAquaticPhysiognomy { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PlantCharacterizedAquaticPhysiognomyType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PlantCharacterizedAquaticPhysiognomyType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of plant characterized aquatic physiognomy
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PlantCharacterizedAquaticPhysiognomyTypeVocabulary", Namespace="")]
    public enum PlantCharacterizedAquaticPhysiognomyTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Emergent aquatic plants (vascular and non-vascular) are rooted or attacached
        ///	    and their leaves and stems extend out of the water surface (Alberta
        ///	    conservation information management system ecological community tracking,
        ///	    modified)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Emergent Aquatic")]
        Emergent_Aquatic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Rooted or attached aquatic plants (vascular and non-vascular) with uppermost
        ///	    leaves floating on the water surface. Flowers and flowering structures may be
        ///	    emergent above or floating on the water surface (Alberta conservation
        ///	    information management system ecological community tracking).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Floating Leave Aquatic")]
        Floating_Leave_Aquatic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Rooted or attached aquatic plants (vascular and non-vascular) with uppermost
        ///	    leaves submerged below the water surface. Flowers and flowering structures may
        ///	    be emergent above or floating on the water surface (Alberta conservation
        ///	    information management system ecological community tracking)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Submergent Aquatic")]
        Submergent_Aquatic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Non rooted or attached aquatic plants (vascular and non-vascular)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Free Floating Aquatic")]
        Free_Floating_Aquatic,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HabitatCharacterizedAquaticPhysiognomy", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HabitatCharacterizedAquaticPhysiognomy
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of habitat characterized aquatic physiognomy
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HabitatCharacterizedAquaticPhysiognomyVocabulary", Namespace="")]
    public enum HabitatCharacterizedAquaticPhysiognomyVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An estuary is a partially enclosed coastal body of brackish water
        ///	    with one or more rivers or streams flowing into it, and with a free
        ///	    connection to the open sea. Estuaries form a transition zone
        ///	    between river environments and maritime environments. They are
        ///	    subject both to marine influences—such as tides, waves, and the
        ///	    influx of saline water—and to riverine influences—such as flows of
        ///	    fresh water and sediment. The inflows of both sea water and fresh
        ///	    water provide high levels of nutrients both in the water column and
        ///	    in sediment, making estuaries among the most productive natural
        ///	    habitats in the world (WP, https://goo.gl/gcp6Pn)
        ///	  </para>
        /// </summary>
        Estuary,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Kelp forests are underwater areas with a high density of kelp. They
        ///	    are recognized as one of the most productive and dynamic ecosystems
        ///	    on Earth. Smaller areas of anchored kelp are called kelp beds.
        ///	    Kelp forests occur worldwide throughout temperate and polar coastal
        ///	    oceans. In 2007, kelp forests were also discovered in tropical
        ///	    waters near Ecuador. Physically formed by brown macroalgae of
        ///	    the order Laminariales, kelp forests provide a unique
        ///	    three-dimensional habitat for marine organisms and are a source
        ///	    for understanding many ecological processes. Over the last century,
        ///	    they have been the focus of extensive research, particularly in
        ///	    trophic ecology, and continue to provoke important ideas that are
        ///	    relevant beyond this unique ecosystem. For example, kelp forests
        ///	    can influence coastal oceanographic patterns and provide many
        ///	    ecosystem services (WP, https://goo.gl/wtd9sP).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Kelp Forest")]
        Kelp_Forest,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Coral reefs are diverse underwater ecosystems held together by
        ///	    calcium carbonate structures secreted by corals. Coral reefs are
        ///	    built by colonies of tiny animals found in marine waters that
        ///	    contain few nutrients. Most coral reefs are built from stony
        ///	    corals, which in turn consist of polyps that cluster in groups. The
        ///	    polyps belong to a group of animals known as Cnidaria, which also
        ///	    includes sea anemones and jellyfish. Unlike sea anemones, corals
        ///	    secrete hard carbonate exoskeletons which support and protect the
        ///	    coral polyps. Most reefs grow best in warm, shallow, clear, sunny
        ///	    and agitated waters (WP, https://goo.gl/dPY0Jv).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Coral Reef")]
        Coral_Reef,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An ocean bank, sometimes referred to as a fishing bank or simply
        ///	    bank, is a part of the sea which is shallow compared to its
        ///	    surrounding area, such as a shoal or the top of an underwater hill.
        ///	    (WP, https://goo.gl/ZHMzUb).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Ocean Bank")]
        Ocean_Bank,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A strait is a naturally formed, narrow, typically navigable
        ///	    waterway that connects two larger bodies of water. It most commonly
        ///	    refers to a channel of water that lies between two land masses, but
        ///	    it may also refer to a body of water that is otherwise not
        ///	    navigable, for example because it is too shallow, or because it
        ///	    contains an unnavigable reef or archipelago (WP,
        ///	    https://goo.gl/x4fWKU)
        ///	  </para>
        /// </summary>
        Strait,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A seamount is a mountain rising from the ocean seafloor that does
        ///	    not reach to the water's surface (sea level), and thus is not an
        ///	    island. Seamounts are typically formed from extinct volcanoes that
        ///	    rise abruptly and are usually found rising from the seafloor to
        ///	    1,000–4,000 metres (3,300–13,100 ft) in height. They are defined by
        ///	    oceanographers as independent features that rise to at least 1,000
        ///	    metres (3,281 ft) above the seafloor, characteristically of conical
        ///	    form. The peaks are often found hundreds to thousands of meters
        ///	    below the surface, and are therefore considered to be within the
        ///	    deep sea. During their evolution over geologic time, the largest
        ///	    seamounts may reach the sea surface where wave action erodes the
        ///	    summit to form a flat surface. After they have subsided and sunk
        ///	    below the sea surface such flat-top seamounts are called "guyots"
        ///	    or "tablemounts" (WP, https://goo.gl/JQayU5).
        ///	  </para>
        /// </summary>
        Seamount,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A hydrothermal vent is a fissure in a planet's surface from which
        ///	    geothermally heated water issues. Hydrothermal vents are commonly
        ///	    found near volcanically active places, areas where tectonic plates
        ///	    are moving apart, ocean basins, and hotspots (WP,
        ///	    https://goo.gl/eRMZXy)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Hydrothermal Vent")]
        Hydrothermal_Vent,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A cold seep (sometimes called a cold vent) is an area of the ocean
        ///	    floor where hydrogen sulfide, methane and other hydrocarbon-rich
        ///	    fluid seepage occurs, often in the form of a brine pool. "Cold"
        ///	    does not mean that the temperature of the seepage is lower than
        ///	    that of the surrounding sea water. On the contrary, its temperature
        ///	    is often slightly higher. Cold seeps constitute a biome
        ///	    supporting several endemic species (WP, https://goo.gl/okK26y)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Cold Seep")]
        Cold_Seep,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LandUse", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LandUse
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of land use (Natural, Semi Natural, Urban)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("landUseType", Namespace="")]
        public LandUseType LandUseType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of land use form (Agriculture, Agroforestry, Forestry, Aquaculture)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("landUseForm", Namespace="")]
        public LandUseForm LandUseForm { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LandUseType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LandUseType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of land use
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LandUseTypeVocabulary", Namespace="")]
    public enum LandUseTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Natural is every land that is not managed in any way.
        ///	  </para>
        /// </summary>
        Natural,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Semi natural is every land that is managed or used for food creating other
        ///	    resources.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Semi Natural")]
        Semi_Natural,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Areas with human settlement.
        ///	  </para>
        /// </summary>
        Urban,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LandUseForm", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LandUseForm
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of land use form
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LandUseFormVocabulary", Namespace="")]
    public enum LandUseFormVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Agriculture is the cultivation of animals, plants and fungi for
        ///	    food, fiber, biofuel, medicinal plants and other products used to
        ///	    sustain and enhance human life (WP, https://goo.gl/HWul0C).
        ///	  </para>
        /// </summary>
        Agriculture,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Agroforestry or agro-sylviculture is a land use management system
        ///	    in which trees or shrubs are grown around or among crops or
        ///	    pastureland. It combines shrubs and trees in agricultural and
        ///	    forestry technologies to create more diverse, productive,
        ///	    profitable, healthy, ecologically sound, and sustainable land-use
        ///	    systems (WP, https://goo.gl/4yyFxT).
        ///	  </para>
        /// </summary>
        Agroforestry,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Forestry is the science and craft of creating, managing, using,
        ///	    conserving, and repairing forests and associated resources to meet
        ///	    desired goals, needs, and values for human and environment
        ///	    benefits. Forestry is practiced in plantations and natural
        ///	    stands. The science of forestry has elements that belong to the
        ///	    biological, physical, social, political and managerial sciences
        ///	    (WP, https://goo.gl/cOr6zu).
        ///	  </para>
        /// </summary>
        Forestry,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Aquaculture, also known as aquafarming, is the farming of aquatic
        ///	    organisms such as fish, crustaceans, molluscs and aquatic
        ///	    plants. Aquaculture involves cultivating freshwater and
        ///	    saltwater populations under controlled conditions, and can be
        ///	    contrasted with commercial fishing, which is the harvesting of wild
        ///	    fish (WP, https://goo.gl/GMCNbS).
        ///	  </para>
        /// </summary>
        Aquaculture,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Generally, a fishery is an entity engaged in raising or harvesting
        ///	    fish which is determined by some authority to be a fishery.
        ///	    According to the FAO, a fishery is typically defined in terms of
        ///	    the "people involved, species or type of fish, area of water or
        ///	    seabed, method of fishing, class of boats, purpose of the
        ///	    activities or a combination of the foregoing features". The
        ///	    definition often includes a combination of fish and fishers in a
        ///	    region, the latter fishing for similar species with similar gear
        ///	    types (WP, https://goo.gl/SPBFxk).
        ///	  </para>
        /// </summary>
        Fishery,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A the locatoin is mainly used as experimental site e.g. a
        ///	    plantation which has semi natural character and is used only for
        ///	    experimental purposes.
        ///	  </para>
        /// </summary>
        Experiments,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OrganismContext", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrganismContext
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around organisms
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Organisms", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Organism", Namespace="")]
        public System.Collections.Generic.List<Organism> Organisms { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="OrganismContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OrganismContext" /> class.</para>
        /// </summary>
        public OrganismContext()
        {
            this.Organisms = new System.Collections.Generic.List<Organism>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Organism", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Organism
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The taxonomy of the organism
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Taxonomy", Namespace="")]
        public Taxonomy Taxonomy { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Taxonomy", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Taxonomy
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The kingdom of the organism
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("domain", Namespace="")]
        public Domain Domain { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The kingdom of the organism
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("kingdom", Namespace="")]
        public Kingdom Kingdom { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							  The division of the organism
        ///							</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("division", Namespace="")]
        public Division Division { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							  The class of the organism
        ///							</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("class", Namespace="")]
        public Class Class { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The order of the organism
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("order", Namespace="")]
        public Order Order { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The family of the organism
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("family", Namespace="")]
        public Family Family { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The generic full name of the organism including author and year
        ///							if required.
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("species", Namespace="", DataType="string")]
        public string Species { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							The name of an organism
        ///						      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OrganismName", Namespace="")]
        public OrganismName OrganismName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Domain", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Domain
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute(DataType="string")]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Kingdom", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Kingdom
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The kingdoms of life
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("KingdomVocabulary", Namespace="")]
    public enum KingdomVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Plants, also called green plants, are multicellular eukaryotes of the kingdom
        ///	    Plantae. They form an unranked clade Viridiplantae that includes the flowering
        ///	    plants, conifers and other gymnosperms, ferns, clubmosses, hornworts,
        ///	    liverworts, mosses and the green algae (WP, https://goo.gl/3ro18) This group of
        ///	    interaction partners is not taxonomically correct and compared to green plants
        ///	    also includes red and brown algae.
        ///	  </para>
        /// </summary>
        Plantae,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Animals are multicellular, eukaryotic organisms of the kingdom Animalia (also
        ///	    called Metazoa). All animals are motile, meaning they can move spontaneously
        ///	    and independently, at some point in their lives. Their body plan eventually
        ///	    becomes fixed as they develop, although some undergo a process of metamorphosis
        ///	    later on in their lives. All animals are heterotrophs: they must ingest other
        ///	    organisms or their products for sustenance (WP, https://goo.gl/u2bGdR)
        ///	  </para>
        /// </summary>
        Animalia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A fungus [...] is any member of the group of eukaryotic organisms that includes
        ///	    unicellular microorganisms such as yeasts and molds, as well as multicellular
        ///	    fungi that produce familiar fruiting forms known as mushrooms. These organisms
        ///	    are classified as a kingdom, Fungi, which is separate from the other life
        ///	    kingdoms of plants, animals, protists, and bacteria (WP, https://goo.gl/gN6qZQ)
        ///	  </para>
        /// </summary>
        Fungi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Bacteria [...] constitute a large domain of prokaryotic microorganisms.
        ///	    Typically a few micrometres in length, bacteria have a number of shapes,
        ///	    ranging from spheres to rods and spirals (WP, https://goo.gl/4JbsxA)
        ///	  </para>
        /// </summary>
        Bacteria,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Archaea [...] constitute a domain or kingdom of single-celled
        ///	    microorganisms. These microbes are prokaryotes, meaning that they have no cell
        ///	    nucleus or any other membrane-bound organelles in their cells (WP,
        ///	    https://goo.gl/8boHS)
        ///	  </para>
        /// </summary>
        Archaea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Chromista are a eukaryotic supergroup, probably polyphyletic, which may be
        ///	    treated as a separate kingdom or included among the Protista. They include all
        ///	    algae whose chloroplasts contain chlorophylls a and c, as well as various
        ///	    colorless forms that are closely related to them. These chloroplasts are
        ///	    surrounded by four membranes, and are believed to have been acquired from some
        ///	    red algae (WP, https://goo.gl/oCxD5v)
        ///	  </para>
        /// </summary>
        Chromista,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In some systems of biological classification, the Protozoa are a diverse group
        ///	    of unicellular eukaryotic organisms. Historically, protozoa were defined as
        ///	    single-celled organisms with animal-like behaviors, such as motility and
        ///	    predation. The group was regarded as the zoological counterpart to the
        ///	    "protophyta", which were considered to be plant-like, as they are capable of
        ///	    photosynthesis. The terms protozoa and protozoans are also used informally to
        ///	    designate single-celled, non-photosynthetic protists, such as ciliates, amoebae
        ///	    and flagellates (WP, https://goo.gl/zrsJQQ )
        ///	  </para>
        /// </summary>
        Protozoa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A virus is a small infectious agent that replicates only inside the living
        ///	    cells of other organisms. Viruses can infect all types of life forms, from
        ///	    animals and plants to microorganisms, including bacteria and archaea (WP,
        ///	    https://goo.gl/L9Gyc)
        ///	  </para>
        /// </summary>
        Viruses,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Division", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Division
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute(DataType="string")]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Class", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Class
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute(DataType="string")]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Order", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Order
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute(DataType="string")]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Family", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Family
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute(DataType="string")]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OrganismName", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrganismName
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      Atomised name with elements according to the International Code of Nomenclature
        ///							      of Prokaryotes (ABCD)
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BacterialName", Namespace="")]
        public BacterialName BacterialName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      The ame of a fungi
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("FungalName", Namespace="")]
        public FungalName FungalName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      Atomised name with elements according to the International Code of Botanical
        ///							      Nomenclature or the International Code of Nomenclature for Cultivated Plants
        ///							      (ABCD)
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BotanicalName", Namespace="")]
        public BotanicalName BotanicalName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      Atomised name with elements according to the International Code of Zoological
        ///							      Nomenclature (ABCD)
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ZoologicalName", Namespace="")]
        public ZoologicalName ZoologicalName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///							      Atomised name with elements according to the International Committee on
        ///							      Taxonomy of Viruses
        ///							    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ViralName", Namespace="")]
        public ViralName ViralName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BacterialName", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BacterialName
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    An element that captures the full scientific name of the bacteria in one string.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fullBacterialName", Namespace="", DataType="string")]
        public string FullBacterialName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Genus name
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("genusOrMonomial", Namespace="", DataType="string")]
        public string GenusOrMonomial { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Subgenus name
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("subgenus", Namespace="", DataType="string")]
        public string Subgenus { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Author team and year of the subgenus name
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("subgenusAuthorAndYear", Namespace="", DataType="string")]
        public string SubgenusAuthorAndYear { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    A name element dependent on a genus or a species name under the
        ///								    bacteriological, botanical, and zoological code.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("speciesEpithet", Namespace="", DataType="string")]
        public string SpeciesEpithet { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The subsphecies epithet (Maps to Darwin Core 2: Subspecies)
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("subspeciesEpithet", Namespace="", DataType="string")]
        public string SubspeciesEpithet { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Author team and year of the basionym of a species or subspecies combination
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("parentheticalAuthorTeamAndYear", Namespace="", DataType="string")]
        public string ParentheticalAuthorTeamAndYear { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The author(s) who published the full name as it stands and its year
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("authorTeamAndYear", Namespace="", DataType="string")]
        public string AuthorTeamAndYear { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Approbation of name according to approved list, validation list,or validly
        ///								    published, paper in IJSB after 1980
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("nameApprobation", Namespace="", DataType="string")]
        public string NameApprobation { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FungalName", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FungalName
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    An element that captures the full scientific name of the bacteria in one string.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fullFungalName", Namespace="", DataType="string")]
        public string FullFungalName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BotanicalName", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BotanicalName
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    An element that captures the full botanical name in one string.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fullBotanicalName", Namespace="", DataType="string")]
        public string FullBotanicalName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Genus or higher taxon name
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("genusOrMonomial", Namespace="", DataType="string")]
        public string GenusOrMonomial { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The first epithet in a botanical name combination (species epithet or the
        ///								    epithet of the subdivision of a genus
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("firstEpithet", Namespace="", DataType="string")]
        public string FirstEpithet { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The final epithet of a botanical name of infraspecific rank
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("infraspecificEpithet", Namespace="", DataType="string")]
        public string InfraspecificEpithet { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The rank of the name where needed to form it.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("rank", Namespace="")]
        public string Rank { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rank-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rank property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RankSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Flag indicating that this is a named hybrid ("x") or a graft chimaera ("+").
        ///								    The attribute insertionpoint defines the name element in front of which the
        ///								    qualifier should be inserted (1 = before entire name, 2= before first epithet,
        ///								    3 = before rank designation for second epithet.)
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("hybridFlag", Namespace="")]
        public HybridFlag HybridFlag { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Author team of the basionym of a combination
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("authorTeamParenthesis", Namespace="", DataType="string")]
        public string AuthorTeamParenthesis { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The author(s) who published the full name as it stands
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("authorTeam", Namespace="", DataType="string")]
        public string AuthorTeam { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Cultivar group name
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("cultivarGroupName", Namespace="", DataType="string")]
        public string CultivarGroupName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Cultivar name according to the ICNCP
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("cultivarName", Namespace="", DataType="string")]
        public string CultivarName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Container for trade names
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("tradeDesignationNames", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("tradeDesignationName", Namespace="", DataType="string")]
        public System.Collections.Generic.List<string> TradeDesignationNames { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TradeDesignationNames-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TradeDesignationNames collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TradeDesignationNamesSpecified
        {
            get
            {
                return (this.TradeDesignationNames.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="BotanicalName" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BotanicalName" /> class.</para>
        /// </summary>
        public BotanicalName()
        {
            this.TradeDesignationNames = new System.Collections.Generic.List<string>();
        }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The abbreviation of a taxonomic rank as used in (botanical) organism name strings
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RankAbbreviation", Namespace="")]
    public enum RankAbbreviation
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("subgen.")]
        SubgenPeriod,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("sect.")]
        SectPeriod,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("subsp.")]
        SubspPeriod,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("var.")]
        VarPeriod,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("subvar.")]
        SubvarPeriod,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("forma")]
        Forma,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("f.")]
        FPeriod,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("subforma")]
        Subforma,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("subf.")]
        SubfPeriod,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("f.spec.")]
        FPeriodSpecPeriod,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HybridFlag", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HybridFlag
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute(DataType="string")]
        public string Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("insertionpoint", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Insertionpoint { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ZoologicalName", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZoologicalName
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    An element that captures the full zoological name in one string.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fullZoologicalName", Namespace="", DataType="string")]
        public string FullZoologicalName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Genus or higher taxon name
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("genusOrMonomial", Namespace="", DataType="string")]
        public string GenusOrMonomial { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Subgenus name
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("subgenus", Namespace="", DataType="string")]
        public string Subgenus { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Species epithet
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("speciesEpithet", Namespace="", DataType="string")]
        public string SpeciesEpithet { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Maps to Darwin Core 2: Subspecies
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("subspeciesEpithet", Namespace="", DataType="string")]
        public string SubspeciesEpithet { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The first person(s) who validly published a species-group name and the year of
        ///								    publication
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("authorTeamOriginalAndYear", Namespace="", DataType="string")]
        public string AuthorTeamOriginalAndYear { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The parenthetical citation of the original author when a species-group was
        ///								    transferred to another genus and the year of the original publication
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("authorTeamParenthesisAndYear", Namespace="", DataType="string")]
        public string AuthorTeamParenthesisAndYear { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The citation of the authors responsible for the new combination and the year of
        ///								    its publication
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("combinationAuthorTeamAndYear", Namespace="", DataType="string")]
        public string CombinationAuthorTeamAndYear { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Name of the breed of an animal
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("breed", Namespace="", DataType="string")]
        public string Breed { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("namedIndividual", Namespace="", DataType="string")]
        public string NamedIndividual { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ViralName", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ViralName
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    An element that captures the full viral name in one string.
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fullViralName", Namespace="", DataType="string")]
        public string FullViralName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    Genus or higher taxon name formed according to the code and representing the
        ///								    result of the identification. E.g. Comovirus
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("genusOrMonomial", Namespace="", DataType="string")]
        public string GenusOrMonomial { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The formal name of a viral species. Examples: vaccinia virus; human herpes
        ///								    virus 2 (herpes simplex virus 2); poliovirus 1; Saccharomyces cerevisiae virus
        ///								    L-A; enterobacteria phage PRD1 [Source: ICTV]
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("viralSpeciesDesignation", Namespace="", DataType="string")]
        public string ViralSpeciesDesignation { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///								    The accepted acronym for the Virus, e.g. PCV for Peanut Clump Virus
        ///								  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("acronym", Namespace="", DataType="string")]
        public string Acronym { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProcessContext", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessContext
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around processes
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Processes", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Process", Namespace="")]
        public System.Collections.Generic.List<Process> Processes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Processes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Processes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProcessesSpecified
        {
            get
            {
                return (this.Processes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ProcessContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ProcessContext" /> class.</para>
        /// </summary>
        public ProcessContext()
        {
            this.Processes = new System.Collections.Generic.List<Process>();
            this.Interactions = new System.Collections.Generic.List<Interaction>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around interactions
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Interactions", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Interaction", Namespace="")]
        public System.Collections.Generic.List<Interaction> Interactions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Interactions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Interactions collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InteractionsSpecified
        {
            get
            {
                return (this.Interactions.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Process", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Process
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A named process  (Adaption, Speciation, Migration, Birth, ...)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("processName", Namespace="")]
        public ProcessName ProcessName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The subject of the process given under process name (e.g. Organism, Chemical, Matter, Energy)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("processSubject", Namespace="")]
        public System.Collections.Generic.List<ProcessSubject> ProcessSubject { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProcessSubject-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ProcessSubject collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProcessSubjectSpecified
        {
            get
            {
                return (this.ProcessSubject.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Process" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Process" /> class.</para>
        /// </summary>
        public Process()
        {
            this.ProcessSubject = new System.Collections.Generic.List<ProcessSubject>();
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProcessName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The name of a process.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProcessNameVocabulary", Namespace="")]
    public enum ProcessNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Adaptation, in biology, is the process whereby a population becomes
        ///	    better suited to its habitat (WP, https://goo.gl/Sw5hav).
        ///	  </para>
        /// </summary>
        Adaptation,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Speciation is the evolutionary process by which reproductively
        ///	    isolated biological populations evolve to become distinct species
        ///	    (WP, https://goo.gl/CcIB7y).
        ///	  </para>
        /// </summary>
        Speciation,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In biology and ecology, extinction is the end of an organism or of a
        ///	    group of organisms (taxon), normally a species. The moment of
        ///	    extinction is generally considered to be the death of the last
        ///	    individual of the species, although the capacity to breed and recover
        ///	    may have been lost before this point. Because a species' potential
        ///	    range may be very large, determining this moment is difficult, and is
        ///	    usually done retrospectively. This difficulty leads to phenomena such
        ///	    as Lazarus taxa, where a species presumed extinct abruptly "reappears"
        ///	    (typically in the fossil record) after a period of apparent absence
        ///	    (WP, https://goo.gl/JfeHV3)
        ///	  </para>
        /// </summary>
        Extinction,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Birth, also known as parturition, is the act or process of bearing
        ///	    or bringing forth offspring. In mammals, the process is
        ///	    initiated by hormones which cause the muscular walls of the uterus
        ///	    to contract, expelling the fetus at a developmental stage when it
        ///	    is ready to feed and breathe. In some species the offspring is
        ///	    precocial and can move around almost immediately after birth but in
        ///	    others it is altricial and completely dependent on parenting. In
        ///	    marsupials, the fetus is born at a very immature stage after a
        ///	    short gestational period and develops further in its mother's
        ///	    pouch (WP, https://goo.gl/VKbgE6).
        ///	  </para>
        /// </summary>
        Birth,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Growth,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Death is the termination of all biological functions that sustain
        ///	    an organism. Phenomena which commonly bring about death include
        ///	    biological aging (senescence), predation, malnutrition, disease,
        ///	    suicide, homicide, starvation, dehydration, and accidents or trauma
        ///	    resulting in terminal injury. Bodies of living organisms begin
        ///	    to decompose shortly after death. Death has commonly been
        ///	    considered a sad or unpleasant occasion, particularly for humans,
        ///	    due to the affection for the being that has died and/or the
        ///	    termination of social and familial bonds with the deceased. Other
        ///	    concerns include fear of death, necrophobia, anxiety, sorrow,
        ///	    grief, emotional pain, depression, sympathy, compassion, solitude,
        ///	    or saudade. The potential for an afterlife is of concern for humans
        ///	    and the possibility of reward or judgement and punishment for past
        ///	    sin with people of certain religions (WP, https://goo.gl/rW1Ic).
        ///	  </para>
        /// </summary>
        Death,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Animal migration is the relatively long-distance movement of
        ///	    individuals, usually on a seasonal basis. It is found in all major
        ///	    animal groups, including birds, mammals, fish, reptiles,
        ///	    amphibians, insects, and crustaceans. The trigger for the
        ///	    migration may be local climate, local availability of food, the
        ///	    season of the year or for matting reasons. To be counted as a
        ///	    true migration, and not just a local dispersal or irruption, the
        ///	    movement of the animals should be an annual or seasonal occurrence,
        ///	    such as Northern hemisphere birds migrating south for the winter;
        ///	    wildebeest migrating annually for seasonal grazing; or a major
        ///	    habitat change as part of their life, such as young Atlantic salmon
        ///	    leaving the river of their birth when they have reached a few
        ///	    inches in size (WP, https://goo.gl/aT4d5D).
        ///	  </para>
        /// </summary>
        Migration,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Competition in biology and sociology, is a contest between two or
        ///	    more organisms, animals, individuals, groups, etc., for territory,
        ///	    a niche, for a location of resources, for resources and goods, for
        ///	    mates, for prestige, for recognition, for awards, for group or
        ///	    social status, or for leadership. Competition is the opposite of
        ///	    cooperation. It arises whenever at least two parties strive for
        ///	    a goal which cannot be shared or which is desired individually but
        ///	    not in sharing and cooperation (WP, https://goo.gl/KKrgSP).
        ///	  </para>
        /// </summary>
        Competition,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ecological facilitation or probiosis describes species interactions
        ///	    that benefit at least one of the participants and cause harm to
        ///	    neither. Facilitations can be categorized as mutualisms, in
        ///	    which both species benefit, or commensalisms, in which one species
        ///	    benefits and the other is unaffected. Much of classic ecological
        ///	    theory (e.g., natural selection, niche separation, metapopulation
        ///	    dynamics) has focused on negative interactions such as predation
        ///	    and competition, but positive interactions (facilitation) are
        ///	    receiving increasing focus in ecological research.
        ///	    This article addresses both the mechanisms of facilitation and the
        ///	    increasing information available concerning the impacts of
        ///	    facilitation on community ecology (WP, https://goo.gl/4usCL6).
        ///	  </para>
        /// </summary>
        Facilitation,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Consumers are organisms of an ecological food chain which receive
        ///	    energy by consuming other organisms. These organisms are formally
        ///	    referred to as heterotrophs, which include animals, bacteria and
        ///	    fungi. Such organisms may consume by various means, including
        ///	    predation, parasitization, and biodegradation (WP,
        ///	    https://goo.gl/SsH2Na).
        ///	  </para>
        /// </summary>
        Consumption,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Communication,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Biological assimilation, is the combination of two processes to
        ///	    supply cells with nutrients. The first is the process of absorbing
        ///	    vitamins, minerals, and other chemicals from food within the
        ///	    gastrointestinal tract. In humans this is done with a chemical
        ///	    breakdown (enzymes and acids) and physical breakdown (oral
        ///	    mastication and stomach churning.) The second process of bio
        ///	    assimilation is the chemical alteration of substances in the
        ///	    bloodstream by the liver or cellular secretions. Although a few
        ///	    similar compounds can be absorbed in digestion bio assimilation,
        ///	    the bio-availability of many compounds is dictated by this second
        ///	    process since both the liver and cellular secretions can be very
        ///	    specific in their metabolic action (see chirality.) This second
        ///	    process is where the absorbed food reaches the cells via the liver
        ///	    (WP, https://goo.gl/t1R5aL)
        ///	  </para>
        /// </summary>
        Assimilation,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The breakdown of more complex substances into simpler ones together
        ///	    with release of energy in organisms.
        ///	  </para>
        /// </summary>
        Dissimilation,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The carbon cycle is the biogeochemical cycle by which carbon is
        ///	    exchanged among the biosphere, pedosphere, geosphere, hydrosphere,
        ///	    and atmosphere of the Earth (WP, https://goo.gl/bgxEM4).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Carbon Cycle")]
        Carbon_Cycle,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A nutrient cycle (or ecological recycling) is the movement and
        ///	    exchange of organic and inorganic matter back into the production
        ///	    of living matter. The process is regulated by food web pathways
        ///	    that decompose matter into mineral nutrients (WP,
        ///	    https://goo.gl/2XOwMR)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Nutrient Cycle")]
        Nutrient_Cycle,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The water cycle, also known as the hydrological cycle or the H2O
        ///	    cycle, describes the continuous movement of water on, above and
        ///	    below the surface of the Earth (WP, https://goo.gl/EOeTNu)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Water Cycle")]
        Water_Cycle,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Energy Exchange")]
        Energy_Exchange,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Demography [...] is the statistical study of populations,
        ///	    especially human beings. As a very general science, it can analyze
        ///	    any kind of dynamic living population, i.e., one that changes over
        ///	    time or space (see population dynamics). Demography encompasses the
        ///	    study of the size, structure, and distribution of these
        ///	    populations, and spatial or temporal changes in them in response to
        ///	    birth, migration, ageing, and death (WP, https://goo.gl/PqDS1B).
        ///	  </para>
        /// </summary>
        Demography,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Evolution is change in the heritable traits of biological
        ///	    populations over successive generations. Evolutionary
        ///	    processes give rise to diversity at every level of biological
        ///	    organisation, including the levels of species, individual
        ///	    organisms, and molecules (WP, https://goo.gl/OZzIz).
        ///	  </para>
        /// </summary>
        Evolution,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Disruption,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Natural Disturbance")]
        Natural_Disturbance,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Land Use Change")]
        Land_Use_Change,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Climate change is a change in the statistical distribution of
        ///	    weather patterns when that change lasts for an extended period of
        ///	    time (i.e., decades to millions of years). Climate change may refer
        ///	    to a change in average weather conditions, or in the time variation
        ///	    of weather around longer-term average conditions (i.e., more or
        ///	    fewer extreme weather events). Climate change is caused by factors
        ///	    such as biotic processes, variations in solar radiation received by
        ///	    Earth, plate tectonics, and volcanic eruptions. Certain human
        ///	    activities have also been identified as significant causes of
        ///	    recent climate change, often referred to as global warming (WP,
        ///	    https://goo.gl/jDVPm9)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Climate Change")]
        Climate_Change,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Pollution is the introduction of contaminants into the natural
        ///	    environment that cause adverse change. Pollution can take the
        ///	    form of chemical substances or energy, such as noise, heat or
        ///	    light. Pollutants, the components of pollution, can be either
        ///	    foreign substances/energies or naturally occurring contaminants.
        ///	    Pollution is often classed as point source or nonpoint source
        ///	    pollution (WP, https://goo.gl/86S9Qw).
        ///	  </para>
        /// </summary>
        Pollution,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        Invasion,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In earth science, erosion is the action of surface processes (such
        ///	    as water flow or wind) that remove soil, rock, or dissolved
        ///	    material from one location on the Earth's crust, then transport it
        ///	    away to another location. The particulate breakdown of rock or
        ///	    soil into clastic sediment is referred to as physical or mechanical
        ///	    erosion; this contrasts with chemical erosion, where soil or rock
        ///	    material is removed from an area by its dissolving into a solvent
        ///	    (typically water), followed by the flow away of that solution.
        ///	    Eroded sediment or solutes may be transported just a few
        ///	    millimetres, or for thousands of kilometres (WP,
        ///	    https://goo.gl/XI8r9Y)
        ///	  </para>
        /// </summary>
        Ersosion,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In aerosol physics, deposition is the process by which aerosol
        ///	    particles collect or deposit themselves on solid surfaces,
        ///	    decreasing the concentration of the particles in the air. It can be
        ///	    divided into two sub-processes: dry and wet deposition. The rate of
        ///	    deposition, or the deposition velocity, is slowest for particles of
        ///	    an intermediate size. Mechanisms for deposition are most effective
        ///	    for either very small or very large particles. Very large particles
        ///	    will settle out quickly through sedimentation (settling) or
        ///	    impaction processes, while Brownian diffusion has the greatest
        ///	    influence on small particles (WP, https://goo.gl/0j0VC3)
        ///	  </para>
        /// </summary>
        Deposition,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Succession is the act or process of following in order or sequence.
        ///	    (WP, https://goo.gl/NKDUMR)
        ///	  </para>
        /// </summary>
        Succession,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Photosynthesis is a process used by plants and other organisms to
        ///	    convert light energy, normally from the Sun, into chemical energy
        ///	    that can be later released to fuel the organisms' activities
        ///	    (energy transformation). This chemical energy is stored in
        ///	    carbohydrate molecules, such as sugars, which are synthesized from
        ///	    carbon dioxide and water – hence the name photosynthesis, from the
        ///	    Greek φῶς, phōs, "light", and σύνθεσις, synthesis, "putting
        ///	    together". In most cases, oxygen is also released as a
        ///	    waste product. Most plants, most algae, and cyanobacteria perform
        ///	    photosynthesis; such organisms are called photoautotrophs.
        ///	    Photosynthesis maintains atmospheric oxygen levels and supplies all
        ///	    of the organic compounds and most of the energy necessary for life
        ///	    on Earth (WP, https://goo.gl/hLE4bR).
        ///	  </para>
        /// </summary>
        Photosynthesis,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProcessSubject", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessSubject
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The focus of a process.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProcessSubjectVocabulary", Namespace="")]
    public enum ProcessSubjectVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In biology, an organism is any contiguous living system, such as an
        ///	    animal, plant, fungus, or bacterium. All known types of organisms
        ///	    are capable of some degree of response to stimuli, reproduction,
        ///	    growth and development and homeostasis. An organism consists of one
        ///	    or more cells; when it has one cell it is known as a unicellular
        ///	    organism; and when it has more than one it is known as a
        ///	    multicellular organism. Most unicellular organisms are of
        ///	    microscopic size and are thus classified as microorganisms. Humans
        ///	    are multicellular organisms composed of many trillions of cells
        ///	    grouped into specialized tissues and organs (WP,
        ///	    https://goo.gl/bFZhq).
        ///	  </para>
        /// </summary>
        Organism,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A chemical substance is a form of matter that has constant chemical
        ///	    composition and characteristic properties.[1] It cannot be
        ///	    separated into components by physical separation methods, i.e.,
        ///	    without breaking chemical bonds. Chemical substances can be
        ///	    chemical elements, chemical compounds, ions or alloys (WP,
        ///	    https://goo.gl/wXipK1)
        ///	  </para>
        /// </summary>
        Chemical,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The common definition of matter is anything that has mass and
        ///	    volume (occupies space) (WP, https://goo.gl/5BCyTf).
        ///	  </para>
        /// </summary>
        Matter,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In physics, energy is a property of objects which can be
        ///	    transferred to other objects or converted into different forms.[1]
        ///	    The "ability of a system to perform work" is a common description,
        ///	    but it is misleading because energy is not necessarily available to
        ///	    do work.[2] For instance, in SI units, energy is measured in
        ///	    joules, and one joule is defined "mechanically", being the energy
        ///	    transferred to an object by the mechanical work of moving it a
        ///	    distance of 1 metre against a force of 1 newton.[note 1] However,
        ///	    there are many other definitions of energy, depending on the
        ///	    context, such as thermal energy, radiant energy, electromagnetic,
        ///	    nuclear, etc., where definitions are derived that are the most
        ///	    convenient (WP, https://goo.gl/SR4CGD).
        ///	  </para>
        /// </summary>
        Energy,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Interaction", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Interaction
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A named interaction (Predation, Parasisitm, ...)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("interactionName", Namespace="", DataType="string")]
        public string InteractionName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of interaction partner covers kingdoms and the envoriment
        ///						  (Plant, Animal, Fungi, Bacteria, Archaea, Virus, Environment)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("interactionPartnerOne", Namespace="")]
        public InteractionPartner InteractionPartnerOne { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A direction of the interaction (Acts On, Is Affected By, Mutually Interacts
        ///						  With)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("interactionDirection", Namespace="")]
        public InteractionDirection InteractionDirection { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  An interaction quality (Neutralism, Amensalism, Commensalism, ...)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("interactionQuality", Namespace="")]
        public InteractionQuality InteractionQuality { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of interaction partner covers kingdoms and the envoriment
        ///						  (Plant, Animal, Fungi, Bacteria, Archaea, Virus, Environment)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("interactionPartnerTwo", Namespace="")]
        public InteractionPartner InteractionPartnerTwo { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("InteractionPartner", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InteractionPartner
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of interaction partner
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("InteractionPartnerVocabulary", Namespace="")]
    public enum InteractionPartnerVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Plants, also called green plants, are multicellular eukaryotes of
        ///	    the kingdom Plantae. They form an unranked clade Viridiplantae that
        ///	    includes the flowering plants, conifers and other gymnosperms,
        ///	    ferns, clubmosses, hornworts, liverworts, mosses and the green
        ///	    algae (WP, https://goo.gl/3ro18) This group of interaction partners
        ///	    is not taxonomically correct and compared to green plants also
        ///	    includes red and brown algae.
        ///	  </para>
        /// </summary>
        Plantae,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Animals are multicellular, eukaryotic organisms of the kingdom
        ///	    Animalia (also called Metazoa). All animals are motile, meaning
        ///	    they can move spontaneously and independently, at some point in
        ///	    their lives. Their body plan eventually becomes fixed as they
        ///	    develop, although some undergo a process of metamorphosis later on
        ///	    in their lives. All animals are heterotrophs: they must ingest
        ///	    other organisms or their products for sustenance (WP,
        ///	    https://goo.gl/u2bGdR)
        ///	  </para>
        /// </summary>
        Animalia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A fungus [...] is any member of the group of eukaryotic organisms
        ///	    that includes unicellular microorganisms such as yeasts and molds,
        ///	    as well as multicellular fungi that produce familiar fruiting forms
        ///	    known as mushrooms. These organisms are classified as a kingdom,
        ///	    Fungi, which is separate from the other life kingdoms of plants,
        ///	    animals, protists, and bacteria (WP, https://goo.gl/gN6qZQ)
        ///	  </para>
        /// </summary>
        Fungi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Bacteria [...] constitute a large domain of prokaryotic
        ///	    microorganisms. Typically a few micrometres in length, bacteria
        ///	    have a number of shapes, ranging from spheres to rods and spirals
        ///	    (WP, https://goo.gl/4JbsxA)
        ///	  </para>
        /// </summary>
        Bacteria,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Archaea [...] constitute a domain or kingdom of single-celled
        ///	    microorganisms. These microbes are prokaryotes, meaning that they
        ///	    have no cell nucleus or any other membrane-bound organelles in
        ///	    their cells (WP, https://goo.gl/8boHS)
        ///	  </para>
        /// </summary>
        Archaea,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The Chromista are a eukaryotic supergroup, probably polyphyletic,
        ///	    which may be treated as a separate kingdom or included among the
        ///	    Protista. They include all algae whose chloroplasts contain
        ///	    chlorophylls a and c, as well as various colorless forms that are
        ///	    closely related to them. These chloroplasts are surrounded by four
        ///	    membranes, and are believed to have been acquired from some red
        ///	    algae (WP, https://goo.gl/oCxD5v)
        ///	  </para>
        /// </summary>
        Chromista,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In some systems of biological classification, the Protozoa are a
        ///	    diverse group of unicellular eukaryotic organisms. Historically,
        ///	    protozoa were defined as single-celled organisms with animal-like
        ///	    behaviors, such as motility and predation. The group was regarded
        ///	    as the zoological counterpart to the "protophyta", which were
        ///	    considered to be plant-like, as they are capable of photosynthesis.
        ///	    The terms protozoa and protozoans are also used informally to
        ///	    designate single-celled, non-photosynthetic protists, such as
        ///	    ciliates, amoebae and flagellates (WP, https://goo.gl/zrsJQQ )
        ///	  </para>
        /// </summary>
        Protozoa,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A virus is a small infectious agent that replicates only inside the
        ///	    living cells of other organisms. Viruses can infect all types of
        ///	    life forms, from animals and plants to microorganisms, including
        ///	    bacteria and archaea (WP, https://goo.gl/L9Gyc)
        ///	  </para>
        /// </summary>
        Viruses,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The environment as interaction partner represents an interaction
        ///	    with any abiotic factor (temperature, resources, ...)
        ///	  </para>
        /// </summary>
        Environment,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("InteractionDirection", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InteractionDirection
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A direction type for an interaction. It is obvious that real world
    ///	interactions are more complex than experimentally observed ones. Thus
    ///	the interaction direction aks for the focus of the study not for a
    ///	estimation on how the interaction partners stand to each other in the
    ///	real world.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("InteractionDirectionVocabulary", Namespace="")]
    public enum InteractionDirectionVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Affects means that the first interaction partner was observed
        ///	    acting on the second or having an effect or impact on the second.
        ///	    This formulates statements like Animalia Affects Plant (e.g.
        ///	    herbivory).
        ///	  </para>
        /// </summary>
        Affects,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Is affected by means that the first interaction partner is affect
        ///	    by the second and that this is the focus of the study. This
        ///	    formulates statements like Plantae Is Affected By Virus (e.g.
        ///	    infection)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Is Affected By")]
        Is_Affected_By,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The mutually interact means that both interactionn partners are
        ///	    mutually affecting each other and that this is the focus of thes
        ///	    study. This helps to formulate statements like Plant Mutually
        ///	    Interacts Animalia (Population Dynamics).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Mutually Interacts")]
        Mutually_Interacts,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("InteractionQuality", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InteractionQuality
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The quality of interaction that was in the focus of a study
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("InteractionQualityVocabulary", Namespace="")]
    public enum InteractionQualityVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Neutralism describes the relationship between two species that
        ///	    interact but do not affect each other. It describes interactions
        ///	    where the health of one species has absolutely no effect whatsoever
        ///	    on that of the other. Examples of true neutralism are virtually
        ///	    impossible to prove and most ecologists (as well as textbooks)
        ///	    would agree that this concept does not exist. When dealing with the
        ///	    complex networks of interactions presented by ecosystems, one
        ///	    cannot assert positively that there is absolutely no competition
        ///	    between or benefit to either species. However, the term is often
        ///	    used to describe situations where interactions are negligible or
        ///	    insignificant. (WP, https://goo.gl/WcofVJ)
        ///	  </para>
        /// </summary>
        Neutralism,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Amensalism is an interaction where an organism inflicts harm to
        ///	    another organism without any costs or benefits received by itself.
        ///	    A clear case of amensalism is where sheep or cattle trample grass.
        ///	    Whilst the presence of the grass causes negligible detrimental
        ///	    effects to the animal's hoof, the grass suffers from being crushed.
        ///	    Amensalism is often used to describe strongly asymmetrical
        ///	    competitive interactions, such as has been observed between the
        ///	    Spanish ibex and weevils of the genus Timarcha which feed upon the
        ///	    same type of shrub. Whilst the presence of the weevil has almost no
        ///	    influence on food availability, the presence of ibex has an
        ///	    enormous detrimental effect on weevil numbers, as they consume
        ///	    significant quantities of plant matter and incidentally ingest the
        ///	    weevils upon it (WP, https://goo.gl/WcofVJ).
        ///	  </para>
        /// </summary>
        Amensalism,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Commensalism benefits one organism and the other organism is
        ///	    neither benefited nor harmed. It occurs when one organism takes
        ///	    benefits by interacting with another organism by which the host
        ///	    organism is not affected. A good example is a remora living with a
        ///	    shark. Remoras eat leftover food from the shark. The shark is not
        ///	    affected in the process, as remoras eat only leftover food of the
        ///	    shark, which does not deplete the shark's resources (WP,
        ///	    https://goo.gl/WcofVJ).
        ///	  </para>
        /// </summary>
        Commensalism,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Mutualism is an interaction between two or more species, where
        ///	    species derive a mutual benefit, for example an increased carrying
        ///	    capacity. Similar interactions within a species are known as
        ///	    co-operation. Mutualism may be classified in terms of the closeness
        ///	    of association, the closest being symbiosis, which is often
        ///	    confused with mutualism. One or both species involved in the
        ///	    interaction may be obligate, meaning they cannot survive in the
        ///	    short or long term without the other species. Though mutualism has
        ///	    historically received less attention than other interactions such
        ///	    as predation, it is very important subject in ecology. Examples
        ///	    include cleaner fish, pollination and seed dispersal, gut flora,
        ///	    Müllerian mimicry and nitrogen fixation by bacteria in the root
        ///	    nodules of legumes (WP, https://goo.gl/WcofVJ).
        ///	  </para>
        /// </summary>
        Mutualism,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Competition can be defined as an interaction between organisms or
        ///	    species, in which the fitness of one is lowered by the presence of
        ///	    another. Limited supply of at least one resource (such as food,
        ///	    water, and territory) used by both usually facilitates this type of
        ///	    interaction, although the competition may also exist over other
        ///	    'amenities', such as females for reproduction (in case of male
        ///	    organisms of the same species) (WP, https://goo.gl/WcofVJ).
        ///	  </para>
        /// </summary>
        Competition,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In antagonistic interactions, one species benefits at the expense
        ///	    of another. Predation is an interaction between organisms in which
        ///	    one organism captures biomass from another. It is often used as a
        ///	    synonym for carnivory but in its widest definition includes all
        ///	    forms of one organism eating another, regardless of trophic level
        ///	    (e.g., herbivory), closeness of association (e.g., parasitism and
        ///	    parasitoidism) and harm done to prey (e.g., grazing). Intraguild
        ///	    predation occurs when an organism preys upon another of different
        ///	    species but at the same trophic level (e.g., coyotes kill and
        ///	    ingest gray foxes in southern California). Batesian mimicry is also
        ///	    an antagonistic interaction, where one species has evolved to mimic
        ///	    another, to the advantage of the copying species but to the
        ///	    detriment of the species being mimicked (WP,
        ///	    https://goo.gl/WcofVJ).
        ///	  </para>
        /// </summary>
        Antagonism,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ChemicalContext", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChemicalContext
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around chemical elements
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Elements", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Element", Namespace="")]
        public System.Collections.Generic.List<Element> Elements { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Elements-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Elements collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElementsSpecified
        {
            get
            {
                return (this.Elements.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ChemicalContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ChemicalContext" /> class.</para>
        /// </summary>
        public ChemicalContext()
        {
            this.Elements = new System.Collections.Generic.List<Element>();
            this.Isotopes = new System.Collections.Generic.List<Isotope>();
            this.Compounds = new System.Collections.Generic.List<Compound>();
            this.Functions = new System.Collections.Generic.List<Function>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around chemical isotopes
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Isotopes", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Isotope", Namespace="")]
        public System.Collections.Generic.List<Isotope> Isotopes { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Isotopes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Isotopes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsotopesSpecified
        {
            get
            {
                return (this.Isotopes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around chemical compunds
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Compounds", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Compound", Namespace="")]
        public System.Collections.Generic.List<Compound> Compounds { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Compounds-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Compounds collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CompoundsSpecified
        {
            get
            {
                return (this.Compounds.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around chemical functions
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Functions", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Function", Namespace="")]
        public System.Collections.Generic.List<Function> Functions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Functions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Functions collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FunctionsSpecified
        {
            get
            {
                return (this.Functions.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Element", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Element
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A named chemical element
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("elementName", Namespace="")]
        public ElementName ElementName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ElementName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ElementName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The name of a chemical element
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ElementNameVocabulary", Namespace="")]
    public enum ElementNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Hydrogen is a chemical element with chemical symbol H and atomic number 1
        ///	    (en.wikipedia.org/wiki/Hydrogen). CHEBI:18276
        ///	  </para>
        /// </summary>
        Hydrogen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Helium is a chemical element with chemical symbol He and atomic number 2
        ///	    (en.wikipedia.org/wiki/Helium). CHEBI:30217
        ///	  </para>
        /// </summary>
        Helium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lithium is a chemical element with chemical symbol Li and atomic number 3
        ///	    (en.wikipedia.org/wiki/Lithium). CHEBI:30145
        ///	  </para>
        /// </summary>
        Lithium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Beryllium is a chemical element with chemical symbol Be and atomic number 4
        ///	    (en.wikipedia.org/wiki/Beryllium). CHEBI:30501
        ///	  </para>
        /// </summary>
        Beryllium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Boron is a chemical element with chemical symbol B and atomic number 5
        ///	    (en.wikipedia.org/wiki/Boron). CHEBI:27560
        ///	  </para>
        /// </summary>
        Boron,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Carbon is a chemical element with chemical symbol C and atomic number 6
        ///	    (en.wikipedia.org/wiki/Carbon). CHEBI:27594
        ///	  </para>
        /// </summary>
        Carbon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nitrogen is a chemical element with chemical symbol N and atomic number 7
        ///	    (en.wikipedia.org/wiki/Nitrogen). CHEBI:25555
        ///	  </para>
        /// </summary>
        Nitrogen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Oxygen is a chemical element with chemical symbol O and atomic number 8
        ///	    (en.wikipedia.org/wiki/Oxygen). CHEBI:49637
        ///	  </para>
        /// </summary>
        Oxygen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Fluorine is a chemical element with chemical symbol F and atomic number 9
        ///	    (en.wikipedia.org/wiki/Fluorine). CHEBI:24061
        ///	  </para>
        /// </summary>
        Fluorine,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Neon is a chemical element with chemical symbol Ne and atomic number 10
        ///	    (en.wikipedia.org/wiki/Neon). CHEBI:33310
        ///	  </para>
        /// </summary>
        Neon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Sodium is a chemical element with chemical symbol Na and atomic number 11
        ///	    (en.wikipedia.org/wiki/Sodium). CHEBI:26708
        ///	  </para>
        /// </summary>
        Sodium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Magnesium is a chemical element with chemical symbol Mg and atomic number 12
        ///	    (en.wikipedia.org/wiki/Magnesium). CHEBI:25107
        ///	  </para>
        /// </summary>
        Magnesium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Aluminium is a chemical element with chemical symbol Al and atomic number 13
        ///	    (en.wikipedia.org/wiki/Aluminium). CHEBI:28984
        ///	  </para>
        /// </summary>
        Aluminium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Silicon is a chemical element with chemical symbol Si and atomic number 14
        ///	    (en.wikipedia.org/wiki/Silicon). CHEBI:27573
        ///	  </para>
        /// </summary>
        Silicon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Phosphorus is a chemical element with chemical symbol P and atomic number 15
        ///	    (en.wikipedia.org/wiki/Phosphorus). CHEBI:28659
        ///	  </para>
        /// </summary>
        Phosphorus,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Sulfur is a chemical element with chemical symbol S and atomic number 16
        ///	    (en.wikipedia.org/wiki/Sulfur). CHEBI:26833
        ///	  </para>
        /// </summary>
        Sulfur,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Chlorine is a chemical element with chemical symbol Cl and atomic number 17
        ///	    (en.wikipedia.org/wiki/Chlorine). CHEBI:23116
        ///	  </para>
        /// </summary>
        Chlorine,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Argon is a chemical element with chemical symbol Ar and atomic number 18
        ///	    (en.wikipedia.org/wiki/Argon). CHEBI:49475
        ///	  </para>
        /// </summary>
        Argon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Potassium is a chemical element with chemical symbol K and atomic number 19
        ///	    (en.wikipedia.org/wiki/Potassium). CHEBI:23116
        ///	  </para>
        /// </summary>
        Potassium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Calcium is a chemical element with chemical symbol Ca and atomic number 20
        ///	    (en.wikipedia.org/wiki/Calcium). CHEBI:22984
        ///	  </para>
        /// </summary>
        Calcium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Scandium is a chemical element with chemical symbol Sc and atomic number 21
        ///	    (en.wikipedia.org/wiki/Scandium). CHEBI:33330
        ///	  </para>
        /// </summary>
        Scandium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Titanium is a chemical element with chemical symbol Ti and atomic number 22
        ///	    (en.wikipedia.org/wiki/Titanium). CHEBI:33341
        ///	  </para>
        /// </summary>
        Titanium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Vanadium is a chemical element with chemical symbol V and atomic number 23
        ///	    (en.wikipedia.org/wiki/Vanadium). CHEBI:27698
        ///	  </para>
        /// </summary>
        Vanadium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Chromium is a chemical element with chemical symbol Cr and atomic number 24
        ///	    (en.wikipedia.org/wiki/Chromium). CHEBI:28073
        ///	  </para>
        /// </summary>
        Chromium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Manganese is a chemical element with chemical symbol Mn and atomic number 25
        ///	    (en.wikipedia.org/wiki/Manganese). CHEBI:18291
        ///	  </para>
        /// </summary>
        Manganese,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Iron is a chemical element with chemical symbol Fe and atomic number 26
        ///	    (en.wikipedia.org/wiki/Iron). CHEBI:18248
        ///	  </para>
        /// </summary>
        Iron,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Cobalt is a chemical element with chemical symbol Co and atomic number 27
        ///	    (en.wikipedia.org/wiki/Cobalt). CHEBI:27638
        ///	  </para>
        /// </summary>
        Cobalt,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nickel is a chemical element with chemical symbol Ni and atomic number 28
        ///	    (en.wikipedia.org/wiki/Nickel). CHEBI:28112
        ///	  </para>
        /// </summary>
        Nickel,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Copper is a chemical element with chemical symbol Cu and atomic number 29
        ///	    (en.wikipedia.org/wiki/Copper). CHEBI:28694
        ///	  </para>
        /// </summary>
        Copper,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Zinc is a chemical element with chemical symbol Zn and atomic number 30
        ///	    (en.wikipedia.org/wiki/Zinc). CHEBI:27363
        ///	  </para>
        /// </summary>
        Zinc,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Gallium is a chemical element with chemical symbol Ga and atomic number 31
        ///	    (en.wikipedia.org/wiki/Gallium). CHEBI:33250
        ///	  </para>
        /// </summary>
        Gallium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Germanium is a chemical element with chemical symbol Ge and atomic number 32
        ///	    (en.wikipedia.org/wiki/Germanium). CHEBI:30441
        ///	  </para>
        /// </summary>
        Germanium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Arsenic is a chemical element with chemical symbol As and atomic number 33
        ///	    (en.wikipedia.org/wiki/Arsenic). CHEBI:27563
        ///	  </para>
        /// </summary>
        Arsenic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Selenium is a chemical element with chemical symbol Se and atomic number 34
        ///	    (en.wikipedia.org/wiki/Selenium). CHEBI:27568
        ///	  </para>
        /// </summary>
        Selenium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Bromine is a chemical element with chemical symbol Br and atomic number 35
        ///	    (en.wikipedia.org/wiki/Bromine). CHEBI:22927
        ///	  </para>
        /// </summary>
        Bromine,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Krypton is a chemical element with chemical symbol Kr and atomic number 36
        ///	    (en.wikipedia.org/wiki/Krypton). CHEBI:49696
        ///	  </para>
        /// </summary>
        Krypton,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Rubidium is a chemical element with chemical symbol Rb and atomic number 37
        ///	    (en.wikipedia.org/wiki/Rubidium). CHEBI:33322
        ///	  </para>
        /// </summary>
        Rubidium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Strontium is a chemical element with chemical symbol Sr and atomic number 38
        ///	    (en.wikipedia.org/wiki/Strontium). CHEBI:33324
        ///	  </para>
        /// </summary>
        Strontium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Yttrium is a chemical element with chemical symbol Y and atomic number 39
        ///	    (en.wikipedia.org/wiki/Yttrium). CHEBI:33331
        ///	  </para>
        /// </summary>
        Yttrium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Zirconium is a chemical element with chemical symbol Zr and atomic number 40
        ///	    (en.wikipedia.org/wiki/Zirconium). CHEBI:33342
        ///	  </para>
        /// </summary>
        Zirconium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Niobium is a chemical element with chemical symbol Nb and atomic number 41
        ///	    (en.wikipedia.org/wiki/Niobium). CHEBI:33344
        ///	  </para>
        /// </summary>
        Niobium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Molybdenum is a chemical element with chemical symbol Mo and atomic number 42
        ///	    (en.wikipedia.org/wiki/Molybdenum). CHEBI:28685
        ///	  </para>
        /// </summary>
        Molybdenum,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Technetium is a chemical element with chemical symbol Tc and atomic number 43
        ///	    (en.wikipedia.org/wiki/Technetium). CHEBI:33353
        ///	  </para>
        /// </summary>
        Technetium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ruthenium is a chemical element with chemical symbol Ru and atomic number 44
        ///	    (en.wikipedia.org/wiki/Ruthenium). CHEBI:30682
        ///	  </para>
        /// </summary>
        Ruthenium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Rhodium is a chemical element with chemical symbol Rh and atomic number 45
        ///	    (en.wikipedia.org/wiki/Rhodium). CHEBI:33359.
        ///	  </para>
        /// </summary>
        Rhodium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Palladium is a chemical element with chemical symbol Pd and atomic number 46
        ///	    (en.wikipedia.org/wiki/Palladium). CHEBI:33363
        ///	  </para>
        /// </summary>
        Palladium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Silver is a chemical element with chemical symbol Ag and atomic number 47
        ///	    (en.wikipedia.org/wiki/Silver). CHEBI:30512
        ///	  </para>
        /// </summary>
        Silver,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Cadmium is a chemical element with chemical symbol Cd and atomic number 48
        ///	    (en.wikipedia.org/wiki/Cadmium). CHEBI:22977
        ///	  </para>
        /// </summary>
        Cadmium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Indium is a chemical element with chemical symbol In and atomic number 49
        ///	    (en.wikipedia.org/wiki/Indium). CHEBI:30430
        ///	  </para>
        /// </summary>
        Indium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Tin is a chemical element with chemical symbol Zn and atomic number 50
        ///	    (en.wikipedia.org/wiki/Tin). CHEBI:27007
        ///	  </para>
        /// </summary>
        Tin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Antimony is a chemical element with chemical symbol Sb and atomic number 51
        ///	    (en.wikipedia.org/wiki/Antimony). CHEBI:30513
        ///	  </para>
        /// </summary>
        Antimony,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Tellurium is a chemical element with chemical symbol Te and atomic number 52
        ///	    (en.wikipedia.org/wiki/Tellurium). CHEBI:30452
        ///	  </para>
        /// </summary>
        Tellurium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Iodine is a chemical element with chemical symbol I and atomic number 53
        ///	    (en.wikipedia.org/wiki/Iodine). CHEBI:24859
        ///	  </para>
        /// </summary>
        Iodine,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Xenon is a chemical element with chemical symbol Xe and atomic number 54
        ///	    (en.wikipedia.org/wiki/Xenon). CHEBI:49957
        ///	  </para>
        /// </summary>
        Xenon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Caesium is a chemical element with chemical symbol Cs and atomic number 55
        ///	    (en.wikipedia.org/wiki/Caesium). CHEBI:30514
        ///	  </para>
        /// </summary>
        Caesium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Barium is a chemical element with chemical symbol Ba and atomic number 56
        ///	    (en.wikipedia.org/wiki/Barium). CHEBI:32594
        ///	  </para>
        /// </summary>
        Barium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lanthanum is a chemical element with chemical symbol La and atomic number 57
        ///	    (en.wikipedia.org/wiki/Lanthanum). CHEBI:33336
        ///	  </para>
        /// </summary>
        Lanthanum,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Cerium is a chemical element with chemical symbol Ce and atomic number 58
        ///	    (en.wikipedia.org/wiki/Cerium). CHEBI:33369
        ///	  </para>
        /// </summary>
        Cerium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Praseodymium is a chemical element with chemical symbol Pr and atomic number 59
        ///	    (en.wikipedia.org/wiki/Praseodymium). CHEBI:49828
        ///	  </para>
        /// </summary>
        Praseodymium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Neodymium is a chemical element with chemical symbol Nd and atomic number 60
        ///	    (en.wikipedia.org/wiki/Neodymium). CHEBI:33372
        ///	  </para>
        /// </summary>
        Neodymium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Promethium is a chemical element with chemical symbol Pm and atomic number 61
        ///	    (en.wikipedia.org/wiki/Promethium). CHEBI:33373
        ///	  </para>
        /// </summary>
        Promethium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Samarium is a chemical element with chemical symbol Sm and atomic number 62
        ///	    (en.wikipedia.org/wiki/Samarium). CHEBI:33374
        ///	  </para>
        /// </summary>
        Samarium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Europium is a chemical element with chemical symbol Eu and atomic number 63
        ///	    (en.wikipedia.org/wiki/Europium). CHEBI:32999
        ///	  </para>
        /// </summary>
        Europium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Gadolinium is a chemical element with chemical symbol Gd and atomic number 64
        ///	    (en.wikipedia.org/wiki/Gadolinium). CHEBI:33375
        ///	  </para>
        /// </summary>
        Gadolinium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Terbium is a chemical element with chemical symbol Tb and atomic number 65
        ///	    (en.wikipedia.org/wiki/Terbium). CHEBI:33376
        ///	  </para>
        /// </summary>
        Terbium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Dysprosium is a chemical element with chemical symbol Dy and atomic number 66
        ///	    (en.wikipedia.org/wiki/Dysprosium). CHEBI:33377
        ///	  </para>
        /// </summary>
        Dysprosium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Holmium is a chemical element with chemical symbol Ho and atomic number 67
        ///	    (en.wikipedia.org/wiki/Holmium). CHEBI:49648
        ///	  </para>
        /// </summary>
        Holmium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Erbium is a chemical element with chemical symbol Er and atomic number 68
        ///	    (en.wikipedia.org/wiki/Erbium). CHEBI:33379
        ///	  </para>
        /// </summary>
        Erbium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Thulium is a chemical element with chemical symbol Tm and atomic number 69
        ///	    (en.wikipedia.org/wiki/Thulium). CHEBI:33380
        ///	  </para>
        /// </summary>
        Thulium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ytterbium is a chemical element with chemical symbol Yb and atomic number 70
        ///	    (en.wikipedia.org/wiki/Ytterbium). CHEBI:33381
        ///	  </para>
        /// </summary>
        Ytterbium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lutetium is a chemical element with chemical symbol Lu and atomic number 71
        ///	    (en.wikipedia.org/wiki/Lutetium). CHEBI:33382
        ///	  </para>
        /// </summary>
        Lutetium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Hafnium is a chemical element with chemical symbol Hf and atomic number 72
        ///	    (en.wikipedia.org/wiki/Hafnium). CHEBI:33343
        ///	  </para>
        /// </summary>
        Hafnium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Tantalum is a chemical element with chemical symbol Ta and atomic number 73
        ///	    (en.wikipedia.org/wiki/Tantalum). CHEBI:33348
        ///	  </para>
        /// </summary>
        Tantalum,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Tungsten is a chemical element with chemical symbol W and atomic number 74
        ///	    (en.wikipedia.org/wiki/Tungsten). CHEBI:27998
        ///	  </para>
        /// </summary>
        Tungsten,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Rhenium is a chemical element with chemical symbol Re and atomic number 75
        ///	    (en.wikipedia.org/wiki/Rhenium). CHEBI:49882
        ///	  </para>
        /// </summary>
        Rhenium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Osmium	is a chemical element with chemical symbol Os and atomic number 76
        ///	    (en.wikipedia.org/wiki/Osmium). CHEBI:30687
        ///	  </para>
        /// </summary>
        Osmium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Iridium is a chemical element with chemical symbol Ir and atomic number 77
        ///	    (en.wikipedia.org/wiki/Iridium). CHEBI:49666
        ///	  </para>
        /// </summary>
        Iridium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Platinum is a chemical element with chemical symbol Pt and atomic number 78
        ///	    (en.wikipedia.org/wiki/Platinum). CHEBI:33364
        ///	  </para>
        /// </summary>
        Platinum,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Gold is a chemical element with chemical symbol Au and atomic number 79
        ///	    (en.wikipedia.org/wiki/Gold). CHEBI:29287
        ///	  </para>
        /// </summary>
        Gold,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Mercury is a chemical element with chemical symbol Hg and atomic number 80
        ///	    (en.wikipedia.org/wiki/Mercury). CHEBI:25195
        ///	  </para>
        /// </summary>
        Mercury,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Thallium is a chemical element with chemical symbol Tl and atomic number 81
        ///	    (en.wikipedia.org/wiki/Thallium). CHEBI:30440
        ///	  </para>
        /// </summary>
        Thallium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lead is a chemical element with chemical symbol Pb and atomic number 82
        ///	    (en.wikipedia.org/wiki/Lead). CHEBI:27889
        ///	  </para>
        /// </summary>
        Lead,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Bismuth is a chemical element with chemical symbol Bi and atomic number 83
        ///	    (en.wikipedia.org/wiki/Bismuth). CHEBI:33301
        ///	  </para>
        /// </summary>
        Bismuth,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Polonium is a chemical element with chemical symbol Po and atomic number 84
        ///	    (en.wikipedia.org/wiki/Polonium). CHEBI:33313
        ///	  </para>
        /// </summary>
        Polonium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Astatine is a chemical element with chemical symbol At and atomic number 85
        ///	    (en.wikipedia.org/wiki/Astatine). CHEBI:30415
        ///	  </para>
        /// </summary>
        Astatine,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Radon is a chemical element with chemical symbol Rn and atomic number 86
        ///	    (en.wikipedia.org/wiki/Radon). CHEBI:33314
        ///	  </para>
        /// </summary>
        Radon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Francium is a chemical element with chemical symbol Fr and atomic number 87
        ///	    (en.wikipedia.org/wiki/Francium). CHEBI:33323
        ///	  </para>
        /// </summary>
        Francium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Radium is a chemical element with chemical symbol Ra and atomic number 88
        ///	    (en.wikipedia.org/wiki/Radium). CHEBI:33325
        ///	  </para>
        /// </summary>
        Radium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Actinium is a chemical element with chemical symbol Ac and atomic number 89
        ///	    (en.wikipedia.org/wiki/Actinium). CHEBI:33337
        ///	  </para>
        /// </summary>
        Actinium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Thorium is a chemical element with chemical symbol Th and atomic number 90
        ///	    (en.wikipedia.org/wiki/Thorium). CHEBI:33385
        ///	  </para>
        /// </summary>
        Thorium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Protactinium is a chemical element with chemical symbol Pa and atomic number 91
        ///	    (en.wikipedia.org/wiki/Protactinium). CHEBI:33386
        ///	  </para>
        /// </summary>
        Protactinium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Uranium is a chemical element with chemical symbol U and atomic number 92
        ///	    (en.wikipedia.org/wiki/Uranium). CHEBI:27214
        ///	  </para>
        /// </summary>
        Uranium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Neptunium is a chemical element with chemical symbol Np and atomic number 93
        ///	    (en.wikipedia.org/wiki/Neptunium). CHEBI:33387
        ///	  </para>
        /// </summary>
        Neptunium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Plutonium is a chemical element with chemical symbol Pu and atomic number 94
        ///	    (en.wikipedia.org/wiki/Plutonium). CHEBI:33388
        ///	  </para>
        /// </summary>
        Plutonium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Americium is a chemical element with chemical symbol Am and atomic number 95
        ///	    (en.wikipedia.org/wiki/Americium). CHEBI:33389
        ///	  </para>
        /// </summary>
        Americium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Curium is a chemical element with chemical symbol Cm and atomic number 96
        ///	    (en.wikipedia.org/wiki/Curium). CHEBI:33390
        ///	  </para>
        /// </summary>
        Curium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Berkelium is a chemical element with chemical symbol Bk and atomic number 97
        ///	    (en.wikipedia.org/wiki/Berkelium). CHEBI:33391
        ///	  </para>
        /// </summary>
        Berkelium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Californium is a chemical element with chemical symbol Cf and atomic number 98
        ///	    (en.wikipedia.org/wiki/Californium). CHEBI:33392
        ///	  </para>
        /// </summary>
        Californium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Einsteinium is a chemical element with chemical symbol Es and atomic number 99
        ///	    (en.wikipedia.org/wiki/Einsteinium). CHEBI:33393
        ///	  </para>
        /// </summary>
        Einsteinium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Fermium is a chemical element with chemical symbol Fm and atomic number 100
        ///	    (en.wikipedia.org/wiki/Fermium). CHEBI:33394
        ///	  </para>
        /// </summary>
        Fermium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Mendelevium is a chemical element with chemical symbol Md and atomic number 101
        ///	    (en.wikipedia.org/wiki/Mendelevium). CHEBI:33395
        ///	  </para>
        /// </summary>
        Mendelevium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nobelium is a chemical element with chemical symbol No and atomic number 102
        ///	    (en.wikipedia.org/wiki/Nobelium). CHEBI:33396
        ///	  </para>
        /// </summary>
        Nobelium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lawrencium is a chemical element with chemical symbol Lr and atomic number 103
        ///	    (en.wikipedia.org/wiki/Lawrencium). CHEBI:33397
        ///	  </para>
        /// </summary>
        Lawrencium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Rutherfordium is a chemical element with chemical symbol Rf and atomic number
        ///	    104 (en.wikipedia.org/wiki/Rutherfordium). CHEBI:33346
        ///	  </para>
        /// </summary>
        Rutherfordium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Dubnium is a chemical element with chemical symbol Db and atomic number 105
        ///	    (en.wikipedia.org/wiki/Dubnium). CHEBI:33349
        ///	  </para>
        /// </summary>
        Dubnium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Seaborgium is a chemical element with chemical symbol Sg and atomic number 106
        ///	    (en.wikipedia.org/wiki/Seaborgium). CHEBI:33351
        ///	  </para>
        /// </summary>
        Seaborgium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Bohrium is a chemical element with chemical symbol Bh and atomic number 107
        ///	    (en.wikipedia.org/wiki/Bohrium). CHEBI:33355
        ///	  </para>
        /// </summary>
        Bohrium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Hassium is a chemical element with chemical symbol Hs and atomic number 108
        ///	    (en.wikipedia.org/wiki/Hassium). CHEBI:33357
        ///	  </para>
        /// </summary>
        Hassium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Meitnerium is a chemical element with chemical symbol Mt and atomic number 109
        ///	    (en.wikipedia.org/wiki/Meitnerium). CHEBI:33361
        ///	  </para>
        /// </summary>
        Meitnerium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Darmstadtium is a chemical element with chemical symbol Ds and atomic number
        ///	    110 (en.wikipedia.org/wiki/Darmstadtium). CHEBI:33367
        ///	  </para>
        /// </summary>
        Darmstadtium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Roentgenium is a chemical element with chemical symbol Rg and atomic number 111
        ///	    (en.wikipedia.org/wiki/Roentgenium). CHEBI:33368
        ///	  </para>
        /// </summary>
        Roentgenium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Copernicium is a chemical element with chemical symbol Cn and atomic number 112
        ///	    (en.wikipedia.org/wiki/Copernicium). CHEBI:33517
        ///	  </para>
        /// </summary>
        Copernicium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ununtrium is a chemical element with chemical symbol Uut and atomic number 113
        ///	    (en.wikipedia.org/wiki/Ununtrium).
        ///	  </para>
        /// </summary>
        Ununtrium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Flerovium is a chemical element with chemical symbol Fl and atomic number 114
        ///	    (en.wikipedia.org/wiki/Flerovium).
        ///	  </para>
        /// </summary>
        Flerovium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ununpentium is a chemical element with chemical symbol Uup and atomic number
        ///	    115 (en.wikipedia.org/wiki/Ununpentium).
        ///	  </para>
        /// </summary>
        Ununpentium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Livermorium is a chemical element with chemical symbol Lv and atomic number 116
        ///	    (en.wikipedia.org/wiki/Livermorium).
        ///	  </para>
        /// </summary>
        Livermorium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ununseptium is a chemical element with chemical symbol Uus and atomic number
        ///	    117 (en.wikipedia.org/wiki/Ununseptium).
        ///	  </para>
        /// </summary>
        Ununseptium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ununoctium is a chemical element with chemical symbol Uuo and atomic number 118
        ///	    (en.wikipedia.org/wiki/Ununoctium).
        ///	  </para>
        /// </summary>
        Ununoctium,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Isotope", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Isotope
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A named chemical isotope
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("isotopeName", Namespace="")]
        public IsotopeName IsotopeName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("IsotopeName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsotopeName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	An isotope name
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("IsotopeNameVocabulary", Namespace="")]
    public enum IsotopeNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("11B")]
        Item11B,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("12C")]
        Item12C,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("13C")]
        Item13C,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("14C")]
        Item14C,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("14N")]
        Item14N,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("15N")]
        Item15N,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("16O")]
        Item16O,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("17O")]
        Item17O,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("18O")]
        Item18O,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("19F")]
        Item19F,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1H")]
        Item1H,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("20Ne")]
        Item20Ne,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("21Ne")]
        Item21Ne,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("22Ne")]
        Item22Ne,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("23Na")]
        Item23Na,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("24Mg")]
        Item24Mg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("25Mg")]
        Item25Mg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("26Mg")]
        Item26Mg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("27Al")]
        Item27Al,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("28Si")]
        Item28Si,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("29Si")]
        Item29Si,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2H")]
        Item2H,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("30Si")]
        Item30Si,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("31P")]
        Item31P,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("32S")]
        Item32S,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("33S")]
        Item33S,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("34S")]
        Item34S,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("35Cl")]
        Item35Cl,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("36Ar")]
        Item36Ar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("36S")]
        Item36S,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("37Cl")]
        Item37Cl,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("38Ar")]
        Item38Ar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("39K")]
        Item39K,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3H")]
        Item3H,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3He")]
        Item3He,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("40Ar")]
        Item40Ar,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("40Ca")]
        Item40Ca,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("41K")]
        Item41K,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("42Ca")]
        Item42Ca,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("43Ca")]
        Item43Ca,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("45Sc")]
        Item45Sc,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("46Ca")]
        Item46Ca,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("46Ti")]
        Item46Ti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("47Ti")]
        Item47Ti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("48Ca")]
        Item48Ca,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("48Ti")]
        Item48Ti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("49Ti")]
        Item49Ti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4He")]
        Item4He,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("50Cr")]
        Item50Cr,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("50Ti")]
        Item50Ti,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("50V")]
        Item50V,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("51V")]
        Item51V,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("52Cr")]
        Item52Cr,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("53Cr")]
        Item53Cr,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("54Cr")]
        Item54Cr,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("54Fe")]
        Item54Fe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("55Mn")]
        Item55Mn,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("56Fe")]
        Item56Fe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("57Fe")]
        Item57Fe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("58Fe")]
        Item58Fe,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("58Ni")]
        Item58Ni,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("59Co")]
        Item59Co,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("60Ni")]
        Item60Ni,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("61Ni")]
        Item61Ni,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("62Ni")]
        Item62Ni,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("63Cu")]
        Item63Cu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("64Ni")]
        Item64Ni,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("65Cu")]
        Item65Cu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6Li")]
        Item6Li,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7Li")]
        Item7Li,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    NA
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("9Be")]
        Item9Be,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Compound", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Compound
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A name of a chemical compound
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("compoundName", Namespace="", DataType="string")]
        public string CompoundName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A compound class for the chemical compound given under compund name as coarse
        ///						  classification (Biomolecule, Aromatic, Aliphatic, ...)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("compoundClass", Namespace="")]
        public System.Collections.Generic.List<CompoundClass> CompoundClass { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CompoundClass-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CompoundClass collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CompoundClassSpecified
        {
            get
            {
                return (this.CompoundClass.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Compound" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Compound" /> class.</para>
        /// </summary>
        public Compound()
        {
            this.CompoundClass = new System.Collections.Generic.List<CompoundClass>();
            this.CompoundType = new System.Collections.Generic.List<CompoundType>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A compound type for the chemical compound given under the compund name. It
        ///						  serves as detailed classification (e.g. Nucleosides, Nucleotides, Amino Acid,
        ///						  Protein, ...)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("compoundType", Namespace="")]
        public System.Collections.Generic.List<CompoundType> CompoundType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CompoundType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CompoundType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CompoundTypeSpecified
        {
            get
            {
                return (this.CompoundType.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CompoundClass", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompoundClass
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A compound class
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CompoundClassVocabulary", Namespace="")]
    public enum CompoundClassVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A biomolecule or biological molecule is any molecule that is present in living
        ///	    organisms,. (https://en.wikipedia.org/wiki/Biomolecule)
        ///	  </para>
        /// </summary>
        Biomolecule,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Aromaticity describes a cyclic, planar molecule that exhibits unusual stability
        ///	    to other geometric or connective arrangements of the same set of atoms
        ///	    (en.wikipedia.org/wiki/aromaticity).
        ///	  </para>
        /// </summary>
        Aromatic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Acyclic or cyclic, saturated or unsaturated carbon compounds, excluding
        ///	    aromatic compounds. (goldbook.iupac.org/A00217.html)
        ///	  </para>
        /// </summary>
        Aliphatic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Gas is one of the four fundamental states of matter. Its particles move
        ///	    independenty and fill up a volume equally. (https://en.wikipedia.org/wiki/Gas)
        ///	  </para>
        /// </summary>
        Gas,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An acid is a substance whose aqueous solutions are characterized by the ability
        ///	    to act as a proton donor and as an electron acceptor.
        ///	    (https://en.wikipedia.org/wiki/Acid) A base is a substance whose aqueous
        ///	    solutions are characterized by the ability to act as a proton acceptor and as
        ///	    an electron donor. (https://en.wikipedia.org/wiki/Base_(chemistry))
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Acid and Base")]
        Acid_And_Base,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A salt is an ionic compound that results from the neutralisation reaction of an
        ///	    acid and a base. (https://en.wikipedia.org/wiki/salt_(chemistry)) A mineral is
        ///	    a naturally occurring substance, representable by a chemical formula, that is
        ///	    usually solid and inorganic, and has a crystal structure.
        ///	    (https://en.wikipedia.org/wiki/Mineral)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Salt and Mineral")]
        Salt_And_Mineral,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A metal is a material that is typically hard, shiny and has good elkectrical
        ///	    and thermal conductivity. (https://en.wikipedia.org/wiki/Metall) An alloy is a
        ///	    mixture of metalls or a mixture of a metals and and are defined by metallic
        ///	    bonding character. (https://en.wikipedia.org/wiki/Alloy)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Metal and Alloy")]
        Metal_And_Alloy,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CompoundType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompoundType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A compound type
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CompoundTypeVocabulary", Namespace="")]
    public enum CompoundTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nucleosides are glycosylamines consists  of a nucleobase and a 5-carbon sugar
        ///	    (either ribose or deoxyribose). (https://en.wikipedia.org/wiki/Nucleosides)
        ///	  </para>
        /// </summary>
        Nucleosides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nucleotides are organic molecules composed of a nucleoside and a phosphate
        ///	    group. (https://en.wikipedia.org/wiki/Nucleotides)
        ///	  </para>
        /// </summary>
        Nucleotides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nucleic acids are biopolymers essenttial for all known forms of life. Nucleic
        ///	    acids, which include DNA and RNA are made of monomers known as nucleotides.
        ///	    (https://en.wikipedia.org/wiki/Nucleic_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Nucleic Acid")]
        Nucleic_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Amino acids are biologically important organic compouns containing amine and
        ///	    carboxylic acid functional groups, usually with a side chain specific to each
        ///	    amino acid. (https://en.wikipedia.org/wiki/Amino_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Amino Acid")]
        Amino_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Proteins consisting of one or more long chains of amino acid residues. Proteins
        ///	    perform a vast array of functions within living organisms. Proteins differ from
        ///	    one another primarily in their sequence of amino acids which usually results in
        ///	    protein folding into a specific three-dimensional structure.
        ///	    (https://en.wikipedia.org/wiki/Protein)
        ///	  </para>
        /// </summary>
        Protein,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A carbohydrate is a compound with the empirical formula Cm(H2O)n. Carbohydrates
        ///	    perform numerous roles in living organisms (starch, cellulose, glucose).
        ///	    (https://en.wikipedia.org/wiki/Carbohydrates)
        ///	  </para>
        /// </summary>
        Carbohydrates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lipids are hydrophobic or amphiphilic molecules which perform numerous roles in
        ///	    living organisms. (https://en.wikipedia.org/wiki/Lipids)
        ///	  </para>
        /// </summary>
        Lipid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lignins are cross-linked phenol polymers that form important structural
        ///	    materials in plants. (https://en.wikipedia.org/wiki/Lignins)
        ///	  </para>
        /// </summary>
        Lignin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Secondary metabolites are organic compounds that are not directly involved in
        ///	    the normal growth, development, or reproduction of an organism. The absence of
        ///	    secondary metabolites does not result in immediate death, but rather in
        ///	    long-term impairment of the organism's survivability, fecundity, or aesthetics,
        ///	    or perhaps in no significant change at all. Secondary metabolites are often
        ///	    restricted to a narrow set of species within a phylogenetic group.
        ///	    (https://en.wikipedia.org/wiki/Secondary_metabolites)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Secondary Metabolite")]
        Secondary_Metabolite,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Monoyclic and polycyclic aromatic hydrocarbons.
        ///	    (http://goldbook.iupac.org/A00435.html)
        ///	  </para>
        /// </summary>
        Arene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Mancude monocyclic hydrocarbons without side chains of the general formula CnHn
        ///	    (n is an even number) or CnHn+1 (n is an odd number).
        ///	    (http://goldbook.iupac.org/A00368.html)
        ///	  </para>
        /// </summary>
        Annulene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Polycyclic aromatic hydrocarbons are hydrocarbons that are composed of multiple
        ///	    aromatic rings (en.wikipedia.org/wiki/Polycyclic_aromatic_hydrocarbon).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Polycyclic Aromatic Hydrocarbon")]
        Polycyclic_Aromatic_Hydrocarbon,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In Heteroaromats are aromats where one or more atoms of the aromatic ring is an
        ///	    element other than carbon (en.wikipedia.org/wiki/Aromaticity#Heterocyclics).
        ///	  </para>
        /// </summary>
        Heteroaromatic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Substituted aromatics are aromatic rings with other functional groups attached
        ///	    (en.wikipedia.org/wiki/Aromaticity#Substituted_aromatics).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Substituted Aromatic")]
        Substituted_Aromatic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An aromatic ion is an ion which is planar and cyclic, fulfills the
        ///	    Hückel rule and where its participating pi orbitals are unequal to
        ///	    its number of pi electrons (goo.gl/W5tp9l).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Aromatic Ions")]
        Aromatic_Ions,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Aryl halides are aromatic compounds in which one or more hydrogen atoms
        ///	    directly bonded to an aromatic ring are replaced by a halide.
        ///	    (https://en.wikipedia.org/wiki/Aryl_halide)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Aryl Halide")]
        Aryl_Halide,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Acyclic branched or unbranched hydrocarbons having the general formula CnH2n+2
        ///	    and therefore consisting entirely of hydrogen atoms and saturated carbon
        ///	    atoms(goldbook.iupac.org/A00222.html).
        ///	  </para>
        /// </summary>
        Alkane,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Acyclic and cyclic hydrocarbons having one or more carbon–carbon
        ///	    double bonds, apart from the formal ones in aromatic compounds. The
        ///	    class olefins subsumes alkenes and cycloalkenes and the
        ///	    corresponding polyenes (goldbook.iupac.org/O04281.html).
        ///	  </para>
        /// </summary>
        Olefin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Acyclic (branched or unbranched) and cyclic (with or without side
        ///	    chain) hydrocarbons having one or more carbon–carbon triple bonds
        ///	    (goldbook.iupac.org/A00066.html).
        ///	  </para>
        /// </summary>
        Acetylene,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds in which a hydroxy group (–OH) is attached to a saturated
        ///	    carbon atom R3COH. (http://goldbook.iupac.org/A00204.html)
        ///	  </para>
        /// </summary>
        Alcohols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds in which a carbonyl group is bonded to two carbon atoms R2C=O
        ///	    (neither R may be H).
        ///	  </para>
        /// </summary>
        Ketones,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds RC(=O)H , in which a carbonyl group is bonded to one hydrogen atom
        ///	    and to one R group. (http://goldbook.iupac.org/A00208.html)
        ///	  </para>
        /// </summary>
        Aldehydes,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds consisting of an acyl group bonded to halogen, e.g. CH3S(=O)2Cl ,
        ///	    methanesulfonyl chloride; CH3COCl , acetyl chloride; cyclohexanecarboximidoyl
        ///	    chloride. (http://goldbook.iupac.org/A00124.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Acyl Halides")]
        Acyl_Halides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Oxoacids having the structure RC(=O)OH. The term is used as a
        ///	    suffix in systematic name formation to denote the –C(=O)OH group
        ///	    including its carbon atom. (http://goldbook.iupac.org/C00852.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Carboxylic Acids")]
        Carboxylic_Acids,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds with the generel structure RkE(=O)l(OR')m. E.g. R'C(=O)(OR) ,
        ///	    R'C(=S)(OR) , R'C(=O)(SR) , R'S(=O)2(OR) , (HO)2P(=O)(OR) , (R'S)2C(=O).
        ///	    (http://goldbook.iupac.org/E02219.html)
        ///	  </para>
        /// </summary>
        Esters,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Monosubstitution products of hydrogen peroxide (dioxidane), HOOH, having the
        ///	    skeleton ROOH, in which R is any organyl group.
        ///	    (http://goldbook.iupac.org/H02905.html)
        ///	  </para>
        /// </summary>
        Hydroxyperoxides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds of structure ROOR in which R may be any organyl group.
        ///	    (http://goldbook.iupac.org/P04510.html)
        ///	  </para>
        /// </summary>
        Peroxides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds ROR (R ≠ H), E.g. CH3CH2OCH2CH3.
        ///	    (http://goldbook.iupac.org/E02221.html)
        ///	  </para>
        /// </summary>
        Ethers,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the general formula R2C(OH)OR' ( R' ≠ H ).
        ///	    (http://goldbook.iupac.org/H02774.html)
        ///	  </para>
        /// </summary>
        Hemiacetals,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the structure R2C(OR')2 ( R' ≠ H ) and thus
        ///	    diethers of geminal diols. (http://goldbook.iupac.org/A00062.html)
        ///	  </para>
        /// </summary>
        Acetals,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the structure RC(OR')3 ( R' ≠ H), or the structure
        ///	    C(OR')4 ( R' ≠ H), e.g. HC(OCH3)3 trimethyl orthoformate, C(OCH3)4
        ///	    tetramethyl orthocarbonate. (http://goldbook.iupac.org/O04334.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Ortho Esters")]
        Ortho_Esters,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds formally derived from ammonia by replacing one, two or
        ///	    three hydrogen atoms by hydrocarbyl groups, and having the general
        ///	    structures RNH2 (primary amines), R2NH (secondary amines), R3N
        ///	    (tertiary amines). (http://goldbook.iupac.org/A00274.html)
        ///	  </para>
        /// </summary>
        Amines,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Derivatives of oxoacids RkE(=O)l(OH)m (l ≠ 0) in which an acidic
        ///	    hydroxy group has been replaced by an amino or substituted amino
        ///	    group. Chalcogen replacement analogues are called thio-, seleno-
        ///	    and telluro-amides. Compounds having one, two or three acyl groups
        ///	    on a given nitrogen are generically included and may be designated
        ///	    as primary, secondary and tertiary amides, respectively,
        ///	    (http://goldbook.iupac.org/A00266.html)
        ///	  </para>
        /// </summary>
        Amides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the structure RN=CR2 (R = H, hydrocarbyl). P
        ///	    (http://goldbook.iupac.org/I02957.html)
        ///	  </para>
        /// </summary>
        Imines,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    1. Diacyl derivatives of ammonia or primary amines, especially
        ///	    those cyclic compounds derived from diacids, e.g. 2. In additive
        ///	    nomenclature, in which imide is analogous to oxide, the term is
        ///	    used to name compounds of the type R3Y+–N−R (Y = N, P) and R2Z+–N−R
        ///	    (Z = O, S, Se, Te), which are the products of formal attachment of
        ///	    an RN= group to N, P, O, S, Se, Te. E.g. amine imides, azomethine
        ///	    imides. 3. Salts having the anion RN2−.
        ///	    (http://goldbook.iupac.org/I02948.html)
        ///	  </para>
        /// </summary>
        Imides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    1. Compounds bearing the group N3, viz. –N=N+=N−; usually attached
        ///	    to carbon, e.g. PhN3 phenyl azide or azidobenzene. 2. Salts of
        ///	    hydrazoic acid, HN3, e.g. NaN3 sodium azide.
        ///	    (http://goldbook.iupac.org/A00555.html)
        ///	  </para>
        /// </summary>
        Azides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Derivatives of diazene (diimide), HN=NH, wherein both hydrogens are
        ///	    substituted by hydrocarbyl groups, e.g. PhN=NPh azobenzene or
        ///	    diphenyldiazene.
        ///	    (http://goldbook.iupac.org/A00560.htmlhttp://goldbook.iupac.org/A00560.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Azo Compounds")]
        Azo_Compounds,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Salts and esters of cyanic acid, HOC≡N, e.g. KOCN potassium
        ///	    cyanate, PhOCN phenyl cyanate.
        ///	    (http://goldbook.iupac.org/C01485.html)
        ///	  </para>
        /// </summary>
        Cyanates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The isocyanic acid tautomer, HN=C=O, of cyanic acid, HOC≡N and its
        ///	    hydrocarbyl derivatives RN=C=O.
        ///	    (http://goldbook.iupac.org/I03269.html)
        ///	  </para>
        /// </summary>
        Isocyanates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the structure RC≡N; thus C-substituted derivatives
        ///	    of hydrocyanic acid, HC≡N. In systematic nomenclature, the suffix
        ///	    nitrile denotes the triply bound ≡N atom, not the carbon atom
        ///	    attached to it. (http://goldbook.iupac.org/N04151.html)
        ///	  </para>
        /// </summary>
        Nitriles,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The isomer HN+≡C− of hydrocyanic acid, HC≡N, and its hydrocarbyl
        ///	    derivatives RNC (RN+≡C−). (http://goldbook.iupac.org/I03270.html)
        ///	  </para>
        /// </summary>
        Isocyanides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the nitro group, –NO2 (free valence on nitrogen),
        ///	    which may be attached to carbon, nitrogen (as in nitramines), or
        ///	    oxygen (as in nitrates), among other elements.
        ///	    (http://goldbook.iupac.org/N04158.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Nitro Compounds")]
        Nitro_Compounds,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the nitroso group, –NO. attached to carbon, or to
        ///	    another element, most commonly nitrogen or oxygen.
        ///	    (http://goldbook.iupac.org/N04169.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Nitroso Compounds")]
        Nitroso_Compounds,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds of structure R2C=NOH derived from condensation of aldehydes or
        ///	    ketones with hydroxylamine. Oximes from aldehydes may be called aldoximes;
        ///	    those from ketones may be called ketoximes.
        ///	    (http://goldbook.iupac.org/O04372.html)
        ///	  </para>
        /// </summary>
        Oximes,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the structure RSH (R ≠ H), e.g. MeCH2SH
        ///	    ethanethiol. Also known by the term mercaptans (abandoned by
        ///	    IUPAC). (http://goldbook.iupac.org/T06359.html)
        ///	  </para>
        /// </summary>
        Thiols,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    1. Compounds having the structure RSR (R ≠ H). Such compounds were
        ///	    once called thioethers. See also: thioacetals 2. In an inorganic
        ///	    sense, salts or other derivatives of hydrogen sulfide. 3. A term
        ///	    used in additive nomenclature, see imides (2).
        ///	    (http://goldbook.iupac.org/S06102.html)
        ///	  </para>
        /// </summary>
        Sulfides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds R–[S]n–R , with a chain of sulfur atoms (n ≥ 2) and R ≠
        ///	    H. Some chemists exclude disulfides, RS2R , from the class
        ///	    polysulfides. (http://goldbook.iupac.org/P04754.html)
        ///	  </para>
        /// </summary>
        Polysulfides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the structure, RS(=O)2R (R ≠ H), e.g.
        ///	    C2H5S(=O)2CH3 ethyl methyl sulfone.
        ///	    (http://goldbook.iupac.org/S06117.html)
        ///	  </para>
        /// </summary>
        Sulfones,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    HS(=O)OH, sulfinic acid, and its S-hydrocarbyl derivatives, e.g.
        ///	    (CH3)2CHS(=O)OH propane-2-sulfinic acid.
        ///	    (http://goldbook.iupac.org/S06109.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Sulfonic Acids")]
        Sulfonic_Acids,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Salts and esters of thiocyanic acid HSC≡N, e.g. CH3SC≡N methyl
        ///	    thiocyanate. (http://goldbook.iupac.org/T06353.html)
        ///	  </para>
        /// </summary>
        Thiocyanates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Sulfur analogues of isocyanates RN=C=S. (http://goldbook.iupac.org/I03320.html)
        ///	  </para>
        /// </summary>
        Isothiocyanates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    PH3 and compounds derived from it by substituting one, two or three
        ///	    hydrogen atoms by hydrocarbyl groups R3P . RPH2 , R2PH and R3P (R ≠
        ///	    H) are called primary, secondary and tertiary phosphines,
        ///	    respectively. A specific phosphine is preferably named as a
        ///	    substituted phosphane, e.g. CH3PH2 methylphosphane.
        ///	    (http://goldbook.iupac.org/P04553.html)
        ///	  </para>
        /// </summary>
        Phosphines,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The saturated hydrides of tervalent phosphorus having the general
        ///	    formula PnHn+2 . Individual members having an unbranched phosphorus
        ///	    chain are named phosphane, diphosphane, triphosphane, etc. The name
        ///	    of a saturated hydride of phosphorus wherein one or more phosphorus
        ///	    atoms have a bonding number of 5 is formed by prefixing locants and
        ///	    λ 5 symbols to the name of the corresponding phosphane. Hydrocarbyl
        ///	    derivatives of PH3 belong to the class phosphines.
        ///	    (http://goldbook.iupac.org/P04548.html)
        ///	  </para>
        /// </summary>
        Phosphanes,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    H2P(=O)OH (phosphinic acid) and its P-hydrocarbyl derivatives.
        ///	    (http://goldbook.iupac.org/P04554.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Phosphinic Acids")]
        Phosphinic_Acids,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    HP(=O)(OH)2 (phosphonic acid) and its P-hydrocarbyl derivatives.
        ///	    (http://goldbook.iupac.org/P04560.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Phosphonic Acids")]
        Phosphonic_Acids,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the structure RB(OH)2. (http://goldbook.iupac.org/B00714.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Boronic Acids")]
        Boronic_Acids,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds having the structure R2BOH. (http://goldbook.iupac.org/B00713.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Borinic Acids")]
        Borinic_Acids,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ammonia is a  compound consisting of Nitrogen and Hydrogen having the molecular
        ///	    formula NH3. (http://chemie.de/lexicon/Ammoniak.html)
        ///	  </para>
        /// </summary>
        Ammonia,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Carbonoxides are compounds consisting of Carbon and Oxygen having the generel
        ///	    molecular formula CxOy. (http://chemie.de/lexicon/Kohlenstoffoxide.html)
        ///	  </para>
        /// </summary>
        Carbonoxides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds consisting of carbon and hydrogen only.
        ///	    (http://goldbook.iupac.org/H02889.html)
        ///	  </para>
        /// </summary>
        Hydrocarbons,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Dioxygen is a molecul consisting of two oxygen atoms.
        ///	    (http://www.iupac.org/fileadmin/user_upload/databases/Red_Book_2005.pdf, p.49)
        ///	  </para>
        /// </summary>
        Dioxygen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Dihydrogen is a molecul consisting of two hydrogen atoms.
        ///	    (http://www.iupac.org/fileadmin/user_upload/databases/Red_Book_2005.pdf, p.49)
        ///	  </para>
        /// </summary>
        Dihydrogen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Dinitrogen is a molecul consisting of two nitrogen atoms.
        ///	    (http://www.iupac.org/fileadmin/user_upload/databases/Red_Book_2005.pdf, p.49)
        ///	  </para>
        /// </summary>
        Dinitrogen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Hydrogen halides are  compounds with the formula HX where X is one of the
        ///	    halogens: fluorine, chlorine, bromine, iodine, and astatine.
        ///	    (https://en.wikipedia.org/wiki/Hydrogen_halide)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Hydrogen Halides")]
        Hydrogen_Halides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Hydrogen sulfide is the chemical compound with the formula H2S.
        ///	    (https://en.wikipedia.org/wiki/Hydrogen_sulfide)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Hydrogen Sulfides")]
        Hydrogen_Sulfides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds consisting of Nitrogen and Oxygen only (NXOY).
        ///	    (http://goldbook.iupac.org/H02889.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Nitrogen Oxides")]
        Nitrogen_Oxides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds consisting of Sulfur and Oxygen only (SXOY).
        ///	    (http://goldbook.iupac.org/H02889.html)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Sulfur Oxides")]
        Sulfur_Oxides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Compounds consisting of Hydrogen and Oxygen only (HXOY).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Hydrogen Oxides")]
        Hydrogen_Oxides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Sodium hydroxide is a compound with the molecular formula NaOH.
        ///	    (https://en.wikipedia.org/wiki/Sodium_hydroxide)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Sodium Hydroxide")]
        Sodium_Hydroxide,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Potassium hydroxide is a compound with the molecular formula KOH.
        ///	    (https://en.wikipedia.org/wiki/Potassium_hydroxide)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Potassium Hydroxide")]
        Potassium_Hydroxide,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Calcium hydroxide is a compound with the molecular formula Ca(OH)2.
        ///	    (https://en.wikipedia.org/wiki/Calcium_hydroxide)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Calcium Hydroxide")]
        Calcium_Hydroxide,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Magnesium hydroxide is a compound with the molecular formula Mg(OH)2.
        ///	    (https://en.wikipedia.org/wiki/Magnesium_hydroxide)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Magnesium Hydroxide")]
        Magnesium_Hydroxide,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Aluminium hydroxide is a compound with the molecular formula Al2O3.
        ///	    (https://en.wikipedia.org/wiki/Aluminium_hydroxide)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Aluminium Hydroxide")]
        Aluminium_Hydroxide,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Carbonic acid is a compound with the formula H2CO3.
        ///	    (https://en.wikipedia.org/wiki/Carbonic_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Carbonic Acid")]
        Carbonic_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nitric acid is a compound with the formula HNO3.
        ///	    (https://en.wikipedia.org/wiki/Nitric_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Nitric Acid")]
        Nitric_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nitrous acid is a compound with the formula HNO2.
        ///	    (https://en.wikipedia.org/wiki/Nitrous_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Nitrous Acid")]
        Nitrous_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Hydrofluoric acid is a compound with the formula HF.
        ///	    (https://en.wikipedia.org/wiki/Hydrofluoric_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Hydrofluoric Acid")]
        Hydrofluoric_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Hydrochloric acid is a compound with the formula HCl.
        ///	    (https://en.wikipedia.org/wiki/Hydrofluoric_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Hydrocloric Acid")]
        Hydrocloric_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Sulfuric acid is a compound with the formula H2SO4.
        ///	    (https://en.wikipedia.org/wiki/Sulfuric_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Sulfuric Acid")]
        Sulfuric_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Sulfurous acid is a compound with the formula H2SO3.
        ///	    (https://en.wikipedia.org/wiki/Sulfurous_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Sulfurous Acid")]
        Sulfurous_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Phosphoric acid is a compound with the formula H3PO4.
        ///	    (https://en.wikipedia.org/wiki/Phosphoric_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Phosphoric Acid")]
        Phosphoric_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Phosphorous acid is a compound with the formula H3PO3.
        ///	    (https://en.wikipedia.org/wiki/Phosphorous_acid)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Phosphourous Acid")]
        Phosphourous_Acid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Carbonates are salts and esters of carbonic acid characterized by
        ///	    the presence of the carbonate ion CO2-3. (https://en.wikipedia.org/wiki/Carbonate)
        ///	  </para>
        /// </summary>
        Carbonates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Halides are salts of hydrogen cloride characterized by the presence of the
        ///	    chlorine ion Cl-. (https://en.wikipedia.org/wiki/Halide)
        ///	  </para>
        /// </summary>
        Halides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Oxides are salts of water characterized by the presence of the oxygen ion O22-.
        ///	    (https://en.wikipedia.org/wiki/Oxide)
        ///	  </para>
        /// </summary>
        Oxides,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Phosphates are salts of phosphoric acid characterized by the presence of the
        ///	    phosphat ion PO43-. (https://en.wikipedia.org/wiki/Phosphate)
        ///	  </para>
        /// </summary>
        Phosphates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Silicates are salts and esters of otho silicic acid.
        ///	    (https://en.wikipedia.org/wiki/Silicic_acid)
        ///	  </para>
        /// </summary>
        Silicates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Sulfates are salts of sulfuric acid characterized by the presence of the
        ///	    sulfate ion SO42-. (https://en.wikipedia.org/wiki/Sulfate)
        ///	  </para>
        /// </summary>
        Sulfates,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of aluminium are alloys in which aluminium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/Aluminium_alloy)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Aluminium")]
        Alloy_Of_Aluminium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of bismuth are alloys in which bismuth is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Bismuth)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Bismuth")]
        Alloy_Of_Bismuth,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of chromium are alloys in which bismuth is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Chromium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Chromium")]
        Alloy_Of_Chromium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of cobalt are alloys in which cobalt is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Chromium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Cobalt")]
        Alloy_Of_Cobalt,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of cobalt are alloys in which copper is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Copper)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Copper")]
        Alloy_Of_Copper,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of gallium are alloys in which gallium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Gallium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Gallium")]
        Alloy_Of_Gallium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of gold are alloys in which gold is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Gold)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Gold")]
        Alloy_Of_Gold,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of indium are alloys in which indium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Indium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Indium")]
        Alloy_Of_Indium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of iron are alloys in which iron is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Iron)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Iron")]
        Alloy_Of_Iron,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of lead are alloys in which lead is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Lead)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Lead")]
        Alloy_Of_Lead,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of magnesium are alloys in which magnesium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Magnesium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Magnesium")]
        Alloy_Of_Magnesium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of mercury are alloys in which mercury is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_mercury)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Mercury")]
        Alloy_Of_Mercury,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of nickel are alloys in which nickel is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Nickel)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Nickel")]
        Alloy_Of_Nickel,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of potassium are alloys in which potassium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Potassium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Potassium")]
        Alloy_Of_Potassium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of plutonium are alloys in which plutonium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Plutonium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Plutonium")]
        Alloy_Of_Plutonium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of rare earth are alloys in which rare earth is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_RareEarth)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Rare Earth")]
        Alloy_Of_Rare_Earth,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of rhodium are alloys in which rhodium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Rhodium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Rhodium")]
        Alloy_Of_Rhodium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of scandium are alloys in which scandium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Scandium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Scandium")]
        Alloy_Of_Scandium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of silver are alloys in which silver is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Silver)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Silver")]
        Alloy_Of_Silver,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of sodium are alloys in which sodium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Sodium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Sodium")]
        Alloy_Of_Sodium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of titanium are alloys in which titanium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Titanium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Titanium")]
        Alloy_Of_Titanium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of tin are alloys in which tin is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Tin)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Tin")]
        Alloy_Of_Tin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of uranium are alloys in which uranium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Uranium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Uranium")]
        Alloy_Of_Uranium,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of zinc are alloys in which zinc is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Zinc)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Zinc")]
        Alloy_Of_Zinc,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Alloys of zirconium are alloys in which zirconium is the predominant metall.
        ///	    (https://en.wikipedia.org/wiki/List_of_alloys#Alloys_of_Zirconium)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Alloy Of Zirconium")]
        Alloy_Of_Zirconium,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Function", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Function
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A chemical function type (Repellent, Reservoir, Stimulator, Structure,
        ///						  Antibody, ...)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("chemicalFunctionType", Namespace="")]
        public ChemicalFunctionType ChemicalFunctionType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ChemicalFunctionType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChemicalFunctionType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A chemical function type
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ChemicalFunctionTypeVocabulary", Namespace="")]
    public enum ChemicalFunctionTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An insect repellent (also commonly called "bug spray") is a
        ///	    substance applied to skin, clothing, or other surfaces which
        ///	    discourages insects (and arthropods in general) from landing or
        ///	    climbing on that surface. Insect repellents help prevent and
        ///	    control the outbreak of insect-borne (and other arthropod-bourne)
        ///	    diseases such as malaria, Lyme disease, dengue fever, bubonic
        ///	    plague, and West Nile fever. Pest animals commonly serving as
        ///	    vectors for disease include insects such as flea, fly, and
        ///	    mosquito; and the arachnid tick (WP, https://goo.gl/J4MZ4o).
        ///	  </para>
        /// </summary>
        Repellent,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A reservoir is a storage space for fluids. These fluids may be
        ///	    water, hydrocarbons or gas (WP, https://goo.gl/7QWKkC)
        ///	  </para>
        /// </summary>
        Reservoir,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Something that provides a stimulus e.g. for nerve, immune system
        ///	  </para>
        /// </summary>
        Stimulator,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Anythin involved in forming structural elements (e.g. chitin)
        ///	  </para>
        /// </summary>
        Structure,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An antibody is a Y-shaped protein that is used by the immune system
        ///	    to identify and neutralize pathogens.
        ///	    (https://en.wikipedia.org/wiki/Antibody)
        ///	  </para>
        /// </summary>
        Antibody,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An attracting agent or substance
        ///	  </para>
        /// </summary>
        Attractant,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A cofactor is a non protein compound that is required for the
        ///	    protein`s biological activity
        ///	    (https://en.wikipedia.org/wiki/Cofactor)
        ///	  </para>
        /// </summary>
        Cofactor,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A detergent is one or a mixture of surfactants with cleaning
        ///	    properties in dilute solutions.
        ///	    (https://en.wikipedia.org/wiki/Detergent)
        ///	  </para>
        /// </summary>
        Detergent,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nutrigents are components in foods that an organism uses to survive
        ///	    and grow. (https://en.wikipedia.org/wiki/Nutrigent)
        ///	  </para>
        /// </summary>
        Nutrient,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Enzymes are macromolecular biological catalysts.
        ///	    (https://en.wikipedia.org/wiki/Enzyme)
        ///	  </para>
        /// </summary>
        Enzyme,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A hormone is any member of a class of signaling molecule produced
        ///	    in glands of multicellular organisms that are transported by the
        ///	    circulatory systems to target distant organs to regulate physiology
        ///	    and behaviour. (https://en.wikipedia.org/wiki/Hormone)
        ///	  </para>
        /// </summary>
        Hormone,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Carrier proteins are membrane transport proteins activily
        ///	    faciliating transport of molecules across cell membranes.
        ///	    (https://en.wikipedia.org/wiki/Carrier_protein)
        ///	  </para>
        /// </summary>
        Carrier,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    An enzyme inhibitor is a molecule that binds to an enzyme and
        ///	    decreases its activity.
        ///	    (https://en.wikipedia.org/wiki/Enzyme_inhibitor)
        ///	  </para>
        /// </summary>
        Inhibitor,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Metabolites are intermediates and products of metabolism.
        ///	    (https://en.wikipedia.org/wiki/metabolite)
        ///	  </para>
        /// </summary>
        Metabolite,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Pesticide are a class of biocide.
        ///	    (https://en.wikipedia.org/wiki/Pesticide)
        ///	  </para>
        /// </summary>
        Pesticide,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A pheromone is a secreted chemical factor that triggers a social
        ///	    response in members of the same species.
        ///	    (https://en.wikipedia.org/wiki/Pheromone)
        ///	  </para>
        /// </summary>
        Pheromone,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Pigments are substances produced by living organisms that have a
        ///	    color resulting from selective color absorption.
        ///	    (https://en.wikipedia.org/wiki/Biological_Pigment)
        ///	  </para>
        /// </summary>
        Pigment,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Poisons are substances that cause disturbances in organisms by
        ///	    absorption of sufficient quantities.
        ///	    (https://en.wikipedia.org/wiki/Poison)
        ///	  </para>
        /// </summary>
        Poison,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A precursor is a compound that participates in a chemical reaction
        ///	    that produces another compound.
        ///	    (https://en.wikipedia.org/wiki/Precursor)
        ///	  </para>
        /// </summary>
        Precursor,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Signaling is part of a complex system of communication that governs
        ///	    basic cellular activities and coordinates cell actions.
        ///	    (https://en.wikipedia.org/wiki/cell_signaling)
        ///	  </para>
        /// </summary>
        Signal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A surfactant is a compound that lowers the interfacial tension
        ///	    between two liquids or a liquid and a solid.
        ///	    (https://en.wikipedia.org/wiki/surfactant)
        ///	  </para>
        /// </summary>
        Surfactant,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A toxin is a substance causing disturbances in organisms produced
        ///	    within living cells or organisms.
        ///	    (https://en.wikipedia.org/wiki/Toxin)
        ///	  </para>
        /// </summary>
        Toxin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Isotopic tracing (or isotopic labeling) is a technique used to
        ///	    track the passage of an isotope through a reaction, metabolic
        ///	    pathway, or cell. (https://en.wikipedia.org/wiki/Isotopic_labeling)
        ///	  </para>
        /// </summary>
        Tracer,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A volatile is a substance that vaporizes at 101,3kPA.
        ///	    (https://en.wikipedia.org/wiki/Volatility_(chemistry))
        ///	  </para>
        /// </summary>
        Volatile,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A vitamnin is an organic compound and a vital nutrigent that an
        ///	    organism requires in limited amounts.
        ///	    (https://en.wikipedia.org/wiki/)
        ///	  </para>
        /// </summary>
        Vitamin,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A catalyst is an additional substance in a chemical reaction which
        ///	    increases the rate of reaction in a process called catalysis.
        ///	    (https://en.wikipedia.org/wiki/Catalyst)
        ///	  </para>
        /// </summary>
        Catalyst,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A fertilizer is any material that is applied to soils or plant
        ///	    tissues to supply plant nutrigents essentially to the growth of
        ///	    plants. (https://en.wikipedia.org/wiki/fertilizer)
        ///	  </para>
        /// </summary>
        Fertilizer,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MethodContext", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MethodContext
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around approaches
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Approaches", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Approach", Namespace="")]
        public System.Collections.Generic.List<Approach> Approaches { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Approaches-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Approaches collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApproachesSpecified
        {
            get
            {
                return (this.Approaches.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MethodContext" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MethodContext" /> class.</para>
        /// </summary>
        public MethodContext()
        {
            this.Approaches = new System.Collections.Generic.List<Approach>();
            this.Factors = new System.Collections.Generic.List<Factor>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A wrapper around factors
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Factors", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Factor", Namespace="")]
        public System.Collections.Generic.List<Factor> Factors { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Factors-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Factors collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FactorsSpecified
        {
            get
            {
                return (this.Factors.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Approach", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Approach
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of approach used (Virtual, Manipulative, Observational)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("approachType", Namespace="")]
        public ApproachType ApproachType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A type of approach localization (Microcosm, Mesocosm, Macrocosm)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("approachLocalization", Namespace="")]
        public ApproachLocalization ApproachLocalization { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApproachType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApproachType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A type of approach
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApproachTypeVocabulary", Namespace="")]
    public enum ApproachTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Computer experiments and simulation.
        ///	  </para>
        /// </summary>
        Virtual,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Experimental setup factors mostly controlled.
        ///	  </para>
        /// </summary>
        Manipulative,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Plot selection creates factor gradients.
        ///	  </para>
        /// </summary>
        Observational,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApproachLocalization", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApproachLocalization
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A localization of an approach.
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ApproachLocalizationVocabulary", Namespace="")]
    public enum ApproachLocalizationVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Experiments in laboratory or similar.
        ///	  </para>
        /// </summary>
        Microcosm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Outdoor experimental systems (e.g. ecotron, greenhouse).
        ///	  </para>
        /// </summary>
        Mesocosm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Field experiments.
        ///	  </para>
        /// </summary>
        Macrocosm,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Factor", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Factor
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  A name of a factor that has been measured
        ///						  or calculated in the study (Producer Diversity,
        ///						  Consumer Density, ...)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("factorName", Namespace="")]
        public FactorName FactorName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						  The type of given factor (Biotic, Abiotic, Disturbance, ...)
        ///						</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("factorType", Namespace="")]
        public FactorType FactorType { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FactorName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FactorName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("Measured")]
        [System.Xml.Serialization.XmlAttributeAttribute("was", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Was { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FactorNameVocabulary", Namespace="")]
    public enum FactorNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    This includes richness, functional diversity, shannon diversity, rarefaction
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Producer Diversity")]
        Producer_Diversity,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The composition of producers. This also includes occurence.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Producer Composition")]
        Producer_Composition,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    All density or packing related to consumers. E.g. ammount
        ///	    of certain individuals per plot or coverage.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Producer Density")]
        Producer_Density,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The size, height, leaf area index, wood density, age structure of a
        ///	    stand, leaf mass ratio, biomass
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Producer Structure")]
        Producer_Structure,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    This includes richness, functional diversity, shannon diversity, rarefaction
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Consumer Diversity")]
        Consumer_Diversity,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Including network struture, occurence, exclusion experiment.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Consumer Composition")]
        Consumer_Composition,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    E.g. spatial related manipulations to consumers (e.g. density of
        ///	    grashoppers per plot)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Consumer Density")]
        Consumer_Density,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    All structure related factors of consumers, (e.g. body size
        ///	    distribution age structure).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Consumer Structure")]
        Consumer_Structure,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The intensity radiation for example photosynthetic active
        ///	    radiation.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Radiation Intensity")]
        Radiation_Intensity,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The quality of the radiation. For example filtered light, emission
        ///	    of specific frequencies
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Radiation Quality")]
        Radiation_Quality,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The temperature of soil manipulated for example through heating or cooling.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Soil Temperature")]
        Soil_Temperature,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The air temperature manipulated e.g. thourgh heating or cooling.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Air Temperature")]
        Air_Temperature,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Humidity is the amount of water vapor in the air. Water vapor is the gaseous
        ///	    state of water and is invisible ( Wikipedia, https://goo.gl/tcVXHc )
        ///	  </para>
        /// </summary>
        Humidity,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Water content or moisture content is the quantity of water contained in a
        ///	    material, such as soil (called soil moisture) ( Wikipedia,
        ///	    https://goo.gl/WuyBzY )
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Water Content")]
        Water_Content,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A xenobiotic is a foreign chemical substance found within an ecosystem that is
        ///	    not normally naturally produced by or expected to be present within that
        ///	    ecosystem. It can also cover substances which are present in much higher
        ///	    concentrations than usual (Wikipedia, https://goo.gl/8RdRfX)
        ///	  </para>
        /// </summary>
        Xenobiotics,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In meteorology, precipitation is any product of the condensation of atmospheric
        ///	    water vapour that falls under gravity ( Wikipedia, https://goo.gl/Z6UbIs ).
        ///	    This category captures precipitation no matter if the cause is natural or
        ///	    artificial (e.g. rain simulation).
        ///	  </para>
        /// </summary>
        Precipitation,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Any manipulation to the availability of nutrients for consumers as well as
        ///	    producers.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Nutrient Availability")]
        Nutrient_Availability,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Soil texture is a qualitative classification tool used in both the field and
        ///	    laboratory to determine classes for (agricultural) soils based on their
        ///	    physical texture ( Wikipedia, https://goo.gl/dd5XK7 ).
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Soil Texture")]
        Soil_Texture,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Any pH related manipulation. For example the soil pH. The soil pH is a measure
        ///	    of the acidity or alkalinity in soils. pH is defined as the negative logarithm
        ///	    (base 10) of the activity of hydronium ions (H+ or, more precisely, H 3O+ aq)
        ///	    in a solution ( Wikipedia, https://goo.gl/4l1jlp )
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("pH Value")]
        PH_Value,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Any management related manipulation. This includes management for aesthetics,
        ///	    fish, recreation, urban values, water, wilderness, wildlife, wood products,
        ///	    forest genetic resources, and other forest resource values. ( Wikipedia,
        ///	    https://goo.gl/2ViUAX )
        ///	  </para>
        /// </summary>
        Management,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Any removal of biomass may it be natural, semi natural or simulated. For
        ///	    example different browsing intentities of deer due to a plot selection or the
        ///	    clipping of plant parts in order to simulated a varying ammount of consumed
        ///	    biomass or the harvesting of crops
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Biomass Removal")]
        Biomass_Removal,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A controlled infection with pathogens of whatever kind (e.g. viruses or
        ///	    microorganisms) or the selection of individuals or plots which are affeted by a
        ///	    pathogen.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Pathogen Infection")]
        Pathogen_Infection,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Any fire related disturbance. For example plot selection creates gradient along
        ///	    areas with different frequency of fire disturbances.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Fire Disturbance")]
        Fire_Disturbance,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Any wind related disturbance. For example plot selection creates gradient along
        ///	    areas with different frequency of wind disturbances.
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Wind Disturbance")]
        Wind_Disturbance,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Any distubance related to a flooding. For example the plot selection aims for
        ///	    areas that have been flooded at least once in the last 5 years or plots that
        ///	    have a similar set of other factors and the time since the flooding event is
        ///	    used as a gradient.
        ///	  </para>
        /// </summary>
        Flooding,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The plot selection creates an elevation gradient. Or plots of a certain
        ///	    elevation only are selected.
        ///	  </para>
        /// </summary>
        Elevation,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The plot selection creates an inclination gradient. Or plots of a certain
        ///	    inclination are selected only.
        ///	  </para>
        /// </summary>
        Inclination,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Time as an experimental design parameter. This could be for example used if the
        ///	    exposure time of animals or plants to certain radiation has been manipulated in
        ///	    different sets to be compared in the setup.
        ///	  </para>
        /// </summary>
        Time,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Space as an experimental design parameter. For example plots are selected with a
        ///	    specific distance to road to see if dear browsing is affected by disturbances
        ///	    coming from that roads.
        ///	  </para>
        /// </summary>
        Space,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Was", Namespace="")]
    public enum Was
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///		    A variable that has been manipulated as part of the study setup
        ///		  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("manipulated")]
        Manipulated,
        
        /// <summary>
        /// <para xml:lang="en">
        ///		    A variable that has been measured
        ///		  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("measured")]
        Measured,
        
        /// <summary>
        /// <para xml:lang="en">
        ///		    A variable that has been estimated
        ///		  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("estimated")]
        Estimated,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FactorType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FactorType
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FactorTypeVocabulary", Namespace="")]
    public enum FactorTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A biotic factor is any living component that affects the population
        ///	    of another organism, or the environment. This includes animals that
        ///	    consume the organism, and the living food that the organism
        ///	    consumes. Biotic factors also include human influence, pathogens
        ///	    and disease outbreaks. Each biotic factor needs energy to do work
        ///	    and food for proper growth (WP, https://goo.gl/yFw2AH).
        ///	  </para>
        /// </summary>
        Biotic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In biology and ecology, abiotic components or abiotic factors are
        ///	    non-living chemical and physical parts of the environment that
        ///	    affect living organisms and the functioning of ecosystems. Abiotic
        ///	    factors and phenomena associated with them underpin all biology
        ///	    (WP, https://goo.gl/ELnxI0).
        ///	  </para>
        /// </summary>
        Abiotic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    In biology, a disturbance is a temporary change in environmental
        ///	    conditions that causes a pronounced change in an ecosystem.
        ///	    Disturbances often act quickly and with great effect, sometimes
        ///	    resulting in the removal of large amounts of biomass (WP,
        ///	    https://goo.gl/N0U4Qo).
        ///	  </para>
        /// </summary>
        Disturbance,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Topography is the study of the shape and features of the surface of
        ///	    the Earth and other observable astronomical objects including
        ///	    planets, moons, and asteroids. The topography of an area could
        ///	    refer to the surface shapes and features themselves, or a
        ///	    description (especially their depiction in maps) (WP,
        ///	    https://goo.gl/XVn7o3).
        ///	  </para>
        /// </summary>
        Topography,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The temporal extent
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Temporal Scale")]
        Temporal_Scale,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The spatial extent
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("Spatial Scale")]
        Spatial_Scale,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("References", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class References
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Hosters", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Hoster", Namespace="")]
        public System.Collections.Generic.List<Hoster> Hosters { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Hosters-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Hosters collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HostersSpecified
        {
            get
            {
                return (this.Hosters.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="References" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="References" /> class.</para>
        /// </summary>
        public References()
        {
            this.Hosters = new System.Collections.Generic.List<Hoster>();
            this.Persons = new System.Collections.Generic.List<Person>();
            this.Descriptions = new System.Collections.Generic.List<Description>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///			  Persons related to the data described with the annotation
        ///			</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Persons", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Person", Namespace="")]
        public System.Collections.Generic.List<Person> Persons { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///			  All types of descriptions related to the data described with the annotation
        ///			</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("Descriptions", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Description", Namespace="")]
        public System.Collections.Generic.List<Description> Descriptions { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Descriptions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Descriptions collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DescriptionsSpecified
        {
            get
            {
                return (this.Descriptions.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Hoster", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Hoster
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The name of the hoster (e.g. SNSB, KNB)
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("hosterName", Namespace="")]
        public HosterName HosterName { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HosterName", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HosterName
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The data center where the downloadable data and the metadat is hosted at. For
    ///	example: Data Center Senckenberg (SGN), Botanic Garden and Botanical Museum
    ///	Berlin-Dahlem, Data Publisher for Earth and Environmental Science (PANGAEA).
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HosterNameVocabulary", Namespace="")]
    public enum HosterNameVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    PANGAEA: Data Publisher for Earth and Environmental Science, Bremen/Bremerhaven
        ///	    with georeferenced data from earth system research
        ///	  </para>
        /// </summary>
        PANGEAE,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    ENA: European Nucleotide Archive - European Bioinformatics Institute
        ///	    (EMBL-EBI), Hinxton, UK. Stores and provides sequence data (raw reads,
        ///	    assemblies), associated metadata (sample description, experimental setup) and
        ///	    interpreted information (annotations). Partner in the International Nucleotide
        ///	    Sequence Database Collaboration (INSDC).
        ///	  </para>
        /// </summary>
        ENA,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    BGBM: Botanic Garden and Botanical Museum Berlin-Dahlem, Freie Universität
        ///	    Berlin with Research Group Biodiversity Informatics with herbarium and DNA Bank
        ///	  </para>
        /// </summary>
        BGBM,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DSMZ: Leibniz Institute DSMZ-German Collection of Microorganisms and Cell
        ///	    Cultures, Braunschweig with Database and IT-Department with culture
        ///	    collections, tissue collections and DNA Bank
        ///	  </para>
        /// </summary>
        DSMZ,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    MfN: Museum für Naturkunde – Leibniz Institute for Research on Evolution and
        ///	    Biodiversity, Berlin with zoological, paleontological, mineralogical
        ///	    collections, animal sounds archive and DNA Bank.
        ///	  </para>
        /// </summary>
        MfN,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    SGN: Senckenberg Gesellschaft für Naturforschung – Leibniz Institute, Frankfurt
        ///	    with herbarium, zoological, anthropological, paleontological, mineralogical
        ///	    collections and DNA Bank
        ///	  </para>
        /// </summary>
        SGN,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    SMNS: State Museum of Natural History Stuttgart with herbarium, zoological,
        ///	    paleontological and mineralogical collections
        ///	  </para>
        /// </summary>
        SMNS,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    SNSB: Bavarian Natural History Collections with SNSB IT Center, München with
        ///	    herbarium, zoological, anthropological, paleontological, mineralogical
        ///	    collections and DNA Bank
        ///	  </para>
        /// </summary>
        SNSB,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    ZFMK: Zoological Research Museum Alexander Koenig – Leibniz Institute for
        ///	    Animal Diversity, Bonn with zoological collections, tissue collections and DNA
        ///	    Bank
        ///	  </para>
        /// </summary>
        ZFMK,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Person", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Person
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The function of the person in the context of the data (e.g. Contact, Author)
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("position", Namespace="")]
        public System.Collections.Generic.List<Position> Position { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Person" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Person" /> class.</para>
        /// </summary>
        public Person()
        {
            this.Position = new System.Collections.Generic.List<Position>();
            this.Salutation = new System.Collections.Generic.List<string>();
            this.GivenName = new System.Collections.Generic.List<string>();
            this.SurName = new System.Collections.Generic.List<string>();
            this.EmailAddress = new System.Collections.Generic.List<string>();
            this.PhoneNumber = new System.Collections.Generic.List<string>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The salutation
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("salutation", Namespace="", DataType="string")]
        public System.Collections.Generic.List<string> Salutation { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Salutation-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Salutation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SalutationSpecified
        {
            get
            {
                return (this.Salutation.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The given name
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("givenName", Namespace="", DataType="string")]
        public System.Collections.Generic.List<string> GivenName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The sur name
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("surName", Namespace="", DataType="string")]
        public System.Collections.Generic.List<string> SurName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      The email address of the person
        ///				    </para>
        /// <para xml:lang="en">
        ///	An email address
        ///      </para>
        /// <para xml:lang="en">Pattern: [^@]+@[^\.]+\..+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^@]+@[^\\.]+\\..+")]
        [System.Xml.Serialization.XmlElementAttribute("emailAddress", Namespace="")]
        public System.Collections.Generic.List<string> EmailAddress { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      Phone number of the person
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("phoneNumber", Namespace="", DataType="string")]
        public System.Collections.Generic.List<string> PhoneNumber { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PhoneNumber-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PhoneNumber collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhoneNumberSpecified
        {
            get
            {
                return (this.PhoneNumber.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Position", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Position
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The function of a person
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PositionVocabulary", Namespace="")]
    public enum PositionVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The author of the data
        ///	  </para>
        /// </summary>
        Author,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The author of the data
        ///	  </para>
        /// </summary>
        Contact,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    The author of the data
        ///	  </para>
        /// </summary>
        Contributor,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Description", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Description
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      A title for the data which is describe.
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("title", Namespace="", DataType="string")]
        public string Title { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				      An abstract that describes the object in all
        ///				      its details. This can contain any information
        ///				      that is suitable to inform somebody who does
        ///				      not know your data nor your research. Write in
        ///				      great detail about all aspects that
        ///				      characterize the data (e.g. condidtions, setup,
        ///				      organism, notes).
        ///				    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("abstract", Namespace="", DataType="string")]
        public string Abstract { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Resource", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Resource
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///				Online resources reference the file that is described with the one instance of
        ///				a ease annotation.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("OnlineResources", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("OnlineResource", Namespace="")]
        public System.Collections.Generic.List<OnlineResource> OnlineResources { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OnlineResources-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OnlineResources collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OnlineResourcesSpecified
        {
            get
            {
                return (this.OnlineResources.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Resource" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Resource" /> class.</para>
        /// </summary>
        public Resource()
        {
            this.OnlineResources = new System.Collections.Generic.List<OnlineResource>();
            this.OfflineResources = new System.Collections.Generic.List<OfflineResource>();
            this.EmbeddedResources = new System.Collections.Generic.List<EmbeddedResource>();
        }
        
        /// <summary>
        /// <para xml:lang="en">
        ///				An offline resource references the file in a
        ///				database by id or by a local file path.
        ///			      </para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("OfflineResources", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("OfflineResource", Namespace="")]
        public System.Collections.Generic.List<OfflineResource> OfflineResources { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OfflineResources-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OfflineResources collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OfflineResourcesSpecified
        {
            get
            {
                return (this.OfflineResources.Count != 0);
            }
        }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("EmbeddedResources", Namespace="")]
        [System.Xml.Serialization.XmlArrayItemAttribute("EmbeddedResource", Namespace="")]
        public System.Collections.Generic.List<EmbeddedResource> EmbeddedResources { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmbeddedResources-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EmbeddedResources collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EmbeddedResourcesSpecified
        {
            get
            {
                return (this.EmbeddedResources.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OnlineResource", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OnlineResource
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The URL to the download of the data. Using this URL with a download manager
        ///					    should return the raw data e.g. csv or whatever kind of data type is described.
        ///					  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("downloadUrl", Namespace="", DataType="anyURI")]
        public string DownloadUrl { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The object reference URL can be used to link the annotation to more contextual
        ///					    information for example the project homepage with more extensive metadata of
        ///					    the object described with the annotation.
        ///					  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("referenceUrl", Namespace="", DataType="anyURI")]
        public string ReferenceUrl { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The file type of the data described with the annotation. For example (Audio,
        ///					    Image, Table, Video)
        ///					  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("dataFormat", Namespace="")]
        public DataFormat DataFormat { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DataFormat", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataFormat
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Uri { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The data type provides information about the type of object. It is an
    ///	extendable list of object file types (Image, Audio, Table, Video)
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DataFormatVocabulary", Namespace="")]
    public enum DataFormatVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Audio file tpye (e.g. mp3)
        ///	  </para>
        /// </summary>
        Audio,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Image file tpye (e.g. jpeg)
        ///	  </para>
        /// </summary>
        Image,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Tabular file tpye (e.g. csv, excel)
        ///	  </para>
        /// </summary>
        Table,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Video file tpye (e.g. mp4, avi)
        ///	  </para>
        /// </summary>
        Video,
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OfflineResource", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OfflineResource
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    A database id as reference to a dataset which is described.
        ///					  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fileID", Namespace="", DataType="string")]
        public string FileID { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The file name. Fore example '19.11.1996_audio1.mp3'.
        ///					  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fileName", Namespace="", DataType="string")]
        public string FileName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The file name including the path. Fore example '/tmp/19.11.1996_image1.png'.
        ///					  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("filePath", Namespace="", DataType="string")]
        public string FilePath { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The mime type of the base64 encoded audio data
        ///					  </para>
        /// <para xml:lang="en">
        ///	A mime type of a file
        ///      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("mimeType", Namespace="")]
        public string MimeType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///					    The file type of the data described with the annotation. For example (Audio,
        ///					    Image, Table, Video)
        ///					  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("dataFormat", Namespace="")]
        public DataFormat DataFormat { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EmbeddedResource", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmbeddedResource
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///					      A base 64 encoded resource
        ///					    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Base64Resource", Namespace="")]
        public Base64Resource Base64Resource { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Base64Resource", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Base64Resource
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The file name. Fore example '19.11.1996_audio1.mp3'. This is
        ///						    useful to reconstruct the file for processing.
        ///						  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fileName", Namespace="", DataType="string")]
        public string FileName { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The mime type of the base64 encoded audio data
        ///						  </para>
        /// <para xml:lang="en">
        ///	A mime type of a file
        ///      </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("mimeType", Namespace="")]
        public string MimeType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    A base 64 encoded string containing the audio
        ///						  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("data", Namespace="", DataType="base64Binary")]
        public byte[] Data { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The date of audio encoding
        ///						  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("encodingDate", Namespace="", DataType="date")]
        public System.DateTime EncodingDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The time of audio encoding
        ///						  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("encodingTime", Namespace="", DataType="string")]
        public string EncodingTime { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The sha2 hash of the base64 encoded audio data for verification
        ///						  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("sha2hash", Namespace="", DataType="string")]
        public string Sha2Hash { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">
        ///						    The file type of the data described with the annotation. For example (Audio,
        ///						    Image, Table, Video)
        ///						  </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("dataFormat", Namespace="")]
        public DataFormat DataFormat { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	The source the scientific data is derived from (e.g. Specimen,
    ///	Literature, Multimedia (e.g. audio, video), Material Sample: e.g
    ///	Tissue; Mineral, Image: Photo or Drawing)
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DataSourceTypeVocabulary", Namespace="")]
    public enum DataSourceTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    A specimen living or dead related to an organism e.g.tissue, parts or the whole
        ///	    organism, fossil or preserved specimen
        ///	  </para>
        /// </summary>
        Specimen,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Any form of literature may it be electronic or a hardcopy (e.g. for meta
        ///	    analyses)
        ///	  </para>
        /// </summary>
        Literature,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Multimedia objects are files that contain e.g. images, audio recordings, video
        ///	    clips etc. (This exludes pdf or other word
        ///	    documents as they are covered by literature base type)
        ///	  </para>
        /// </summary>
        Multimedia,
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A mime type for audio files
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AudioMimeTypeVocabulary", Namespace="")]
    public enum AudioMimeTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    MP3 audio file (audio/mpeg3, audio/x-mpeg-3, video/mpeg, video/x-mpeg)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mp3")]
        Mp3,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Adaptive differential pulse-code modulation (audio/adpcm)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("adp")]
        Adp,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Sun Audio - Au file format (audio/basic)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("au")]
        Au,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    MIDI - Musical Instrument Digital Interface (audio/midi)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mid")]
        Mid,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    MPEG-4 Audio (audio/mp4)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mp4a")]
        Mp4A,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    MPEG Audio (audio/mpeg)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mpga")]
        Mpga,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ogg Audio (audio/ogg)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("oga")]
        Oga,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DECE Audio (audio/vnd.dece.audio)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("uva")]
        Uva,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Digital Winds Music (audio/vnd.digital-winds)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("eol")]
        Eol,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DRA Audio (audio/vnd.dra)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("dra")]
        Dra,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DTS Audio (audio/vnd.dts)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("dts")]
        Dts,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DTS High Definition Audio (audio/vnd.dts.hd)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("dtshd")]
        Dtshd,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Lucent Voice (audio/vnd.lucent.voice)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("lvp")]
        Lvp,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft PlayReady Ecosystem (audio/vnd.ms-playready.media.pya)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("pya")]
        Pya,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nuera ECELP 4800 (audio/vnd.nuera.ecelp4800)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ecelp4800")]
        Ecelp4800,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nuera ECELP 7470 (audio/vnd.nuera.ecelp7470)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ecelp7470")]
        Ecelp7470,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Nuera ECELP 9600 (audio/vnd.nuera.ecelp9600)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ecelp9600")]
        Ecelp9600,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Hit'n'Mix (audio/vnd.rip)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("rip")]
        Rip,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Open Web Media Project - Audio (audio/webm)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("weba")]
        Weba,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Advanced Audio Coding (AAC) (audio/x-aac)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("aac")]
        Aac,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Audio Interchange File Format (audio/x-aiff)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("aif")]
        Aif,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    M3U (Multimedia Playlist) (audio/x-mpegurl)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("m3u")]
        M3U,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Windows Media Audio Redirector (audio/x-ms-wax)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("wax")]
        Wax,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Windows Media Audio (audio/x-ms-wma)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("wma")]
        Wma,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Real Audio Sound (audio/x-pn-realaudio)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ram")]
        Ram,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Real Audio Sound (audio/x-pn-realaudio-plugin)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("rmp")]
        Rmp,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Waveform Audio File Format (WAV) (audio/x-wav)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("wav")]
        Wav,
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A mime type for image files
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ImageMimeTypeVocabulary", Namespace="")]
    public enum ImageMimeTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Bitmap Image File (image/bmp)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("bmp")]
        Bmp,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Computer Graphics Metafile (image/cgm)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("cgm")]
        Cgm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    G3 Fax Image (image/g3fax)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("g3")]
        G3,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Graphics Interchange Format (image/gif)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("gif")]
        Gif,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Image Exchange Format (image/ief)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ief")]
        Ief,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    JPEG Image (image/jpeg)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("jpeg")]
        Jpeg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    JPEG Image (image/jpeg)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("jpg")]
        Jpg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    OpenGL Textures (KTX) (image/ktx)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ktx")]
        Ktx,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Portable Network Graphics (PNG) (image/png)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("png")]
        Png,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    BTIF (image/prs.btif)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("btif")]
        Btif,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Scalable Vector Graphics (SVG) (image/svg+xml)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("svg")]
        Svg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Tagged Image File Format (image/tiff)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("tiff")]
        Tiff,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Photoshop Document (image/vnd.adobe.photoshop)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("psd")]
        Psd,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DECE Graphic (image/vnd.dece.graphic)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("uvi")]
        Uvi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DjVu (image/vnd.djvu)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("djvu")]
        Djvu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Close Captioning - Subtitle (image/vnd.dvb.subtitle)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("sub")]
        Sub,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DWG Drawing (image/vnd.dwg)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("dwg")]
        Dwg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    AutoCAD DXF (image/vnd.dxf)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("dxf")]
        Dxf,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    FastBid Sheet (image/vnd.fastbidsheet)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("fbs")]
        Fbs,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    FlashPix (image/vnd.fpx)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("fpx")]
        Fpx,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    FAST Search and Transfer ASA (image/vnd.fst)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("fst")]
        Fst,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    EDMICS 2000 (image/vnd.fujixerox.edmics-mmr)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mmr")]
        Mmr,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    EDMICS 2000 (image/vnd.fujixerox.edmics-rlc)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("rlc")]
        Rlc,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Document Imaging Format (image/vnd.ms-modi)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mdi")]
        Mdi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    FlashPix (image/vnd.net-fpx)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("npx")]
        Npx,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    WAP Bitamp (WBMP) (image/vnd.wap.wbmp)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("wbmp")]
        Wbmp,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    eXtended Image File Format (XIFF)
        ///	    (image/vnd.xiff)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("xif")]
        Xif,
        
        /// <summary>
        /// <para xml:lang="en"> WebP Image (image/webp)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("webp")]
        Webp,
        
        /// <summary>
        /// <para xml:lang="en"> CMU Image
        ///	    (image/x-cmu-raster)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ras")]
        Ras,
        
        /// <summary>
        /// <para xml:lang="en"> Corel Metafile
        ///	    Exchange (CMX) (image/x-cmx)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("cmx")]
        Cmx,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    FreeHand MX
        ///	    (image/x-freehand)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("fh")]
        Fh,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Icon Image (image/x-icon)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ico")]
        Ico,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    PCX Image (image/x-pcx)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("pcx")]
        Pcx,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    PICT Image (image/x-pict)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("pic")]
        Pic,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Portable Anymap Image (image/x-portable-anymap)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("pnm")]
        Pnm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Portable Bitmap Format (image/x-portable-bitmap)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("pbm")]
        Pbm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Portable Graymap Format
        ///	    (image/x-portable-graymap)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("pgm")]
        Pgm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Portable Pixmap Format
        ///	    (image/x-portable-pixmap)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ppm")]
        Ppm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Silicon Graphics RGB Bitmap (image/x-rgb)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("rgb")]
        Rgb,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    X BitMap (image/x-xbitmap)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("xbm")]
        Xbm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    X PixMap (image/x-xpixmap)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("xpm")]
        Xpm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    X Window Dump (image/x-xwindowdump)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("xwd")]
        Xwd,
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A mime type for video files
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VideoMimeTypeVocabulary", Namespace="")]
    public enum VideoMimeTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    3GP (video/3gpp)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3gp")]
        Item3gp,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    3GP2 (video/3gpp2)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3g2")]
        Item3g2,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    H.261 (video/h261)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("h261")]
        H261,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    H.263 (video/h263)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("h263")]
        H263,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    H.264 (video/h264)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("h264")]
        H264,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    JPGVideo (video/jpeg)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("jpgv")]
        Jpgv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    JPEG 2000 Compound Image File Format (video/jpm)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("jpm")]
        Jpm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Motion JPEG 2000 (video/mj2)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mj2")]
        Mj2,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    MPEG-4 Video (video/mp4)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mp4")]
        Mp4,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    MPEG Video (video/mpeg)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mpeg")]
        Mpeg,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ogg Video (video/ogg)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("ogv")]
        Ogv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Quicktime Video (video/quicktime)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("qt")]
        Qt,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DECE High Definition Video (video/vnd.dece.hd)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("uvh")]
        Uvh,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DECE Mobile Video (video/vnd.dece.mobile)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("uvm")]
        Uvm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DECE PD Video (video/vnd.dece.pd)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("uvp")]
        Uvp,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DECE SD Video (video/vnd.dece.sd)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("uvs")]
        Uvs,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DECE Video (video/vnd.dece.video)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("uvv")]
        Uvv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    FAST Search and Transfer ASA (video/vnd.fvt)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("fvt")]
        Fvt,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    MPEG Url (video/vnd.mpegurl)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("mxu")]
        Mxu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft PlayReady Ecosystem Video (video/vnd.ms-playready.media.pyv)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("pyv")]
        Pyv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    DECE MP4 (video/vnd.uvvu.mp4)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("uvu")]
        Uvu,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Vivo (video/vnd.vivo)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("viv")]
        Viv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Open Web Media Project - Video (video/webm)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("webm")]
        Webm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Flash Video (video/x-f4v)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("f4v")]
        F4V,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    FLI/FLC Animation Format (video/x-fli)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("fli")]
        Fli,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Flash Video (video/x-flv)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("flv")]
        Flv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    M4v (video/x-m4v)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("m4v")]
        M4V,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Advanced Systems Format (ASF) (video/x-ms-asf)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("asf")]
        Asf,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Windows Media (video/x-ms-wm)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("wm")]
        Wm,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Windows Media Video (video/x-ms-wmv)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("wmv")]
        Wmv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Windows Media Audio/Video Playlist (video/x-ms-wmx)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("wmx")]
        Wmx,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Windows Media Video Playlist (video/x-ms-wvx)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("wvx")]
        Wvx,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Audio Video Interleave (AVI) (video/x-msvideo)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("avi")]
        Avi,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    SGI Movie (video/x-sgi-movie)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("movie")]
        Movie,
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A mime type for tabular files
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TableMimeTypeVocabulary", Namespace="")]
    public enum TableMimeTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Office - OOXML - Spreadsheet
        ///	    (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("xlsx")]
        Xlsx,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Microsoft Office - OOXML - Spreadsheet Teplate
        ///	    (application/vnd.openxmlformats-officedocument.spreadsheetml.template)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("xltx")]
        Xltx,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Comma-Seperated Values (text/csv)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("csv")]
        Csv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Tab Seperated Values (text/tab-separated-values)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("tsv")]
        Tsv,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    OpenOffice - Calc (Spreadsheet) (application/vnd.sun.xml.calc)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("sxc")]
        Sxc,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    OpenOffice - Calc Template (Spreadsheet)
        ///	    (application/vnd.sun.xml.calc.template)
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("stc")]
        Stc,
    }
    
    /// <summary>
    /// <para xml:lang="en">
    ///	A mime type for metadata files
    ///      </para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MetadataMimeTypeVocabulary", Namespace="")]
    public enum MetadataMimeTypeVocabulary
    {
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Ecological Metadata Language file
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("eml")]
        Eml,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Access To Biological Collection Data file
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("abcd")]
        Abcd,
        
        /// <summary>
        /// <para xml:lang="en">
        ///	    Darwin Core file
        ///	  </para>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("dwc")]
        Dwc,
    }
}
